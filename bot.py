import logging
import os
import tempfile
import io
import telebot
import cv2
import numpy as np
import requests
import re
from datetime import datetime

from config import TELEGRAM_API_TOKEN, BOT_MESSAGES, FACE_SHAPE_CRITERIA, PREMIUM_MESSAGES, CRYPTO_BOT_TOKEN
from face_analyzer import FaceAnalyzer
from hairstyle_recommender import HairstyleRecommender
from lightx_client import LightXClient
from face_attractiveness import FaceAttractiveness
from database import get_or_create_user, get_user_credits, update_user_credits, use_credit, create_transaction, complete_transaction, Session, Transaction
from crypto_payment import CryptoPayment
from crypto_bot_payment import CryptoBotPayment
from stripe_payment import StripePayment
from process_video_with_grid import process_video_with_grid

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class FaceShapeBot:
    def __init__(self, use_webhook=False):
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º threaded=False –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        # –§–ª–∞–≥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
        self.test_mode = os.environ.get("TEST_MODE", "").lower() == "true"
        self.bot = telebot.TeleBot(TELEGRAM_API_TOKEN, threaded=False)
        self.face_analyzer = FaceAnalyzer()
        self.hairstyle_recommender = HairstyleRecommender()
        self.face_attractiveness_analyzer = FaceAttractiveness()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂–Ω—ã–µ –º–æ–¥—É–ª–∏
        self.crypto_payment = CryptoPayment()  # –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.payment_module = CryptoBotPayment()  # –ù–æ–≤—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Crypto Bot
        self.stripe_payment = StripePayment()  # –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ —á–µ—Ä–µ–∑ Stripe
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç LightXClient –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LightX API (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        try:
            self.lightx_client = LightXClient()
            self.lightx_available = True
            logger.info("LightX API client initialized successfully")
        except Exception as e:
            logger.warning(f"Failed to initialize LightX API client: {e}")
            self.lightx_available = False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (webhook –∏–ª–∏ polling)
        self.use_webhook = use_webhook
        
        # Store user data for hairstyle virtual try-on
        self.user_data = {}
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        @self.bot.message_handler(commands=['start'])
        def handle_start(message):
            self.start(message)
            
        @self.bot.message_handler(commands=['help'])
        def handle_help(message):
            self.help_command(message)
            
        @self.bot.message_handler(commands=['menu'])
        def handle_menu(message):
            self.menu_command(message)
            
        @self.bot.message_handler(commands=['faceshape'])
        def handle_faceshape(message):
            self.faceshape_command(message)
            
        @self.bot.message_handler(commands=['try'])
        def handle_try(message):
            self.try_hairstyle_command(message)
            
        @self.bot.message_handler(commands=['symmetry'])
        def handle_symmetry(message):
            self.symmetry_command(message)
            
        # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        @self.bot.message_handler(commands=['inversion'])
        def handle_inversion(message):
            self.symmetry_command(message)
            
        @self.bot.message_handler(commands=['hairstyles'])
        def handle_hairstyles(message):
            self.list_hairstyles_command(message)
            
        @self.bot.message_handler(commands=['reset'])
        def handle_reset(message):
            self.reset_command(message)
            
        @self.bot.message_handler(commands=['beauty'])
        def handle_beauty(message):
            self.beauty_command(message)
            
        @self.bot.message_handler(commands=['analyze_video'])
        def handle_analyze_video(message):
            self.video_command(message)
            
        # –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—Ä–µ–¥–∏—Ç–∞–º–∏
        @self.bot.message_handler(commands=['credits'])
        def handle_credits(message):
            self.credits_command(message)
            
        @self.bot.message_handler(commands=['buy'])
        def handle_buy(message):
            self.buy_credits_command(message)
            
        @self.bot.message_handler(content_types=['photo'])
        def handle_photo(message):
            # –ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—É—â–∞—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
            chat_id = message.chat.id
            if chat_id in self.user_data:
                current_feature = self.user_data[chat_id].get('current_feature')
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}, —Ç–µ–∫—É—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {current_feature}")
            else:
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
            self.process_photo(message)
            
        @self.bot.message_handler(content_types=['video'])
        def handle_video(message):
            # –ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—É—â–∞—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
            chat_id = message.chat.id
            if chat_id in self.user_data:
                current_feature = self.user_data[chat_id].get('current_feature')
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}, —Ç–µ–∫—É—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è: {current_feature}")
            else:
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –±–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏")
                
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ (–Ω–µ –±–æ–ª–µ–µ 8 —Å–µ–∫—É–Ω–¥)
            if message.video.duration > 8:
                self.bot.send_message(chat_id, "‚ö†Ô∏è –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –Ω–µ –±–æ–ª–µ–µ 8 —Å–µ–∫—É–Ω–¥.")
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
            self.process_video(message)
            
        @self.bot.message_handler(content_types=['text'])
        def handle_text(message):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π
            if message.text.startswith('/'):
                return
                
            # Check if this is a response in any of the hairstyle customization states
            chat_id = message.chat.id
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            if chat_id not in self.user_data:
                self.user_data[chat_id] = {}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
            if self.user_data[chat_id].get('waiting_for_payment_method'):
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã")
                # –î–µ–ª–µ–≥–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –æ–ø–ª–∞—Ç—ã
                self.handle_payment_method_selection(message)
                return
                    
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–∏
            if message.text.isdigit():
                feature_number = message.text.strip()
                logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤—ã–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ {feature_number} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É
                if feature_number == "5":
                    # –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞ (ai_replace)
                    logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è 5 (—É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞). –ê–∫—Ç–∏–≤–∏—Ä—É—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
                    self.user_data[chat_id]['current_feature'] = "5"
                    self.bot.send_message(
                        chat_id, 
                        "üñº **–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏**\n\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ñ–æ–Ω.",
                        parse_mode="Markdown"
                    )
                    return
                elif feature_number == "6":
                    # –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
                    logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è 6 (—É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤). –ê–∫—Ç–∏–≤–∏—Ä—É—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
                    self.user_data[chat_id]['current_feature'] = "6"
                    self.bot.send_message(
                        chat_id, 
                        "‚ú® **–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è**\n\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã.\n"
                        "–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ, –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.",
                        parse_mode="Markdown"
                    )
                    return
                elif feature_number == "7":
                    # –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ —Ç–µ–∫—Å—Ç—É
                    logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è 7 (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É). –ê–∫—Ç–∏–≤–∏—Ä—É—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
                    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    self.generate_from_text_command(message)
                    return
                # –î—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ (1-4) —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö –∫–æ–¥–∞
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ —Ñ—É–Ω–∫—Ü–∏–∏ 5 (—É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞)
            # –∏ –µ—Å—Ç—å –ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
            if self.user_data[chat_id].get('current_feature') == "5" and 'image_data' in self.user_data[chat_id]:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (chat_id: {chat_id}) –≤–≤–µ–ª –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ 5 (—É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞): '{message.text}'")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ background_prompt
                self.user_data[chat_id]['background_prompt'] = message.text
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–º—Ç–∞ —Ñ–æ–Ω–∞
                self.user_data[chat_id]['waiting_for_background_prompt'] = True
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å–º–µ–Ω—ã —Ñ–æ–Ω–∞
                self.change_background_command(message)
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ —Ñ—É–Ω–∫—Ü–∏–∏ 6 (—É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤)
            # –∏ –µ—Å—Ç—å –ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
            if self.user_data[chat_id].get('current_feature') == "6" and 'image_data' in self.user_data[chat_id]:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (chat_id: {chat_id}) –≤–≤–µ–ª –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ 6: '{message.text}'")
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.user_data[chat_id]['replace_prompt'] = message.text
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
                self.process_photo_for_ai_replace(message, text_prompt=message.text)
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
            if self.user_data[chat_id].get('waiting_for_package_selection'):
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–∞–∫–µ—Ç–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤
                logger.info(f"–û–¢–õ–ê–î–ö–ê STRIPE: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–∞–∫–µ—Ç–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤")
                self.handle_package_selection(message)
                return
            elif self.user_data[chat_id].get('waiting_for_payment_method'):
                # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º—É –º–µ—Ç–æ–¥—É
                logger.info(f"–û–¢–õ–ê–î–ö–ê STRIPE: –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –º–µ—Ç–æ–¥—É handle_payment_method_selection")
                self.handle_payment_method_selection(message)
                return
            elif self.user_data[chat_id].get('waiting_for_hairstyle_selection'):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—á–µ—Å–∫–∏
                self.apply_selected_hairstyle(message)
                return
            elif self.user_data[chat_id].get('waiting_for_text_prompt'):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                self.generate_from_text_command(message)
                return
            elif self.user_data[chat_id].get('waiting_for_background_prompt'):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–º–µ–Ω—É —Ñ–æ–Ω–∞
                logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
                self.change_background_command(message)
                return
                
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π
            self.bot.send_message(
                chat_id,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
            )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏
        @self.bot.callback_query_handler(func=lambda call: True)
        def handle_callback_query(call):
            logger.info(f"–ü–æ–ª—É—á–µ–Ω callback_query: {call.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.id}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–º–µ—Ä–∏—Ç—å –ø—Ä–∏—á–µ—Å–∫—É"
            if call.data == "try_hairstyle":
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞
                self.bot.answer_callback_query(call.id, "–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω—é –ø—Ä–∏—á–µ—Å–æ–∫...")
                # –í—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–∏–º–µ—Ä–∫–∏ –ø—Ä–∏—á–µ—Å–∫–∏
                self.try_hairstyle_command(call.message)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞
            elif call.data.startswith("bg_"):
                # –ü–æ–ª—É—á–∞–µ–º chat_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                chat_id = call.message.chat.id
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç
                color_choice = ""
                if call.data == "bg_white":
                    color_choice = "–±–µ–ª—ã–π"
                    color_hex = "#FFFFFF"
                elif call.data == "bg_black":
                    color_choice = "—á–µ—Ä–Ω—ã–π"
                    color_hex = "#000000"
                elif call.data == "bg_green":
                    color_choice = "–∑–µ–ª–µ–Ω—ã–π"
                    color_hex = "#00FF00"
                
                # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
                self.bot.answer_callback_query(call.id, f"–í—ã–±—Ä–∞–Ω {color_choice} —Ñ–æ–Ω")
                
                # –£–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                self.bot.edit_message_reply_markup(
                    chat_id=chat_id,
                    message_id=call.message.message_id,
                    reply_markup=None
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                self.bot.send_message(chat_id, f"–í—ã–±—Ä–∞–Ω {color_choice} —Ü–≤–µ—Ç —Ñ–æ–Ω–∞")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ü–≤–µ—Ç–æ–≤
                if chat_id not in self.user_data:
                    self.user_data[chat_id] = {}
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.user_data[chat_id]['color_choice'] = color_choice
                self.user_data[chat_id]['color_hex'] = color_hex
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
                self.user_data[chat_id]['waiting_for_background_prompt'] = False
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                processing_message = self.bot.send_message(
                    chat_id, 
                    f"ü§ñ –ó–∞–ø—É—Å–∫–∞—é –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞ –∏ –∑–∞–º–µ–Ω—ã –Ω–∞ {color_choice} —Ü–≤–µ—Ç... –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
                )
                
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º HEX-–∫–æ–¥ —Ü–≤–µ—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
                    background_prompt = color_hex
                    english_prompt = background_prompt
                    
                    logger.info(f"–í—ã–±—Ä–∞–Ω —Ü–≤–µ—Ç —Ñ–æ–Ω–∞: {color_choice} ({background_prompt})")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    image_data = self.user_data[chat_id]['image_data']
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏ –º—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∏–ª—è
                    use_style_image = self.user_data[chat_id].get('use_style_image', False)
                    style_image_data = self.user_data[chat_id].get('style_image_data', None) if use_style_image else None
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–º–µ–Ω—É —Ñ–æ–Ω–∞ —Å –ø–æ–º–æ—â—å—é LightX API
                    logger.info(f"–ü—Ä–∏–º–µ–Ω—è—é –Ω–æ–≤—ã–π —Ñ–æ–Ω —Å –ø—Ä–æ–º–ø—Ç–æ–º: '{english_prompt}', –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–∏–ª—è: {use_style_image}")
                    
                    # –í—ã–∑—ã–≤–∞–µ–º API —Å —É—á–µ—Ç–æ–º –Ω–∞–ª–∏—á–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∏–ª—è
                    logger.info(f"–í—ã–∑—ã–≤–∞–µ–º LightX API –º–µ—Ç–æ–¥ change_background —Å –ø—Ä–æ–º–ø—Ç–æ–º: '{english_prompt}'")
                    background_changed_image = self.lightx_client.change_background(
                        image_data, 
                        english_prompt,
                        style_image=style_image_data
                    )
                    
                    if background_changed_image:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        background_debug_path = "background_changed_image.jpg"
                        with open(background_debug_path, "wb") as f:
                            f.write(background_changed_image)
                        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏: {background_debug_path}")
                        
                        # –°–æ–∑–¥–∞–µ–º BytesIO –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                        result_io = io.BytesIO(background_changed_image)
                        result_io.name = 'background_changed.jpg'
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
                        self.bot.send_photo(
                            chat_id,
                            result_io,
                            caption=f"‚úÖ –§–æ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ {color_choice} —Ü–≤–µ—Ç."
                        )
                    else:
                        # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø—Ä–æ–±—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç LightX API, –ø—Ä–æ–±—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç")
                        self.bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–º –º–µ—Ç–æ–¥–æ–º, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç...")
                        
                        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–ø–∞—Å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                        try:
                            import background_fallback
                            
                            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π API –∫–ª—é—á
                            api_key = self.lightx_client.api_key
                            
                            logger.info(f"–ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –º–µ—Ç–æ–¥ —Å API –∫–ª—é—á–æ–º: {api_key[:8]}...")
                            fallback_result = background_fallback.main(api_key, image_data, color_choice)
                            
                            if fallback_result:
                                # –°–æ–∑–¥–∞–µ–º BytesIO –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                                fallback_io = io.BytesIO(fallback_result)
                                fallback_io.name = 'fallback_bg_changed.jpg'
                                
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
                                self.bot.send_photo(
                                    chat_id,
                                    fallback_io,
                                    caption=f"‚úÖ –§–æ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ {color_choice} —Ü–≤–µ—Ç (–∑–∞–ø–∞—Å–Ω–æ–π –º–µ—Ç–æ–¥)."
                                )
                            else:
                                raise Exception("–ó–∞–ø–∞—Å–Ω–æ–π –º–µ—Ç–æ–¥ –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                                
                        except Exception as fallback_error:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∑–∞–ø–∞—Å–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞: {fallback_error}")
                            self.bot.send_message(chat_id, "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")
                            
                except Exception as e:
                    logger.error(f"Error in change_background: {e}")
                    # –í—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏
                    import traceback
                    logger.error(traceback.format_exc())
                    
                    self.bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")
        
    def start(self, message):
        """Send a message when the command /start is issued."""
        chat_id = message.chat.id
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = message.from_user
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self._reset_all_waiting_states(chat_id)
        logger.info(f"–°–±—Ä–æ—à–µ–Ω—ã –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ /start (–¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤ –∏–∑ Stripe)
        if message.text and len(message.text.split()) > 1:
            params = message.text.split()[1]  # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å–ª–µ /start
            
            # –í–ê–ñ–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç –∏–∑ PaymentLink —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
            if params.startswith('success_payment_'):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–µ—Å—Å–∏–∏
                session_id = params.replace('success_payment_', '')
                logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –∏–∑ Stripe PaymentLink —Å session_id: {session_id}")
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Stripe –ø–ª–∞—Ç–µ–∂–∞
                self.handle_stripe_payment(chat_id, session_id)
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã Stripe (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞: —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ–º –∏ –¥–µ—Ñ–∏—Å–æ–º)
            elif params.startswith('success_') or params.startswith('success-'):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º session_id (—Ä–∞–±–æ—Ç–∞–µ–º —Å –æ–±–æ–∏–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏)
                if params.startswith('success_'):
                    session_id = params.replace('success_', '')
                else:
                    session_id = params.replace('success-', '')
                
                logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –∏–∑ Stripe —Å session_id: {session_id}")
                
                # –î–ª—è –ª—é–±—ã—Ö PaymentLink –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ —É–ø—Ä–æ—â–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                if session_id.startswith('pl_'):
                    self.handle_stripe_payment(chat_id, session_id)
                    return
                    
                # –î–ª—è –¥—Ä—É–≥–∏—Ö –≤–∏–¥–æ–≤ —Å–µ—Å—Å–∏–π - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                status = self.stripe_payment.check_payment_status(session_id)
                logger.info(f"–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ Stripe: {status}")
                
                if status == "completed":
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
                    payment_data = self.stripe_payment.get_payment_data(session_id)
                    logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞: {payment_data}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ telegram_id
                    if payment_data and str(payment_data.get('telegram_id')) == str(chat_id):
                        # –£—Å–ø–µ—à–Ω–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                        credits = payment_data.get('credits', 0)
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–æ–±–∞–≤–ª—è—è –Ω–æ–≤—ã–µ
                        current_credits = get_user_credits(chat_id)
                        updated_credits = current_credits + credits
                        update_user_credits(chat_id, updated_credits)
                        
                        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                        try:
                            complete_transaction(session_id, 'completed')
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
                        
                        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
                        self.safe_send_message(
                            chat_id, 
                            f"‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                            f"–î–æ–±–∞–≤–ª–µ–Ω–æ {credits} –∫—Ä–µ–¥–∏—Ç–æ–≤.\n"
                            f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å {updated_credits} –∫—Ä–µ–¥–∏—Ç–æ–≤.",
                            parse_mode="Markdown"
                        )
                    else:
                        # –£–õ–£–ß–®–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê: –ï—Å–ª–∏ ID –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω–∞—á–∏—Å–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã
                        # —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª –∏ –≤–µ—Ä–Ω—É–ª—Å—è –≤ –±–æ—Ç
                        credits = payment_data.get('credits', 5) if payment_data else 5  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ 5 –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        current_credits = get_user_credits(chat_id)
                        updated_credits = current_credits + credits
                        update_user_credits(chat_id, updated_credits)
                        
                        self.safe_send_message(
                            chat_id, 
                            f"‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                            f"–î–æ–±–∞–≤–ª–µ–Ω–æ {credits} –∫—Ä–µ–¥–∏—Ç–æ–≤.\n"
                            f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å {updated_credits} –∫—Ä–µ–¥–∏—Ç–æ–≤.",
                            parse_mode="Markdown"
                        )
                elif status == "pending":
                    # –ü–ª–∞—Ç–µ–∂ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    self.safe_send_message(
                        chat_id, 
                        "‚è≥ –í–∞—à –ø–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ö—Ä–µ–¥–∏—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞.",
                        parse_mode="Markdown"
                    )
                else:
                    # –£–õ–£–ß–®–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê: –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ completed, –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω–∞—á–∏—Å–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã, 
                    # —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è —á–µ—Ä–µ–∑ success URL
                    logger.info(f"–ù–∞—á–∏—Å–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Å—Ç–∞—Ç—É—Å {status}, —Ç.–∫. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–Ω—É–ª—Å—è —á–µ—Ä–µ–∑ success URL")
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞–∫–µ—Ç
                    credits = 5  # –ë–∞–∑–æ–≤—ã–π –ø–∞–∫–µ—Ç
                    current_credits = get_user_credits(chat_id)
                    updated_credits = current_credits + credits
                    update_user_credits(chat_id, updated_credits)
                    
                    self.safe_send_message(
                        chat_id, 
                        f"‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                        f"–î–æ–±–∞–≤–ª–µ–Ω–æ {credits} –∫—Ä–µ–¥–∏—Ç–æ–≤.\n"
                        f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å {updated_credits} –∫—Ä–µ–¥–∏—Ç–æ–≤.",
                        parse_mode="Markdown"
                    )
                return
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞)
            elif params.startswith('cancel_') or params.startswith('cancel-'):
                if params.startswith('cancel_'):
                    session_id = params.replace('cancel_', '')
                else:
                    session_id = params.replace('cancel-', '')
                logger.info(f"–û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞ Stripe —Å session_id: {session_id}")
                self.safe_send_message(chat_id, "‚ùå –ü–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–∞–∫–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤ –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
                return
        
        # –°–æ–∑–¥–∞–µ–º/–ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        get_or_create_user(
            telegram_id=chat_id, 
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∫–æ–º–∞–Ω–¥–µ start (–¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π)
        if message.text and len(message.text.split()) > 1:
            start_param = message.text.split()[1]
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±–æ–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤: success_ –∏ success-)
            if start_param.startswith('success_') or start_param.startswith('success-'):
                payment_id = start_param.replace('success_', '').replace('success-', '')
                return self.handle_successful_payment(chat_id, payment_id)
                
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±–æ–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤: fail_ –∏ cancel-)
            elif start_param.startswith('fail_') or start_param.startswith('cancel-'):
                payment_id = start_param.replace('fail_', '').replace('cancel-', '')
                return self.bot.send_message(chat_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–ª–∞—Ç–µ–∂ –Ω–µ —É–¥–∞–ª—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.")
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        self.bot.send_message(chat_id, BOT_MESSAGES["start"])

    def help_command(self, message):
        """Send a message when the command /help is issued."""
        chat_id = message.chat.id
        self.bot.send_message(chat_id, BOT_MESSAGES["help"])
        
    def menu_command(self, message):
        """Show the main menu of available functions."""
        chat_id = message.chat.id
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self._reset_all_waiting_states(chat_id)
        logger.info(f"–°–±—Ä–æ—à–µ–Ω—ã –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /menu")
        
        self.bot.send_message(chat_id, BOT_MESSAGES["menu"])
        
    def credits_command(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏—Ö"""
        chat_id = message.chat.id
        user = message.from_user
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        credits = get_user_credits(chat_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫—Ä–µ–¥–∏—Ç–∞—Ö
        self.bot.send_message(
            chat_id, 
            PREMIUM_MESSAGES["credits_info"].format(credits=credits),
            parse_mode="Markdown"
        )
        
    def buy_credits_command(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤"""
        chat_id = message.chat.id
        user = message.from_user
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            get_or_create_user(
                telegram_id=chat_id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≥–æ—Ç–æ–≤ –∫ –ø–æ–∫—É–ø–∫–µ –∫—Ä–µ–¥–∏—Ç–æ–≤")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {e}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if chat_id not in self.user_data:
            self.user_data[chat_id] = {}
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.user_data[chat_id]['current_feature'] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Stripe —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ API –∫–ª—é—á—É –∏ —Ñ–ª–∞–≥—É
        stripe_active = getattr(self.stripe_payment, 'stripe_integration_active', False)
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Stripe: {stripe_active}")
        
        # –ï—Å–ª–∏ Stripe –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        if not stripe_active:
            logger.info(f"Stripe –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–ø—Ü–∏—é –æ–ø–ª–∞—Ç—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π –¥–ª—è {chat_id}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∫–∞–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞
            self.user_data[chat_id]['selected_payment_method'] = "crypto"
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤
            self.user_data[chat_id]['waiting_for_package_selection'] = True
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø–∞–∫–µ—Ç–æ–≤ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            self.safe_send_message(
                chat_id, 
                PREMIUM_MESSAGES["buy_credits_crypto"],
                parse_mode="Markdown"
            )
        else:
            # –ï—Å–ª–∏ Stripe –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
            logger.info(f"Stripe –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –¥–ª—è {chat_id}")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
            self.user_data[chat_id]['waiting_for_payment_method'] = True
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
            self.safe_send_message(
                chat_id, 
                PREMIUM_MESSAGES["choose_payment_method"],
                parse_mode="Markdown"
            )
        
        # –í handle_message –±—É–¥–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    def handle_message(self, message):
        """Handle non-photo messages."""
        chat_id = message.chat.id
        text = message.text.strip() if message.text else ""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
        if chat_id in self.user_data:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞ (—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ)
            if self.user_data[chat_id].get('awaiting_analysis_method'):
                if text == 'üì∏ –ê–Ω–∞–ª–∏–∑ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏':
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∞–Ω–∞–ª–∏–∑ –ø–æ —Ñ–æ—Ç–æ
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤—ã–±—Ä–∞–ª –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞ –ø–æ —Ñ–æ—Ç–æ")
                    self.user_data[chat_id]['awaiting_analysis_method'] = False
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è —Ñ–æ—Ç–æ
                    instructions = [
                        "–î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞ –º–Ω–µ –Ω—É–∂–Ω–∞ –≤–∞—à–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è.",
                        "",
                        "üì∏ **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ç–æ:**",
                        "‚Ä¢ –õ–∏—Ü–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–µ—Ç–∫–æ –≤–∏–¥–Ω–æ",
                        "‚Ä¢ –ü—Ä—è–º–æ–π —Ä–∞–∫—É—Ä—Å, —Å–º–æ—Ç—Ä–∏—Ç–µ –≤ –∫–∞–º–µ—Ä—É",
                        "‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ",
                        "‚Ä¢ –ë–µ–∑ –≥–æ–ª–æ–≤–Ω—ã—Ö —É–±–æ—Ä–æ–≤ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤",
                        "‚Ä¢ –í–æ–ª–æ—Å—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –∑–∞–∫—Ä—ã–≤–∞—Ç—å –ª–∏—Ü–æ",
                        "",
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∏ —è –ø—Ä–æ–≤–µ–¥—É –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞ –∏ –¥–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–∏—á–µ—Å–∫–∞–º."
                    ]
                    self.bot.send_message(chat_id, "\n".join(instructions), parse_mode="Markdown")
                    return
                
                elif text == 'üìπ –ê–Ω–∞–ª–∏–∑ –ø–æ –≤–∏–¥–µ–æ':
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∞–Ω–∞–ª–∏–∑ –ø–æ –≤–∏–¥–µ–æ
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤—ã–±—Ä–∞–ª –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞ –ø–æ –≤–∏–¥–µ–æ")
                    self.user_data[chat_id]['awaiting_analysis_method'] = False
                    
                    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é –≤–∏–¥–µ–æ-–∞–Ω–∞–ª–∏–∑–∞
                    self.video_command(message)
                    return
                    
                else:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å —Å–Ω–æ–≤–∞
                    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                    photo_button = telebot.types.KeyboardButton('üì∏ –ê–Ω–∞–ª–∏–∑ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏')
                    video_button = telebot.types.KeyboardButton('üìπ –ê–Ω–∞–ª–∏–∑ –ø–æ –≤–∏–¥–µ–æ')
                    markup.add(photo_button, video_button)
                    
                    self.bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=markup)
                    return
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤
            if self.user_data[chat_id].get('waiting_for_package_selection'):
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤—ã–±–∏—Ä–∞–µ—Ç –ø–∞–∫–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤: {text}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
                payment_method = self.user_data[chat_id].get('selected_payment_method')
                
                if text in ["1", "2", "3"]:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç
                    package_index = int(text) - 1
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –ø–∞–∫–µ—Ç—ã –∫—Ä–µ–¥–∏—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
                    if payment_method == 'crypto':
                        # –î–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
                        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–∫–µ—Ç—ã –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã")
                        credit_packages = self.payment_module.get_credit_packages()
                    else:
                        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –∏–∑ Stripe
                        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –∫—Ä–µ–¥–∏—Ç–æ–≤ (–¥–ª—è –∫–∞—Ä—Ç)")
                        credit_packages = self.stripe_payment.get_credit_packages()
                    
                    if 0 <= package_index < len(credit_packages):
                        selected_package = credit_packages[package_index]
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        self.user_data[chat_id]['selected_package'] = selected_package
                        
                        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞
                        self.user_data[chat_id]['waiting_for_package_selection'] = False
                        
                        # –ï—Å–ª–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã —É–∂–µ –≤—ã–±—Ä–∞–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø–ª–∞—Ç–µ–∂–∞
                        if payment_method:
                            logger.info(f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã —É–∂–µ –≤—ã–±—Ä–∞–Ω: {payment_method}")
                            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –Ω–∞–ø—Ä—è–º—É—é
                            self._create_payment(chat_id, payment_method)
                        else:
                            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
                            self.user_data[chat_id]['waiting_for_payment_method'] = True
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
                            payment_methods_text = PREMIUM_MESSAGES["choose_payment_method"]
                        
                        # –î–µ—Ç–∞–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Stripe –∏ –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        has_api_key = self.stripe_payment.api_key is not None
                        active_flag = hasattr(self.stripe_payment, 'stripe_integration_active') and self.stripe_payment.stripe_integration_active
                        logger.info(f"–û–¢–õ–ê–î–ö–ê STRIPE: api_key —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {has_api_key}, —Ç–∏–ø: {type(self.stripe_payment.api_key)}, –∞–∫—Ç–∏–≤–Ω–∞: {active_flag}")
                        logger.info(f"–û–¢–õ–ê–î–ö–ê STRIPE: –æ–±—ä–µ–∫—Ç stripe_payment –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç—ã: {dir(self.stripe_payment)}")
                        
                        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º Stripe –µ—Å–ª–∏ –∫–ª—é—á —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                        if has_api_key and not active_flag:
                            logger.info(f"–û–¢–õ–ê–î–ö–ê STRIPE: –ö–ª—é—á API —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º.")
                            setattr(self.stripe_payment, 'stripe_integration_active', True)
                            active_flag = True
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Stripe —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ API –∫–ª—é—á—É –∏ —Ñ–ª–∞–≥—É
                        if not active_flag:
                            # –ï—Å–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Stripe –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∏
                            logger.info(f"–û–¢–õ–ê–î–ö–ê STRIPE: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
                            payment_methods_text = "üí≥ *–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã* üí≥\n\n" \
                                                 "1Ô∏è‚É£ *–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞* - –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Crypto Bot (USDT/TON)\n\n" \
                                                 "–î–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç—å—Ç–µ '1'"
                        else:
                            logger.info(f"–û–¢–õ–ê–î–ö–ê STRIPE: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
                            payment_methods_text = "üí≥ *–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã* üí≥\n\n" \
                                                 "1Ô∏è‚É£ *–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞* - –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Crypto Bot (USDT/TON)\n" \
                                                 "2Ô∏è‚É£ *–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞* - –æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π —á–µ—Ä–µ–∑ Stripe\n\n" \
                                                 "–î–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç—å—Ç–µ '1' –∏–ª–∏ '2'"
                        
                        # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—ã–≤–µ–¥–µ–º, –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
                        logger.info(f"–û–¢–õ–ê–î–ö–ê STRIPE: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {payment_methods_text[:50]}...")
                        
                        self.safe_send_message(
                            chat_id,
                            payment_methods_text,
                            parse_mode="Markdown"
                        )
                    else:
                        # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –ø–∞–∫–µ—Ç–∞
                        self.safe_send_message(
                            chat_id,
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç, –æ—Ç–ø—Ä–∞–≤–∏–≤ –Ω–æ–º–µ—Ä (1, 2 –∏–ª–∏ 3)"
                        )
                else:
                    # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥
                    self.safe_send_message(
                        chat_id,
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç, –æ—Ç–ø—Ä–∞–≤–∏–≤ –Ω–æ–º–µ—Ä (1, 2 –∏–ª–∏ 3)"
                    )
                return
                
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
            elif self.user_data[chat_id].get('waiting_for_payment_method'):
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                if hasattr(message, 'text') and message.text:
                    payment_input = message.text
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_input}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Stripe —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π —Ñ–ª–∞–≥
                    stripe_active = getattr(self.stripe_payment, 'stripe_integration_active', False)
                    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Stripe –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ–ø–ª–∞—Ç—ã: {stripe_active}")
                    
                    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞
                    if not stripe_active and payment_input != "1":
                        # –ï—Å–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Stripe –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ "1" (–∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∏)
                        self.safe_send_message(
                            chat_id,
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã, –æ—Ç–ø—Ä–∞–≤–∏–≤ –Ω–æ–º–µ—Ä 1"
                        )
                        return
                    elif stripe_active and payment_input not in ["1", "2"]:
                        # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –æ–±–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
                        self.safe_send_message(
                            chat_id,
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã, –æ—Ç–ø—Ä–∞–≤–∏–≤ –Ω–æ–º–µ—Ä (1 –∏–ª–∏ 2)"
                        )
                        return
                    
                    # –ï—Å–ª–∏ –≤–≤–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
                    self.user_data[chat_id]['waiting_for_payment_method'] = False
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
                    payment_method = "crypto" if payment_input == "1" else "card"
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
                self.user_data[chat_id]['selected_payment_method'] = payment_method
                
                # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–∞–∫–µ—Ç–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –∫—Ä–∏–ø—Ç—ã
                if payment_method == "crypto":
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤—ã–±—Ä–∞–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã")
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞
                    self.user_data[chat_id]['waiting_for_package_selection'] = True
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
                    self.safe_send_message(
                        chat_id,
                        PREMIUM_MESSAGES["buy_credits_crypto"],
                        parse_mode="Markdown"
                    )
                    return
                    
                # –ï—Å–ª–∏ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç, —Å–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
                selected_package = self.user_data[chat_id].get('selected_package')
                if selected_package:
                    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –Ω–∞–ø—Ä—è–º—É—é
                    logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} —É–∂–µ –≤—ã–±—Ä–∞–Ω –ø–∞–∫–µ—Ç {selected_package.get('id')}, —Å–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂")
                    self._create_payment(chat_id, payment_method)
                else:
                    # –ï—Å–ª–∏ –ø–∞–∫–µ—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–∞–∫–µ—Ç–∞
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤—ã–±—Ä–∞–ª —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã {payment_method}, –Ω–æ –ø–∞–∫–µ—Ç –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω")
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞
                    self.user_data[chat_id]['waiting_for_package_selection'] = True
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø–∞–∫–µ—Ç–æ–≤
                    message_key = "buy_credits"  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –∫–∞—Ä—Ç
                    if payment_method == "crypto":
                        message_key = "buy_credits_crypto"  # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
                    
                    # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    logger.info(f"–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id} —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è {payment_method}, –∫–ª—é—á: {message_key}")
                    
                    self.safe_send_message(
                        chat_id,
                        PREMIUM_MESSAGES[message_key],
                        parse_mode="Markdown"
                    )
                
                return
                
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑ –≤—Ç–æ—Ä–æ–≥–æ –º–µ—Ç–æ–¥–∞ handle_message
            elif self.user_data[chat_id].get('waiting_for_style_choice') == True:
                if hasattr(message, 'text') and message.text:
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (chat_id: {chat_id}) –≤—ã–±–∏—Ä–∞–µ—Ç —Ä–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞, –≤–≤–æ–¥: {message.text}")
                # –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤ change_background_command
                self.change_background_command(message)
                return
                
            elif self.user_data[chat_id].get('waiting_for_text_prompt'):
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (chat_id: {chat_id}) –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
                self.generate_from_text_command(message)
                return
                
            elif self.user_data[chat_id].get('waiting_for_replace_prompt'):
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –≤–≤–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å
                current_feature = self.user_data[chat_id].get('current_feature')
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                if hasattr(message, 'text') and message.text:
                    user_text = message.text
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (chat_id: {chat_id}) –≤–≤–æ–¥–∏—Ç –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ {current_feature}: {user_text}")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    self.user_data[chat_id]['replace_prompt'] = user_text
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
                    logger.info(f"–ó–∞–ø—É—Å–∫–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {user_text} –∏ —Ñ—É–Ω–∫—Ü–∏–∏ {current_feature}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é user_text, –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ –±–ª–æ–∫–µ –≤—ã—à–µ
                if 'replace_prompt' in self.user_data[chat_id]:
                    user_text = self.user_data[chat_id]['replace_prompt']
                    self.process_photo_for_ai_replace(message, text_prompt=user_text)
                return
                
            elif self.user_data[chat_id].get('waiting_for_background_prompt'):
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ñ–æ–Ω–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (chat_id: {chat_id}) –≤–≤–æ–¥–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ–Ω–∞")
                self.change_background_command(message)
                return
                
            elif self.user_data[chat_id].get('waiting_for_hairstyle_selection'):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—á–µ—Å–∫–∏
                self.apply_selected_hairstyle(message)
                return
                
            elif self.user_data[chat_id].get('customization_state'):
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏—á–µ—Å–∫–∏
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (chat_id: {chat_id}) –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–∏—á–µ—Å–∫—É, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {self.user_data[chat_id].get('customization_state')}")
                self.apply_selected_hairstyle(message)
                return
                
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ —Ü–∏—Ñ—Ä–∞–º (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –æ—Å–æ–±—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö –∏ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –≤–≤–æ–¥)
        if hasattr(message, 'text') and message.text:
            msg_text = message.text
            
            # –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–æ–±—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
            if chat_id in self.user_data:
                # –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–ø–ª–∞—Ç—ã
                if self.user_data[chat_id].get('waiting_for_payment_method'):
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã, –¥–µ–ª–µ–≥–∏—Ä—É–µ–º handle_payment_method_selection")
                    self.handle_payment_method_selection(message)
                    return
                elif self.user_data[chat_id].get('waiting_for_package_selection'):
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤, –¥–µ–ª–µ–≥–∏—Ä—É–µ–º handle_package_selection")
                    self.handle_package_selection(message)
                    return
                
                # –í—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∂–¥–µ—Ç –≤–≤–æ–¥–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π LightX
                elif self.user_data[chat_id].get('waiting_for_text_prompt'):
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ 7, –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –≤ generate_from_text_command")
                    self.generate_from_text_command(message)
                    return
                elif self.user_data[chat_id].get('waiting_for_replace_prompt'):
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –≤–≤–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ 6, –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –≤ ai_replace_command")
                    self.ai_replace_command(message)
                    return
                elif self.user_data[chat_id].get('waiting_for_background_prompt'):
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –≤—ã–±–æ—Ä–∞ —Ñ–æ–Ω–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ 5, –≤—ã–∑—ã–≤–∞–µ–º change_background_command")
                    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ü–≤–µ—Ç–∞
                    self.change_background_command(message)
                    return
                elif self.user_data[chat_id].get('waiting_for_style_choice'):
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ 5, –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –≤ change_background_command")
                    self.change_background_command(message)
                    return
            
            # –ï—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï –≤ —Ä–µ–∂–∏–º–µ –æ–ø–ª–∞—Ç—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –≤—ã–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–∏
            if msg_text == "1":
                # –û–ø—Ü–∏—è 1 - –ø—Ä–∏–º–µ—Ä–∫–∞ –ø—Ä–∏—á–µ—Å–∫–∏
                self.try_hairstyle_command(message)
                return
            elif msg_text == "2":
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞
                self.faceshape_command(message)
                return
            elif msg_text == "3":
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫–∞–∫ —Å–∏–º–º–µ—Ç—Ä–∏—é (3), –Ω–æ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å—Ä–∞–∑—É
                # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∂–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
                if chat_id not in self.user_data:
                    self.user_data[chat_id] = {}
                
                # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–π
                self.user_data[chat_id]['current_feature'] = "3"
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∏–º–º–µ—Ç—Ä–∏–∏
                symmetry_info = [
                    "üîç **–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–º–µ—Ç—Ä–∏–∏ –ª–∏—Ü–∞**",
                    "",
                    "–≠—Ç–æ—Ç —ç—Ñ—Ñ–µ–∫—Ç, –ø–æ—Ö–æ–∂–∏–π –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ TikTok, –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–≤–∏–¥–µ—Ç—å, –∫–∞–∫ –±—ã –≤—ã–≥–ª—è–¥–µ–ª–æ –≤–∞—à–µ –ª–∏—Ü–æ, –µ—Å–ª–∏ –±—ã –±—ã–ª–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–º.",
                    "",
                    "–Ø —Å–æ–∑–¥–∞–º 3 –≤–µ—Ä—Å–∏–∏ –≤–∞—à–µ–≥–æ –ª–∏—Ü–∞:",
                    "‚Ä¢ –û—Ä–∏–≥–∏–Ω–∞–ª (–∫–∞–∫ –≤—ã –≤—ã–≥–ª—è–¥–∏—Ç–µ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ)",
                    "‚Ä¢ –õ–µ–≤–∞—è —Å–∏–º–º–µ—Ç—Ä–∏—è (–ª–∏—Ü–æ, —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –∏–∑ –ª–µ–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω—ã)",
                    "‚Ä¢ –ü—Ä–∞–≤–∞—è —Å–∏–º–º–µ—Ç—Ä–∏—è (–ª–∏—Ü–æ, —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –∏–∑ –ø—Ä–∞–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω—ã)",
                    "",
                    "üì∏ **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ç–æ:**",
                    "‚Ä¢ –ß—ë—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ–≥–æ –ª–∏—Ü–∞",
                    "‚Ä¢ –ü—Ä—è–º–æ–π —Ä–∞–∫—É—Ä—Å –±–µ–∑ –Ω–∞–∫–ª–æ–Ω–∞ –≥–æ–ª–æ–≤—ã",
                    "‚Ä¢ –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞",
                    "‚Ä¢ –•–æ—Ä–æ—à–µ–µ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ",
                    "",
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
                ]
                
                self.bot.send_message(chat_id, "\n".join(symmetry_info))
                return
            elif msg_text == "4":
                # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                self.beauty_command(message)
                return
            elif msg_text in ["5", "6", "7"]:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–π LightX API
                # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LightX, –µ—Å–ª–∏ –æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                if not hasattr(self, 'lightx_available') or not self.lightx_available:
                    logger.info("LightX –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –º–µ–Ω—é, –ø—ã—Ç–∞–µ–º—Å—è —Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å...")
                    try:
                        # –ü—Ä–æ–±—É–µ–º –∑–∞–Ω–æ–≤–æ —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç LightX
                        if not hasattr(self, 'lightx_client') or self.lightx_client is None:
                            self.lightx_client = LightXClient()
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á
                        test_result = self.lightx_client.key_manager.test_current_key()
                        if test_result:
                            self.lightx_available = True
                            logger.info("LightX API —É—Å–ø–µ—à–Ω–æ —Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –º–µ–Ω—é!")
                        else:
                            self.lightx_available = False
                            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å LightX API –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –º–µ–Ω—é - —Ç–µ—Å—Ç –∫–ª—é—á–∞ –Ω–µ –ø—Ä–æ—à–µ–ª")
                    except Exception as e:
                        self.lightx_available = False
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LightX API –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –º–µ–Ω—é: {e}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LightX API –ø–æ—Å–ª–µ —Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ LightX API –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –º–µ–Ω—é: lightx_available={self.lightx_available}")
                if not hasattr(self, 'lightx_available') or not self.lightx_available:
                    error_message = [
                        "‚ö†Ô∏è **–§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞**",
                        "",
                        "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ñ—É–Ω–∫—Ü–∏–∏ LightX API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.",
                        "–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º API-–∫–ª—é—á–∞ –∏–ª–∏ —Å –æ—à–∏–±–∫–æ–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–∏—Å—É.",
                        "",
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ."
                    ]
                    self.bot.send_message(chat_id, "\n".join(error_message))
                    return
                    
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                lightx_features = {
                    "5": ("–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞", self.change_background_command), 
                    "6": ("–ó–∞–º–µ–Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤", self.ai_replace_command),
                    "7": ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É", self.generate_from_text_command)
                }
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if chat_id not in self.user_data:
                    self.user_data[chat_id] = {}
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø—Ä–∏—á–µ—Å–∫–æ–π
                if 'waiting_for_hairstyle_selection' in self.user_data[chat_id]:
                    self.user_data[chat_id]['waiting_for_hairstyle_selection'] = False
                if 'customization_state' in self.user_data[chat_id]:
                    self.user_data[chat_id].pop('customization_state', None)
                    
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
                self._reset_all_waiting_states(chat_id)
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                self.user_data[chat_id]['current_feature'] = msg_text
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é
                feature_name, feature_function = lightx_features[msg_text]
                
                logger.info(f"–í—ã–±—Ä–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è {feature_name} (–Ω–æ–º–µ—Ä {msg_text}) –¥–ª—è chat_id {chat_id}")
                
                # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ —Ç–µ–∫—Å—Ç—É (7) –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ
                if msg_text == "7":
                    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ —Ç–µ–∫—Å—Ç—É –Ω–∞–ø—Ä—è–º—É—é
                    feature_function(message)
                # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ
                elif 'image_data' in self.user_data[chat_id]:
                    # –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    feature_function(message)
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–æ—Ç–æ, –ø—Ä–æ—Å–∏–º –∑–∞–≥—Ä—É–∑–∏—Ç—å (–¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π 5 –∏ 6)
                    feature_info = [
                        f"üé® **{feature_name}**",
                        "",
                        "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.",
                        "",
                        "üì∏ **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ç–æ:**",
                        "‚Ä¢ –ß–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                        "‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ",
                        "‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ñ–æ–Ω (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)", 
                        "‚Ä¢ –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ –≤—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ",
                        "",
                        "–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ, —è —Å–æ–æ–±—â—É –≤–∞–º, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."
                    ]
                    
                    self.bot.send_message(chat_id, "\n".join(feature_info))
                return
            
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∫–∞–∫ –≤—ã–±–æ—Ä –∏–∑ –º–µ–Ω—é –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        self.safe_send_message(
            chat_id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –î–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ /menu"
        )
        
    def safe_send_message(self, chat_id, text, parse_mode=None, reply_markup=None):
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        
        Args:
            chat_id (int): ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            text (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode (str, optional): –†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
            reply_markup (object, optional): –†–∞–∑–º–µ—Ç–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            self.bot.send_message(
                chat_id,
                text,
                parse_mode=parse_mode,
                reply_markup=reply_markup
            )
            return True
        except Exception as e:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
            if self.test_mode:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
                return True  # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
                return False
        
    def handle_successful_payment(self, chat_id, payment_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤"""
        try:
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫—É—é –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ —Ñ–æ—Ä–º–∞—Ç—É ID –ø–ª–∞—Ç–µ–∂–∞
            if payment_id.startswith("TEST_") or payment_id.startswith("CP_"):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É CryptoPayment
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id}")
                payment_status = self.crypto_payment.check_payment_status(payment_id)
                success_status = "completed"
                payment_data = None  # –í —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –º–µ—Ç–æ–¥–∞ get_payment_data
            elif payment_id.startswith("cs_") or payment_id.startswith("pi_"):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º Stripe –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º Stripe –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id}")
                try:
                    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥
                    payment_status = self.stripe_payment.check_payment_status(payment_id)
                    
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å, –ø—Ä–æ–±—É–µ–º –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ API
                    if payment_status is None:
                        logger.info(f"–ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å Stripe –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ API")
                        import stripe
                        session = stripe.checkout.Session.retrieve(payment_id)
                        if session and session.payment_status == "paid":
                            payment_status = "completed"
                        else:
                            payment_status = "pending"
                        logger.info(f"–°—Ç–∞—Ç—É—Å Stripe –Ω–∞–ø—Ä—è–º—É—é: {payment_status}")
                    
                    success_status = "completed"  # –°—Ç–∞—Ç—É—Å "paid" –≤ Stripe API
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ
                    try:
                        payment_data = self.stripe_payment.get_payment_data(payment_id)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞ Stripe: {e}")
                        payment_data = None
                        
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ Stripe: {payment_data}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Stripe –ø–ª–∞—Ç–µ–∂–∞: {e}")
                    payment_status = "error"
                    payment_data = None
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É CryptoBotPayment
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º Crypto Bot –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id}")
                payment_status = self.payment_module.check_payment_status(payment_id)
                success_status = "paid"
                # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ
                payment_data = self.payment_module.get_payment_data(payment_id)
            
            logger.info(f"–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {payment_status}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            if payment_status == "error":
                # –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
                error_message = self.payment_module.handle_payment_error(chat_id, "payment_error")
                self.safe_send_message(chat_id, error_message, parse_mode="Markdown")
                return False
                
            if payment_status != success_status:
                # –ü–ª–∞—Ç–µ–∂ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                if payment_status == "expired":
                    self.safe_send_message(
                        chat_id,
                        "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—á–µ—Ç–∞ –∏—Å—Ç–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂.",
                        parse_mode="Markdown"
                    )
                    return False
                elif payment_status == "canceled":
                    self.safe_send_message(
                        chat_id,
                        "–ü–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.",
                        parse_mode="Markdown"
                    )
                    return False
                else:
                    expected_status = success_status if 'success_status' in locals() else "completed"
                    self.safe_send_message(
                        chat_id,
                        f"–ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω (—Å—Ç–∞—Ç—É—Å: {payment_status}, –æ–∂–∏–¥–∞–µ—Ç—Å—è: {expected_status}). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                        parse_mode="Markdown"
                    )
                    return False
            
            # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            session = Session()
            
            try:
                # –ù–∞—Ö–æ–¥–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ payment_id
                transaction = session.query(Transaction).filter_by(payment_id=payment_id).first()
                
                if transaction:
                    # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—ë —Å—Ç–∞—Ç—É—Å
                    if transaction.status == 'completed':
                        # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        credits = get_user_credits(chat_id)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                        try:
                            self.safe_send_message(
                                chat_id,
                                PREMIUM_MESSAGES["payment_already_processed"].format(
                                    credits=transaction.credits,
                                    total_credits=credits
                                ),
                                parse_mode="Markdown"
                            )
                        except Exception as e:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
                            # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ —É—Å–ø–µ—à–Ω—ã–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                        return True
                    elif transaction.status == 'pending':
                        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã
                        if complete_transaction(payment_id, 'completed'):
                            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤
                            credits = get_user_credits(chat_id)
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–µ
                            try:
                                self.safe_send_message(
                                    chat_id,
                                    PREMIUM_MESSAGES["payment_success"].format(
                                        credits=transaction.credits,
                                        total_credits=credits
                                    ),
                                    parse_mode="Markdown"
                                )
                            except Exception as e:
                                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
                                # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ —É—Å–ø–µ—à–Ω—ã–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                            return True
                        else:
                            # –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                            self.bot.send_message(
                                chat_id,
                                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                                parse_mode="Markdown"
                            )
                    else:
                        # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ
                        logger.error(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {transaction.id} –≤ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ: {transaction.status}")
                        self.bot.send_message(
                            chat_id,
                            "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                            parse_mode="Markdown"
                        )
                else:
                    # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    logger.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é")
                    
                    # –í—ã–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
                    if payment_data:
                        # –î–∞–Ω–Ω—ã–µ –∏–∑ –Ω–æ–≤–æ–≥–æ API Crypto Bot
                        package_id = payment_data.get("package_id")
                        amount = float(payment_data.get("amount", 0))
                    else:
                        # –î–ª—è —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã –∏–ª–∏ –µ—Å–ª–∏ get_payment_data –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ
                        if not payment_id.startswith("TEST_") and not payment_id.startswith("CP_"):
                            # –î–ª—è Crypto Bot –ø–æ–ª—É—á–∞–µ–º –∏–Ω–≤–æ–π—Å –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                            invoice = self.payment_module.get_invoice(payment_id)
                            if not invoice:
                                self.bot.send_message(
                                    chat_id,
                                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                                    parse_mode="Markdown"
                                )
                                return False
                                
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                            metadata = {}
                            payload = invoice.get("payload", "")
                            hidden_message = invoice.get("hidden_message", "")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º payload (API 1.0)
                            if payload:
                                for item in payload.split(","):
                                    if ":" in item:
                                        key, value = item.split(":", 1)
                                        metadata[key] = value
                            
                            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ payload, –ø—Ä–æ–≤–µ—Ä—è–µ–º hidden_message (API 0.x)
                            elif hidden_message:
                                for item in hidden_message.split(","):
                                    if ":" in item:
                                        key, value = item.split(":", 1)
                                        metadata[key] = value
                                        
                            package_id = metadata.get("package_id")
                            amount = float(invoice.get("amount", 0))
                        else:
                            # –î–ª—è —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã CryptoPayment –Ω–µ—Ç —Ö–æ—Ä–æ—à–µ–≥–æ —Å–ø–æ—Å–æ–±–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                            self.bot.send_message(
                                chat_id,
                                "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                                parse_mode="Markdown"
                            )
                            return False
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ ID –ø–∞–∫–µ—Ç–∞
                    credits = self.payment_module.get_credits_by_package_id(package_id)
                    
                    if credits > 0:
                        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                        transaction = create_transaction(
                            telegram_id=chat_id,
                            amount=amount,
                            credits=credits,
                            payment_id=payment_id
                        )
                        
                        if complete_transaction(payment_id, 'completed'):
                            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤
                            total_credits = get_user_credits(chat_id)
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–µ
                            try:
                                self.bot.send_message(
                                    chat_id,
                                    PREMIUM_MESSAGES["payment_success"].format(
                                        credits=credits,
                                        total_credits=total_credits
                                    ),
                                    parse_mode="Markdown"
                                )
                            except Exception as e:
                                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")
                                # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ —É—Å–ø–µ—à–Ω—ã–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                            return True
                        else:
                            # –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                            self.bot.send_message(
                                chat_id,
                                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                                parse_mode="Markdown"
                            )
                    else:
                        # –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤
                        self.bot.send_message(
                            chat_id,
                            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–∞–∫–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                            parse_mode="Markdown"
                        )
            finally:
                session.close()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}")
            self.bot.send_message(
                chat_id,
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                parse_mode="Markdown"
            )
        
        return False
        
    def faceshape_command(self, message):
        """Handle the face shape analysis command."""
        chat_id = message.chat.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
        if chat_id not in self.user_data:
            self.user_data[chat_id] = {}
            
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫–∞–∫ –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞ (2)
        self.user_data[chat_id]['current_feature'] = "2"
            
        # –í—Å–µ–≥–¥–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –∞–Ω–∞–ª–∏–∑–∞ (—Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ)
        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è 2 (–∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –º–µ—Ç–æ–¥–∞ –∞–Ω–∞–ª–∏–∑–∞
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        photo_button = telebot.types.KeyboardButton('üì∏ –ê–Ω–∞–ª–∏–∑ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏')
        video_button = telebot.types.KeyboardButton('üìπ –ê–Ω–∞–ª–∏–∑ –ø–æ –≤–∏–¥–µ–æ')
        markup.add(photo_button, video_button)
        
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ñ–æ—Ä–º–µ –ª–∏—Ü–∞, –≤–∫–ª—é—á–∞–µ–º —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if 'face_shape' in self.user_data[chat_id]:
            face_shape = self.user_data[chat_id]['face_shape']
            face_shape_description = FACE_SHAPE_CRITERIA[face_shape]["description"]
            
            instructions = [
                "üë§ **–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞**",
                "",
                f"üìä –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: {face_shape_description}",
                "",
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞:",
                "",
                "üì∏ **–ê–Ω–∞–ª–∏–∑ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏** - –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–¥–Ω–∞ —Ö–æ—Ä–æ—à–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è",
                "üìπ **–ê–Ω–∞–ª–∏–∑ –ø–æ –≤–∏–¥–µ–æ** - –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º—É –ª–∏—Ü–∞ –≤ –¥–≤–∏–∂–µ–Ω–∏–∏"
            ]
        else:
            instructions = [
                "üë§ **–ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞**",
                "",
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞:",
                "",
                "üì∏ **–ê–Ω–∞–ª–∏–∑ –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏** - –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ–¥–Ω–∞ —Ö–æ—Ä–æ—à–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è",
                "üìπ **–ê–Ω–∞–ª–∏–∑ –ø–æ –≤–∏–¥–µ–æ** - –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º—É –ª–∏—Ü–∞ –≤ –¥–≤–∏–∂–µ–Ω–∏–∏"
            ]
        
        self.bot.send_message(chat_id, "\n".join(instructions), reply_markup=markup, parse_mode="Markdown")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–æ–±–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞
        self.user_data[chat_id]['awaiting_analysis_method'] = True
            
    def symmetry_command(self, message):
        """Handle the face symmetry check command (similar to TikTok effect)."""
        chat_id = message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∑–≤–∞–Ω–∞ –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–∞ –Ω–µ –∏–∑ process_photo)
        is_direct_call = 'current_feature' not in self.user_data.get(chat_id, {}) or self.user_data[chat_id].get('current_feature') != "3" or 'image_data' not in self.user_data.get(chat_id, {})
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –∏–∑ process_photo), –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É
        if is_direct_call:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫–∞–∫ —Å–∏–º–º–µ—Ç—Ä–∏—é (3)
            if chat_id not in self.user_data:
                self.user_data[chat_id] = {}
                
            # –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏
            if 'image_data' in self.user_data[chat_id]:
                logger.info(f"–°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –ø—Ä–∏ –≤—ã–∑–æ–≤–µ symmetry_command")
                self.user_data[chat_id].pop('image_data', None)
    
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
            self._reset_all_waiting_states(chat_id)
                
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ç–µ–∫—É—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ –∞–Ω–∞–ª–∏–∑ —Å–∏–º–º–µ—Ç—Ä–∏–∏
            self.user_data[chat_id]['current_feature'] = "3"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∏–º–º–µ—Ç—Ä–∏–∏
            symmetry_info = [
                "üîç **–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–º–µ—Ç—Ä–∏–∏ –ª–∏—Ü–∞**",
                "",
                "–≠—Ç–æ—Ç —ç—Ñ—Ñ–µ–∫—Ç, –ø–æ—Ö–æ–∂–∏–π –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ TikTok, –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–≤–∏–¥–µ—Ç—å, –∫–∞–∫ –±—ã –≤—ã–≥–ª—è–¥–µ–ª–æ –≤–∞—à–µ –ª–∏—Ü–æ, –µ—Å–ª–∏ –±—ã –±—ã–ª–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–º.",
                "",
                "–Ø —Å–æ–∑–¥–∞–º 3 –≤–µ—Ä—Å–∏–∏ –≤–∞—à–µ–≥–æ –ª–∏—Ü–∞:",
                "‚Ä¢ –û—Ä–∏–≥–∏–Ω–∞–ª (–∫–∞–∫ –≤—ã –≤—ã–≥–ª—è–¥–∏—Ç–µ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ)",
                "‚Ä¢ –õ–µ–≤–∞—è —Å–∏–º–º–µ—Ç—Ä–∏—è (–ª–∏—Ü–æ, —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –∏–∑ –ª–µ–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω—ã)",
                "‚Ä¢ –ü—Ä–∞–≤–∞—è —Å–∏–º–º–µ—Ç—Ä–∏—è (–ª–∏—Ü–æ, —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –∏–∑ –ø—Ä–∞–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω—ã)",
                "",
                "üì∏ **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ç–æ:**",
                "‚Ä¢ –ß—ë—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ–≥–æ –ª–∏—Ü–∞",
                "‚Ä¢ –ü—Ä—è–º–æ–π —Ä–∞–∫—É—Ä—Å –±–µ–∑ –Ω–∞–∫–ª–æ–Ω–∞ –≥–æ–ª–æ–≤—ã",
                "‚Ä¢ –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞",
                "‚Ä¢ –•–æ—Ä–æ—à–µ–µ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ",
                "",
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
            ]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
            self.bot.send_message(chat_id, "\n".join(symmetry_info))
            return
        
        # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –∏–∑ process_photo
        if chat_id in self.user_data and 'image_data' in self.user_data[chat_id]:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
            self.bot.send_message(chat_id, "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–∏–º–º–µ—Ç—Ä–∏—é –≤–∞—à–µ–≥–æ –ª–∏—Ü–∞... –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
            
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ñ–æ—Ç–æ
                image_data = self.user_data[chat_id]['image_data']
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç, —Å –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å
                nparr = np.frombuffer(image_data, np.uint8)
                image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º MediaPipe –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–∏—Ü–∞ –∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤
                with self.face_analyzer.mp_face_mesh.FaceMesh(
                    static_image_mode=True,
                    max_num_faces=1,
                    min_detection_confidence=0.5) as face_mesh:
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ RGB –¥–ª—è MediaPipe
                    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
                    height, width, _ = image.shape
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ª–∏—Ü–∞
                    results = face_mesh.process(image_rgb)
                    
                    if not results.multi_face_landmarks:
                        self.bot.send_message(chat_id, BOT_MESSAGES["no_face"])
                        return
                    
                    face_landmarks = results.multi_face_landmarks[0]
                    
                    # –ù–∞—Ö–æ–¥–∏–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –ª–∏—Ü–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ—Å –∫–∞–∫ –æ—Ä–∏–µ–Ω—Ç–∏—Ä)
                    nose_tip = face_landmarks.landmark[4]  # MediaPipe –∏–Ω–¥–µ–∫—Å –¥–ª—è –∫–æ–Ω—á–∏–∫–∞ –Ω–æ—Å–∞
                    center_x = int(nose_tip.x * width)
                    
                    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ü–µ–Ω—Ç—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    center_x = max(1, min(center_x, width-1))
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã
                    left_half = image.copy()
                    right_half = image.copy()
                    
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç—Ä–∞–∂–µ–Ω–∏—è
                    # –õ–µ–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ (–æ—Ç—Ä–∞–∂–∞–µ–º –ø—Ä–∞–≤—É—é —á–∞—Å—Ç—å –Ω–∞ –º–µ—Å—Ç–æ –ª–µ–≤–æ–π)
                    left_size = center_x
                    right_size = width - center_x
                    
                    # –°–æ–∑–¥–∞–µ–º –ª–µ–≤—É—é —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—É—é –≤–µ—Ä—Å–∏—é (–ª–µ–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ –ª–∏—Ü–∞)
                    # –°–Ω–∞—á–∞–ª–∞ –±–µ—Ä–µ–º –ª–µ–≤—É—é –ø–æ–ª–æ–≤–∏–Ω—É –ª–∏—Ü–∞
                    left_side = left_half[:, 0:center_x, :]
                    # –û—Ç—Ä–∞–∂–∞–µ–º –ª–µ–≤—É—é –ø–æ–ª–æ–≤–∏–Ω—É –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
                    flipped_left = cv2.flip(left_side, 1)
                    # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –æ—Ç—Ä–∞–∂–µ–Ω–Ω–æ–π —á–∞—Å—Ç–∏ –¥–ª—è –ø—Ä–∞–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
                    if right_size > 0:
                        flipped_left_resized = cv2.resize(flipped_left, (right_size, height))
                        # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–∞–≤—É—é —á–∞—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Ç—Ä–∞–∂–µ–Ω–Ω—É—é –ª–µ–≤—É—é
                        left_half[:, center_x:width, :] = flipped_left_resized
                    
                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤—É—é —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—É—é –≤–µ—Ä—Å–∏—é (–ø—Ä–∞–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ –ª–∏—Ü–∞)
                    # –°–Ω–∞—á–∞–ª–∞ –±–µ—Ä–µ–º –ø—Ä–∞–≤—É—é –ø–æ–ª–æ–≤–∏–Ω—É –ª–∏—Ü–∞
                    right_side = right_half[:, center_x:width, :]
                    # –û—Ç—Ä–∞–∂–∞–µ–º –ø—Ä–∞–≤—É—é –ø–æ–ª–æ–≤–∏–Ω—É –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
                    flipped_right = cv2.flip(right_side, 1)
                    # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –æ—Ç—Ä–∞–∂–µ–Ω–Ω–æ–π —á–∞—Å—Ç–∏ –¥–ª—è –ª–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
                    if left_size > 0:
                        flipped_right_resized = cv2.resize(flipped_right, (left_size, height))
                        # –ó–∞–º–µ–Ω—è–µ–º –ª–µ–≤—É—é —á–∞—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Ç—Ä–∞–∂–µ–Ω–Ω—É—é –ø—Ä–∞–≤—É—é
                        right_half[:, 0:center_x, :] = flipped_right_resized
                    
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç—Ä–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ–¥–Ω–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                    # –ü–æ —Ü–µ–Ω—Ç—Ä—É - –æ—Ä–∏–≥–∏–Ω–∞–ª, —Å–ª–µ–≤–∞ - –ª–µ–≤–∞—è —Å–∏–º–º–µ—Ç—Ä–∏—è, —Å–ø—Ä–∞–≤–∞ - –ø—Ä–∞–≤–∞—è —Å–∏–º–º–µ—Ç—Ä–∏—è
                    combined_width = width * 3
                    combined_image = np.zeros((height, combined_width, 3), dtype=np.uint8)
                    
                    # –†–∞–∑–º–µ—â–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    combined_image[:, 0:width, :] = left_half
                    combined_image[:, width:width*2, :] = image
                    combined_image[:, width*2:width*3, :] = right_half
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
                    cv2.line(combined_image, (width, 0), (width, height), (255, 255, 255), 2)
                    cv2.line(combined_image, (width*2, 0), (width*2, height), (255, 255, 255), 2)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –∫ –∫–∞–∂–¥–æ–π –≤–µ—Ä—Å–∏–∏ –ª–∏—Ü–∞
                    font = cv2.FONT_HERSHEY_SIMPLEX
                    font_scale = 0.7
                    cv2.putText(combined_image, "–õ–µ–≤–∞—è —Å–∏–º–º–µ—Ç—Ä–∏—è", (10, 30), font, font_scale, (255, 255, 255), 2)
                    cv2.putText(combined_image, "–û—Ä–∏–≥–∏–Ω–∞–ª", (width + 10, 30), font, font_scale, (255, 255, 255), 2)
                    cv2.putText(combined_image, "–ü—Ä–∞–≤–∞—è —Å–∏–º–º–µ—Ç—Ä–∏—è", (width*2 + 10, 30), font, font_scale, (255, 255, 255), 2)
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–µ–ø–µ–Ω—å —Å–∏–º–º–µ—Ç—Ä–∏–∏ –ª–∏—Ü–∞
                    # –ß–µ–º –±–æ–ª—å—à–µ —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É –ª–µ–≤–æ–π –∏ –ø—Ä–∞–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–∞–º–∏, —Ç–µ–º –Ω–∏–∂–µ —Å–∏–º–º–µ—Ç—Ä–∏—è
                    # –î–ª—è —ç—Ç–æ–≥–æ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ª–µ–≤—É—é –ø–æ–ª–æ–≤–∏–Ω—É —Å –æ—Ç—Ä–∞–∂–µ–Ω–Ω–æ–π –ø—Ä–∞–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–æ–π
                    left_region = image[:, 0:center_x, :]
                    right_region_flipped = cv2.flip(image[:, center_x:width, :], 1)
                    
                    # –û–±—Ä–µ–∑–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                    if left_region.shape[1] > 0 and right_region_flipped.shape[1] > 0:
                        min_width = min(left_region.shape[1], right_region_flipped.shape[1])
                        left_region = left_region[:, 0:min_width, :]
                        right_region_flipped = right_region_flipped[:, 0:min_width, :]
                        
                        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω—É—é –æ—à–∏–±–∫—É (MSE) –º–µ–∂–¥—É –ø–æ–ª–æ–≤–∏–Ω–∞–º–∏
                        diff = cv2.absdiff(left_region, right_region_flipped)
                        diff_sq = diff ** 2
                        mse = np.mean(diff_sq)
                    else:
                        # –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –∫–∞–∫–∞—è-—Ç–æ –∏–∑ –ø–æ–ª–æ–≤–∏–Ω –∏–º–µ–µ—Ç –Ω—É–ª–µ–≤—É—é —à–∏—Ä–∏–Ω—É
                        mse = 5000  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–∏–∑–∫–æ–π —Å–∏–º–º–µ—Ç—Ä–∏–∏
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º MSE –≤ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∏–º–º–µ—Ç—Ä–∏–∏ (100% - –∏–¥–µ–∞–ª—å–Ω–∞—è —Å–∏–º–º–µ—Ç—Ä–∏—è)
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–≥–ª—è–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    symmetry_score = 100 * np.exp(-mse / 10000)
                    symmetry_score = max(0, min(100, symmetry_score))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-100
                    
                    # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–º–º–µ—Ç—Ä–∏–∏
                    if symmetry_score >= 80:
                        symmetry_result = "–£ –≤–∞—Å –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è —Å–∏–º–º–µ—Ç—Ä–∏—è –ª–∏—Ü–∞! –í–∞—à–µ –ª–∏—Ü–æ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∏–¥–µ–∞–ª—å–Ω–æ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ."
                    elif symmetry_score >= 60:
                        symmetry_result = "–£ –≤–∞—Å —Ö–æ—Ä–æ—à–∞—è —Å–∏–º–º–µ—Ç—Ä–∏—è –ª–∏—Ü–∞. –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —á–µ—Ä—Ç –ª–∏—Ü–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ."
                    elif symmetry_score >= 40:
                        symmetry_result = "–£ –≤–∞—Å —Å—Ä–µ–¥–Ω—è—è —Å–∏–º–º–µ—Ç—Ä–∏—è –ª–∏—Ü–∞. –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ª—é–¥–µ–π –∏–º–µ—é—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∞—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–µ —á–µ—Ä—Ç—ã."
                    else:
                        symmetry_result = "–£ –≤–∞—Å –∑–∞–º–µ—Ç–Ω–∞ –∞—Å–∏–º–º–µ—Ç—Ä–∏—è –ª–∏—Ü–∞. –≠—Ç–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –∏ –¥–∞–∂–µ –ø—Ä–∏–¥–∞–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç—å!"
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ –±–∞–π—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                    _, buffer = cv2.imencode('.jpg', combined_image)
                    image_bytes = buffer.tobytes()
                    
                    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç BytesIO –∏–∑ –±–∞–π—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    image_io = io.BytesIO(image_bytes)
                    image_io.name = 'symmetry_analysis.jpg'
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                    formatted_result = BOT_MESSAGES["symmetry_analysis"].format(
                        symmetry_score=symmetry_score,
                        symmetry_result=symmetry_result
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
                    self.bot.send_photo(
                        chat_id,
                        image_io,
                        caption=formatted_result
                    )
                    
                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Ç–µ–∫—É—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                    if chat_id in self.user_data:
                        self.user_data[chat_id]['current_feature'] = None
                    
            except Exception as e:
                logger.error(f"Error in symmetry analysis: {e}")
                self.bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–∏–º–º–µ—Ç—Ä–∏–∏ –ª–∏—Ü–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        else:
            # –ù–µ—Ç —Ñ–æ—Ç–æ, –ø—Ä–æ—Å–∏–º –∑–∞–≥—Ä—É–∑–∏—Ç—å
            symmetry_info = [
                "üîç **–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–º–µ—Ç—Ä–∏–∏ –ª–∏—Ü–∞**",
                "",
                "–≠—Ç–æ—Ç —ç—Ñ—Ñ–µ–∫—Ç, –ø–æ—Ö–æ–∂–∏–π –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ TikTok, –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–≤–∏–¥–µ—Ç—å, –∫–∞–∫ –±—ã –≤—ã–≥–ª—è–¥–µ–ª–æ –≤–∞—à–µ –ª–∏—Ü–æ, –µ—Å–ª–∏ –±—ã –±—ã–ª–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–º.",
                "",
                "–Ø —Å–æ–∑–¥–∞–º 3 –≤–µ—Ä—Å–∏–∏ –≤–∞—à–µ–≥–æ –ª–∏—Ü–∞:",
                "‚Ä¢ –û—Ä–∏–≥–∏–Ω–∞–ª (–∫–∞–∫ –≤—ã –≤—ã–≥–ª—è–¥–∏—Ç–µ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ)",
                "‚Ä¢ –õ–µ–≤–∞—è —Å–∏–º–º–µ—Ç—Ä–∏—è (–ª–∏—Ü–æ, —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –∏–∑ –ª–µ–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω—ã)",
                "‚Ä¢ –ü—Ä–∞–≤–∞—è —Å–∏–º–º–µ—Ç—Ä–∏—è (–ª–∏—Ü–æ, —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –∏–∑ –ø—Ä–∞–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω—ã)",
                "",
                "üì∏ **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ç–æ:**",
                "‚Ä¢ –ß—ë—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ–≥–æ –ª–∏—Ü–∞",
                "‚Ä¢ –ü—Ä—è–º–æ–π —Ä–∞–∫—É—Ä—Å –±–µ–∑ –Ω–∞–∫–ª–æ–Ω–∞ –≥–æ–ª–æ–≤—ã",
                "‚Ä¢ –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞",
                "‚Ä¢ –•–æ—Ä–æ—à–µ–µ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ",
                "",
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
            ]
            
            self.bot.send_message(chat_id, "\n".join(symmetry_info))

    def process_photo(self, message):
        """Process the user photo and send face shape analysis with recommendations."""
        chat_id = None
        try:
            chat_id = message.chat.id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–∏–º–º–µ—Ç—Ä–∏–∏ –ª–∏—Ü–∞ (—Ñ—É–Ω–∫—Ü–∏—è 3)
            if chat_id in self.user_data and self.user_data[chat_id].get('current_feature') == "3":
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è 3 (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–º–µ—Ç—Ä–∏–∏ –ª–∏—Ü–∞). –°–æ—Ö—Ä–∞–Ω—è—é —Ñ–æ—Ç–æ –∏ –∑–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑")
                
                # Get the largest photo (best quality)
                photos = message.photo
                if not photos:
                    self.bot.send_message(chat_id, BOT_MESSAGES["no_face"])
                    return
                
                photo = photos[-1]  # Get largest photo
                
                # Download the photo
                file_info = self.bot.get_file(photo.file_id)
                downloaded = self.bot.download_file(file_info.file_path)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if chat_id not in self.user_data:
                    self.user_data[chat_id] = {}
                self.user_data[chat_id]['image_data'] = downloaded
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ symmetry_command
                self.bot.send_message(chat_id, "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–∏–º–º–µ—Ç—Ä–∏—é –≤–∞—à–µ–≥–æ –ª–∏—Ü–∞... –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    image_data = downloaded
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç, —Å –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å
                    nparr = np.frombuffer(image_data, np.uint8)
                    image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º MediaPipe –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–∏—Ü–∞ –∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤
                    with self.face_analyzer.mp_face_mesh.FaceMesh(
                        static_image_mode=True,
                        max_num_faces=1,
                        min_detection_confidence=0.5) as face_mesh:
                        
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ RGB –¥–ª—è MediaPipe
                        image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
                        height, width, _ = image.shape
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ª–∏—Ü–∞
                        results = face_mesh.process(image_rgb)
                        
                        if not results.multi_face_landmarks:
                            self.bot.send_message(chat_id, BOT_MESSAGES["no_face"])
                            return
                        
                        face_landmarks = results.multi_face_landmarks[0]
                        
                        # –ù–∞—Ö–æ–¥–∏–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –ª–∏—Ü–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ—Å –∫–∞–∫ –æ—Ä–∏–µ–Ω—Ç–∏—Ä)
                        nose_tip = face_landmarks.landmark[4]  # MediaPipe –∏–Ω–¥–µ–∫—Å –¥–ª—è –∫–æ–Ω—á–∏–∫–∞ –Ω–æ—Å–∞
                        center_x = int(nose_tip.x * width)
                        
                        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ü–µ–Ω—Ç—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        center_x = max(1, min(center_x, width-1))
                        
                        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã
                        left_half = image.copy()
                        right_half = image.copy()
                        
                        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç—Ä–∞–∂–µ–Ω–∏—è
                        # –õ–µ–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ (–æ—Ç—Ä–∞–∂–∞–µ–º –ø—Ä–∞–≤—É—é —á–∞—Å—Ç—å –Ω–∞ –º–µ—Å—Ç–æ –ª–µ–≤–æ–π)
                        left_size = center_x
                        right_size = width - center_x
                        
                        # –°–æ–∑–¥–∞–µ–º –ª–µ–≤—É—é —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—É—é –≤–µ—Ä—Å–∏—é (–ª–µ–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ –ª–∏—Ü–∞)
                        # –°–Ω–∞—á–∞–ª–∞ –±–µ—Ä–µ–º –ª–µ–≤—É—é –ø–æ–ª–æ–≤–∏–Ω—É –ª–∏—Ü–∞
                        left_side = left_half[:, 0:center_x, :]
                        # –û—Ç—Ä–∞–∂–∞–µ–º –ª–µ–≤—É—é –ø–æ–ª–æ–≤–∏–Ω—É –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
                        flipped_left = cv2.flip(left_side, 1)
                        # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –æ—Ç—Ä–∞–∂–µ–Ω–Ω–æ–π —á–∞—Å—Ç–∏ –¥–ª—è –ø—Ä–∞–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
                        if right_size > 0:
                            flipped_left_resized = cv2.resize(flipped_left, (right_size, height))
                            # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–∞–≤—É—é —á–∞—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Ç—Ä–∞–∂–µ–Ω–Ω—É—é –ª–µ–≤—É—é
                            left_half[:, center_x:width, :] = flipped_left_resized
                        
                        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤—É—é —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—É—é –≤–µ—Ä—Å–∏—é (–ø—Ä–∞–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ –ª–∏—Ü–∞)
                        # –°–Ω–∞—á–∞–ª–∞ –±–µ—Ä–µ–º –ø—Ä–∞–≤—É—é –ø–æ–ª–æ–≤–∏–Ω—É –ª–∏—Ü–∞
                        right_side = right_half[:, center_x:width, :]
                        # –û—Ç—Ä–∞–∂–∞–µ–º –ø—Ä–∞–≤—É—é –ø–æ–ª–æ–≤–∏–Ω—É –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
                        flipped_right = cv2.flip(right_side, 1)
                        # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –æ—Ç—Ä–∞–∂–µ–Ω–Ω–æ–π —á–∞—Å—Ç–∏ –¥–ª—è –ª–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
                        if left_size > 0:
                            flipped_right_resized = cv2.resize(flipped_right, (left_size, height))
                            # –ó–∞–º–µ–Ω—è–µ–º –ª–µ–≤—É—é —á–∞—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Ç—Ä–∞–∂–µ–Ω–Ω—É—é –ø—Ä–∞–≤—É—é
                            right_half[:, 0:center_x, :] = flipped_right_resized
                        
                        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç—Ä–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ–¥–Ω–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                        # –ü–æ —Ü–µ–Ω—Ç—Ä—É - –æ—Ä–∏–≥–∏–Ω–∞–ª, —Å–ª–µ–≤–∞ - –ª–µ–≤–∞—è —Å–∏–º–º–µ—Ç—Ä–∏—è, —Å–ø—Ä–∞–≤–∞ - –ø—Ä–∞–≤–∞—è —Å–∏–º–º–µ—Ç—Ä–∏—è
                        combined_width = width * 3
                        combined_image = np.zeros((height, combined_width, 3), dtype=np.uint8)
                        
                        # –†–∞–∑–º–µ—â–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        combined_image[:, 0:width, :] = left_half
                        combined_image[:, width:width*2, :] = image
                        combined_image[:, width*2:width*3, :] = right_half
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
                        cv2.line(combined_image, (width, 0), (width, height), (255, 255, 255), 2)
                        cv2.line(combined_image, (width*2, 0), (width*2, height), (255, 255, 255), 2)
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –∫ –∫–∞–∂–¥–æ–π –≤–µ—Ä—Å–∏–∏ –ª–∏—Ü–∞
                        font = cv2.FONT_HERSHEY_SIMPLEX
                        font_scale = 0.7
                        cv2.putText(combined_image, "–õ–µ–≤–∞—è —Å–∏–º–º–µ—Ç—Ä–∏—è", (10, 30), font, font_scale, (255, 255, 255), 2)
                        cv2.putText(combined_image, "–û—Ä–∏–≥–∏–Ω–∞–ª", (width + 10, 30), font, font_scale, (255, 255, 255), 2)
                        cv2.putText(combined_image, "–ü—Ä–∞–≤–∞—è —Å–∏–º–º–µ—Ç—Ä–∏—è", (width*2 + 10, 30), font, font_scale, (255, 255, 255), 2)
                        
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–µ–ø–µ–Ω—å —Å–∏–º–º–µ—Ç—Ä–∏–∏ –ª–∏—Ü–∞
                        # –ß–µ–º –±–æ–ª—å—à–µ —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É –ª–µ–≤–æ–π –∏ –ø—Ä–∞–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–∞–º–∏, —Ç–µ–º –Ω–∏–∂–µ —Å–∏–º–º–µ—Ç—Ä–∏—è
                        # –î–ª—è —ç—Ç–æ–≥–æ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ª–µ–≤—É—é –ø–æ–ª–æ–≤–∏–Ω—É —Å –æ—Ç—Ä–∞–∂–µ–Ω–Ω–æ–π –ø—Ä–∞–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–æ–π
                        left_region = image[:, 0:center_x, :]
                        right_region_flipped = cv2.flip(image[:, center_x:width, :], 1)
                        
                        # –û–±—Ä–µ–∑–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                        if left_region.shape[1] > 0 and right_region_flipped.shape[1] > 0:
                            min_width = min(left_region.shape[1], right_region_flipped.shape[1])
                            left_region = left_region[:, 0:min_width, :]
                            right_region_flipped = right_region_flipped[:, 0:min_width, :]
                            
                            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω—É—é –æ—à–∏–±–∫—É (MSE) –º–µ–∂–¥—É –ø–æ–ª–æ–≤–∏–Ω–∞–º–∏
                            diff = cv2.absdiff(left_region, right_region_flipped)
                            diff_sq = diff ** 2
                            mse = np.mean(diff_sq)
                        else:
                            # –í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –∫–∞–∫–∞—è-—Ç–æ –∏–∑ –ø–æ–ª–æ–≤–∏–Ω –∏–º–µ–µ—Ç –Ω—É–ª–µ–≤—É—é —à–∏—Ä–∏–Ω—É
                            mse = 5000  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–∏–∑–∫–æ–π —Å–∏–º–º–µ—Ç—Ä–∏–∏
                        
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º MSE –≤ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∏–º–º–µ—Ç—Ä–∏–∏ (100% - –∏–¥–µ–∞–ª—å–Ω–∞—è —Å–∏–º–º–µ—Ç—Ä–∏—è)
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–≥–ª—è–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                        symmetry_score = 100 * np.exp(-mse / 10000)
                        symmetry_score = max(0, min(100, symmetry_score))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-100
                        
                        # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–º–º–µ—Ç—Ä–∏–∏
                        if symmetry_score >= 80:
                            symmetry_result = "–£ –≤–∞—Å –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è —Å–∏–º–º–µ—Ç—Ä–∏—è –ª–∏—Ü–∞! –í–∞—à–µ –ª–∏—Ü–æ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∏–¥–µ–∞–ª—å–Ω–æ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ."
                        elif symmetry_score >= 60:
                            symmetry_result = "–£ –≤–∞—Å —Ö–æ—Ä–æ—à–∞—è —Å–∏–º–º–µ—Ç—Ä–∏—è –ª–∏—Ü–∞. –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —á–µ—Ä—Ç –ª–∏—Ü–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ."
                        elif symmetry_score >= 40:
                            symmetry_result = "–£ –≤–∞—Å —Å—Ä–µ–¥–Ω—è—è —Å–∏–º–º–µ—Ç—Ä–∏—è –ª–∏—Ü–∞. –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ª—é–¥–µ–π –∏–º–µ—é—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∞—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–µ —á–µ—Ä—Ç—ã."
                        else:
                            symmetry_result = "–£ –≤–∞—Å –∑–∞–º–µ—Ç–Ω–∞ –∞—Å–∏–º–º–µ—Ç—Ä–∏—è –ª–∏—Ü–∞. –≠—Ç–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –∏ –¥–∞–∂–µ –ø—Ä–∏–¥–∞–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç—å!"
                        
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ –±–∞–π—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                        is_success, buffer = cv2.imencode(".jpg", combined_image)
                        if not is_success:
                            self.bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                            return
                            
                        bytes_image = io.BytesIO(buffer)
                        bytes_image.seek(0)
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        self.bot.send_photo(
                            chat_id, 
                            bytes_image,
                            caption=f"‚û°Ô∏è *–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–º–º–µ—Ç—Ä–∏–∏ –ª–∏—Ü–∞*\n\n"
                                    f"üíØ –°–∏–º–º–µ—Ç—Ä–∏—è –ª–∏—Ü–∞: {symmetry_score:.1f}%\n\n"
                                    f"{symmetry_result}",
                            parse_mode="Markdown"
                        )
                        
                        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Ç–µ–∫—É—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã
                        self._reset_all_waiting_states(chat_id)
                            
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–∏–º–º–µ—Ç—Ä–∏–∏ –ª–∏—Ü–∞: {str(e)}")
                    self.bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–∏–º–º–µ—Ç—Ä–∏–∏ –ª–∏—Ü–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å –¥—Ä—É–≥–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π.")
                    
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞
            if chat_id in self.user_data and self.user_data[chat_id].get('current_feature') == "5":
                # –î–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ 5 (—É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞)
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ 5 (—É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞)")
                self.process_photo_for_background_removal(message)
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
            if chat_id in self.user_data and self.user_data[chat_id].get('current_feature') == "6":
                # –î–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ 6 (—É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤)
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ 6 (—É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤)")
                self.process_photo_for_ai_replace(message)
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞ (—Ñ—É–Ω–∫—Ü–∏—è 2)
            if chat_id in self.user_data and self.user_data[chat_id].get('current_feature') == "2":
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è 2 (–∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞). –°–æ—Ö—Ä–∞–Ω—è—é —Ñ–æ—Ç–æ –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
                
                # Get the largest photo (best quality)
                photos = message.photo
                if not photos:
                    self.bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    return
                    
                photo = photos[-1]  # Get largest photo
                
                # Download the photo
                file_info = self.bot.get_file(photo.file_id)
                downloaded = self.bot.download_file(file_info.file_path)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.user_data[chat_id]['image_data'] = downloaded
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                self.bot.send_message(chat_id, BOT_MESSAGES["processing"])
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞
                face_shape, vis_image_bytes, measurements = self.face_analyzer.analyze_face_shape(downloaded)
                
                if face_shape is None:
                    self.bot.send_message(chat_id, BOT_MESSAGES["no_face"])
                    return
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
                self.user_data[chat_id]['face_shape'] = face_shape
                self.user_data[chat_id]['face_measurements'] = measurements
                self.user_data[chat_id]['processed_image'] = vis_image_bytes
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞
                face_shape_description, recommendations = self.hairstyle_recommender.get_recommendations(face_shape)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
                result_message = [
                    f"‚úÖ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞",
                    f"",
                    f"üìä –§–æ—Ä–º–∞ –≤–∞—à–µ–≥–æ –ª–∏—Ü–∞: {face_shape_description}",
                    f"",
                    "üíá –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∏–∂–∫–∞–º:"
                ]
                result_message.extend(recommendations)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
                self.bot.send_photo(
                    chat_id,
                    vis_image_bytes,
                    caption="\n".join(result_message)
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –ø—Ä–∏—á–µ—Å–∫—É
                hairstyle_markup = telebot.types.InlineKeyboardMarkup()
                try_hairstyle_button = telebot.types.InlineKeyboardButton(
                    text="–ü—Ä–∏–º–µ—Ä–∏—Ç—å –ø—Ä–∏—á–µ—Å–∫—É üíá‚Äç‚ôÄÔ∏è", 
                    callback_data=f"try_hairstyle"
                )
                hairstyle_markup.add(try_hairstyle_button)
                
                self.bot.send_message(
                    chat_id,
                    "–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –ø—Ä–∏—á–µ—Å–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥–æ–π–¥–µ—Ç –¥–ª—è –≤–∞—à–µ–π —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ! üëá",
                    reply_markup=hairstyle_markup
                )
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                self.user_data[chat_id]['current_feature'] = None
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥, –Ω–æ –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –Ω–µ —Å–æ–∑–¥–∞–Ω
                # –≠—Ç–æ –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ self.user_data
                logger.info(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (—Ñ—É–Ω–∫—Ü–∏—è 4)
            if chat_id in self.user_data and self.user_data[chat_id].get('current_feature') == "4":
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è 4 (–∞–Ω–∞–ª–∏–∑ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏). –°–æ—Ö—Ä–∞–Ω—è—é —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                
                # Get the largest photo (best quality)
                photos = message.photo
                if not photos:
                    self.bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    return
                    
                photo = photos[-1]  # Get largest photo
                
                # Download the photo
                file_info = self.bot.get_file(photo.file_id)
                downloaded = self.bot.download_file(file_info.file_path)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                self.user_data[chat_id]['image_data'] = downloaded
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ
                self.analyze_attractiveness(chat_id)
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞ (—Ñ—É–Ω–∫—Ü–∏—è 5)
            if chat_id in self.user_data and self.user_data[chat_id].get('current_feature') == "5":
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è 5 (—É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞). –°–æ—Ö—Ä–∞–Ω—è—é —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                
                # Get the largest photo (best quality)
                photos = message.photo
                if not photos:
                    self.bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    return
                    
                photo = photos[-1]  # Get largest photo
                
                # Download the photo
                file_info = self.bot.get_file(photo.file_id)
                downloaded = self.bot.download_file(file_info.file_path)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                self.user_data[chat_id]['image_data'] = downloaded
                
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ–Ω–∞ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ
                self.change_background_command(message)
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ (—Ñ—É–Ω–∫—Ü–∏—è 6)
            if chat_id in self.user_data and self.user_data[chat_id].get('current_feature') == "6":
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è 6 (—É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤). –°–æ—Ö—Ä–∞–Ω—è—é —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                
                # Get the largest photo (best quality)
                photos = message.photo
                if not photos:
                    self.bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    return
                    
                photo = photos[-1]  # Get largest photo
                
                # Download the photo
                file_info = self.bot.get_file(photo.file_id)
                downloaded = self.bot.download_file(file_info.file_path)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                self.user_data[chat_id]['image_data'] = downloaded
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥ ai_replace_command –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
                self.user_data[chat_id]['waiting_for_replace_prompt'] = True
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ
                self.bot.send_message(
                    chat_id,
                    "‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏."
                )
                
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                self.bot.send_message(
                    chat_id,
                    "‚úèÔ∏è **–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:**\n\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´—É–¥–∞–ª–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ —Å–ø—Ä–∞–≤–∞¬ª, ¬´—É–±—Ä–∞—Ç—å —Ñ–æ–Ω¬ª, ¬´—É–¥–∞–ª–∏—Ç—å –º–∞—à–∏–Ω—É¬ª –∏ —Ç.–¥.",
                    parse_mode="Markdown"
                )
                # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å –∞–Ω–∞–ª–∏–∑–æ–º –ª–∏—Ü–∞
                return
                
            # Send processing message –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ª–∏—Ü–∞
            self.bot.send_message(chat_id, BOT_MESSAGES["processing"])
            
            # Get the largest photo (best quality)
            photos = message.photo
            if not photos:
                self.bot.send_message(chat_id, BOT_MESSAGES["no_face"])
                return
                
            photo = photos[-1]  # Get largest photo
            
            # Download the photo
            file_info = self.bot.get_file(photo.file_id)
            downloaded = self.bot.download_file(file_info.file_path)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π)
            if chat_id not in self.user_data:
                self.user_data[chat_id] = {}
            self.user_data[chat_id]['image_data'] = downloaded
            
            # Analyze the face –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ –ª–∏—Ü–∞
            face_shape, vis_image_bytes, measurements = self.face_analyzer.analyze_face_shape(downloaded)
            
            if face_shape is None:
                self.bot.send_message(chat_id, BOT_MESSAGES["no_face"])
                return
                
            # Get hairstyle recommendations
            face_shape_description, recommendations = self.hairstyle_recommender.get_recommendations(face_shape)
            
            # Store user data for hairstyle virtual try-on
            # We need to extract landmarks for hairstyle positioning
            try:
                # Convert image bytes to numpy array
                nparr = np.frombuffer(downloaded, np.uint8)
                image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
                
                # Convert to RGB for MediaPipe
                image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
                
                # Process the image to get facial landmarks
                results = self.face_analyzer.face_mesh.process(image_rgb)
                
                # Extract landmarks if face was detected
                if results.multi_face_landmarks:
                    face_landmarks = results.multi_face_landmarks[0]
                    height, width, _ = image.shape
                    landmarks = []
                    for landmark in face_landmarks.landmark:
                        x, y = int(landmark.x * width), int(landmark.y * height)
                        landmarks.append((x, y))
                        
                    # Store user data for later use with hairstyle try-on
                    if chat_id not in self.user_data:
                        self.user_data[chat_id] = {}
                        
                    self.user_data[chat_id].update({
                        'face_shape': face_shape,
                        'landmarks': landmarks,
                        'image_data': downloaded,
                        'waiting_for_hairstyle_selection': False
                    })
                    
                    logger.info(f"Stored user data for chat_id {chat_id}")
            except Exception as e:
                logger.error(f"Error extracting landmarks: {e}")
                
            # Format the message
            result_message = [
                f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!",
                f"",
                f"üìä –§–æ—Ä–º–∞ —Ç–≤–æ–µ–≥–æ –ª–∏—Ü–∞: {face_shape_description}",
                f"",
                "üíá –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∏–∂–∫–∞–º:"
            ]
            result_message.extend(recommendations)
            result_message.extend([
                "",
                "üîç –ü—Ä–∏–º–µ—Ä–∏—Ç—å –ø—Ä–∏—á–µ—Å–∫—É: /try",
                "üìã –°–ø–∏—Å–æ–∫ –ø—Ä–∏—á–µ—Å–æ–∫: /hairstyles"
            ])
            
            # Add some measurements for context (optional)
            if measurements:
                result_message.append("")
                result_message.append("üìè –ò–∑–º–µ—Ä–µ–Ω–∏—è (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ):")
                for key, value in measurements.items():
                    result_message.append(f"- {key}: {value:.2f}")
                    
            # Send the visualization image with facial landmarks
            if vis_image_bytes:
                vis_image_io = io.BytesIO(vis_image_bytes)
                vis_image_io.name = 'face_analysis.jpg'
                self.bot.send_photo(
                    chat_id,
                    vis_image_io,
                    caption="–ê–Ω–∞–ª–∏–∑ –ª–∏—Ü–µ–≤—ã—Ö —Ç–æ—á–µ–∫"
                )
                
            # Send the recommendations
            self.bot.send_message(chat_id, "\n".join(result_message))
            
        except Exception as e:
            logger.error(f"Error processing photo: {e}")
            try:
                if chat_id:
                    self.bot.send_message(chat_id, BOT_MESSAGES["error"])
                else:
                    logger.error("Chat ID is None, can't send error message")
            except:
                logger.error("Failed to send error message to user")

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–º–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é LightX API Replace
    def process_photo_for_background_removal(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞ –∏ –∑–∞–º–µ–Ω—ã –Ω–∞ –¥—Ä—É–≥–æ–π —Ü–≤–µ—Ç/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        chat_id = message.chat.id
        
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–µ–º –∏—Ö
        if chat_id not in self.user_data:
            self.user_data[chat_id] = {}
            
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        photos = message.photo
        if not photos:
            self.bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
            
        photo = photos[-1]  # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—É—é –±–æ–ª—å—à—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ
        file_info = self.bot.get_file(photo.file_id)
        downloaded = self.bot.download_file(file_info.file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_data[chat_id]['image_data'] = downloaded
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ
        self.bot.send_message(
            chat_id,
            "‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –∏–ª–∏ –æ–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ñ–æ–Ω."
        )
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
        self._request_background_prompt(chat_id)
    
    def process_photo_for_ai_replace(self, message, text_prompt=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–º–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é LightX Replace API"""
        chat_id = message.chat.id
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
        current_feature = self.user_data.get(chat_id, {}).get('current_feature')
        function_name = "–ó–∞–º–µ–Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
        if current_feature == "5":
            function_name = "–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞"
        elif current_feature == "6":
            function_name = "–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤"
            
        logger.info(f"[–§—É–Ω–∫—Ü–∏—è {current_feature}] –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–æ—Ç–æ –¥–ª—è {function_name} –¥–ª—è chat_id {chat_id}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–º (–¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞)
            is_text_message = hasattr(message, 'text') and message.text and not hasattr(message, 'photo')
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
            # 1. –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if is_text_message and 'image_data' in self.user_data.get(chat_id, {}):
                logger.info(f"[–§—É–Ω–∫—Ü–∏—è {current_feature}] –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {message.text}")
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                if not text_prompt:
                    text_prompt = message.text
                    self.user_data[chat_id]['replace_prompt'] = text_prompt
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                downloaded = self.user_data[chat_id]['image_data']
                logger.info(f"[–§—É–Ω–∫—Ü–∏—è {current_feature}] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ñ–æ—Ç–æ —Ä–∞–∑–º–µ—Ä–æ–º {len(downloaded)} –±–∞–π—Ç")
            
            # 2. –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ —É –Ω–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            elif is_text_message and 'image_data' not in self.user_data.get(chat_id, {}):
                logger.error(f"[–§—É–Ω–∫—Ü–∏—è {current_feature}] –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                self.bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
                return
            
            # 3. –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
            elif hasattr(message, 'photo') and message.photo:
                logger.info(f"[–§—É–Ω–∫—Ü–∏—è {current_feature}] –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                photo = message.photo[-1]  # –°–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
                logger.info(f"[–§—É–Ω–∫—Ü–∏—è {current_feature}] –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ —Å file_id: {photo.file_id}")
                file_info = self.bot.get_file(photo.file_id)
                downloaded = self.bot.download_file(file_info.file_path)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.user_data[chat_id]['image_data'] = downloaded
                logger.info(f"[–§—É–Ω–∫—Ü–∏—è {current_feature}] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ñ–æ—Ç–æ —Ä–∞–∑–º–µ—Ä–æ–º {len(downloaded)} –±–∞–π—Ç")
            
            # 4. –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–µ —Ñ–æ—Ç–æ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
            else:
                logger.error(f"[–§—É–Ω–∫—Ü–∏—è {current_feature}] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ —Ç–∏–ø–∞")
                self.bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.")
                return
            
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –Ω–æ –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if not text_prompt and 'replace_prompt' in self.user_data.get(chat_id, {}):
                text_prompt = self.user_data[chat_id]['replace_prompt']
                logger.info(f"[–§—É–Ω–∫—Ü–∏—è {current_feature}] –ò—Å–ø–æ–ª—å–∑—É—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {text_prompt}")
            
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not text_prompt:
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                self.user_data[chat_id]['waiting_for_replace_prompt'] = True
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ—É–Ω–∫—Ü–∏–∏
                prompt_message = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.\n\n"
                if current_feature == "5":
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ _request_background_prompt –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞
                    self._request_background_prompt(chat_id)
                    return  # –í–∞–∂–Ω–æ: –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, —Ç–∞–∫ –∫–∞–∫ _request_background_prompt —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
                elif current_feature == "6":
                    prompt_message = "‚úèÔ∏è **–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:**\n\n"
                    prompt_message += "–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´—É–¥–∞–ª–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ —Å–ø—Ä–∞–≤–∞¬ª, ¬´—É–±—Ä–∞—Ç—å —Ñ–æ–Ω¬ª, ¬´—É–¥–∞–ª–∏—Ç—å –º–∞—à–∏–Ω—É¬ª –∏ —Ç.–¥."
                else:
                    prompt_message += "–ù–∞–ø—Ä–∏–º–µ—Ä: '–∑–∞–º–µ–Ω–∏—Ç—å —á–∞—à–∫—É –Ω–∞ –≤–∞–∑—É —Å —Ü–≤–µ—Ç–∞–º–∏', '–∑–∞–º–µ–Ω–∏—Ç—å —Ñ–æ–Ω –Ω–∞ –ø–ª—è–∂' –∏ —Ç.–¥."
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                self.bot.send_message(
                    chat_id,
                    prompt_message,
                    parse_mode="Markdown"
                )
                return
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –æ–∂–∏–¥–∞–Ω–∏—è
            self.user_data[chat_id]['waiting_for_replace_prompt'] = False
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ—É–Ω–∫—Ü–∏–∏
            process_message = f"ü§ñ –ó–∞–ø—É—Å–∫–∞—é –Ω–µ–π—Ä–æ—Å–µ—Ç—å AI Replace –¥–ª—è –∑–∞–º–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏..."
            if current_feature == "5":
                process_message = f"ü§ñ –ó–∞–ø—É—Å–∫–∞—é –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–æ–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."
            elif current_feature == "6":
                process_message = f"ü§ñ –ó–∞–ø—É—Å–∫–∞—é –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏..."
                
            processing_message = self.bot.send_message(
                chat_id, 
                f"{process_message}\n\n–ó–∞–ø—Ä–æ—Å: '{text_prompt}'\n\n–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
            )
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
            self.bot.send_message(chat_id, "‚úì –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é...")
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è LightX API
            english_prompt = self._translate_prompt_to_english(text_prompt)
            logger.info(f"[–§—É–Ω–∫—Ü–∏—è {current_feature}] –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {english_prompt}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ LightX API Replace
            logger.info(f"[–§—É–Ω–∫—Ü–∏—è {current_feature}] –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ LightX API Replace —Å –∑–∞–ø—Ä–æ—Å–æ–º: {english_prompt}")
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞
                if not self.lightx_client.api_key:
                    logger.error(f"[–§—É–Ω–∫—Ü–∏—è {current_feature}] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á LightX API")
                    self.bot.send_message(chat_id, "–û—à–∏–±–∫–∞: API –∫–ª—é—á –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                
                # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è –∑–∞–º–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ API
                try:
                    from PIL import Image, ImageDraw
                    import io
                    
                    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
                    background_keywords = ['background', '—Ñ–æ–Ω', '–∑–∞–¥–Ω–∏–π –ø–ª–∞–Ω', '–∑–∞–¥–Ω–µ–≥–æ –ø–ª–∞–Ω–∞', '–∑–∞–¥–Ω–∏–º –ø–ª–∞–Ω–æ–º', 'background change']
                    object_keywords = ['object', 'replace object', 'change object', '–∑–∞–º–µ–Ω–∏ –æ–±—ä–µ–∫—Ç', '–ø–æ–º–µ–Ω—è—Ç—å –æ–±—ä–µ–∫—Ç', '–∑–∞–º–µ–Ω–∏—Ç—å –æ–±—ä–µ–∫—Ç']
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
                    is_background_change = any(keyword in text_prompt.lower() for keyword in background_keywords)
                    is_object_change = any(keyword in text_prompt.lower() for keyword in object_keywords)
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    downloaded = self.user_data[chat_id]['image_data']
                    
                    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    input_buffer = io.BytesIO(downloaded)
                    with Image.open(input_buffer) as img:
                        width, height = img.size
                        logger.info(f"[–§—É–Ω–∫—Ü–∏—è 7] –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–µ—Ç —Ä–∞–∑–º–µ—Ä {width}x{height}")
                        
                        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –º–∞—Å–∫—É: —á–µ—Ä–Ω—ã–π —Ñ–æ–Ω (–Ω–µ –∑–∞–º–µ–Ω—è—Ç—å) –∏ –±–µ–ª—ã–π —Ü–µ–Ω—Ç—Ä (–∑–∞–º–µ–Ω–∏—Ç—å)
                        mask = Image.new('L', (width, height), 0)  # –ß–µ—Ä–Ω—ã–π —Ñ–æ–Ω (–Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–º–µ–Ω—è—Ç—å)
                        draw = ImageDraw.Draw(mask)
                        
                        if is_background_change:
                            # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É —Å —á–µ—Ä–Ω—ã–º —Ü–µ–Ω—Ç—Ä–æ–º –∏ –±–µ–ª—ã–º–∏ –∫—Ä–∞—è–º–∏ (–¥–ª—è –∑–∞–º–µ–Ω—ã —Ñ–æ–Ω–∞)
                            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
                            center_width = int(width * 0.6)  # 60% –æ—Ç —à–∏—Ä–∏–Ω—ã
                            center_height = int(height * 0.6)  # 60% –æ—Ç –≤—ã—Å–æ—Ç—ã
                            
                            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞
                            x1 = (width - center_width) // 2
                            y1 = (height - center_height) // 2
                            x2 = x1 + center_width
                            y2 = y1 + center_height
                            
                            # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤–µ—Å—å —Ñ–æ–Ω –±–µ–ª—ã–º (–∑–∞–º–µ–Ω–∏—Ç—å)
                            mask.paste(255, (0, 0, width, height))
                            
                            # –°–æ–∑–¥–∞–µ–º —á–µ—Ä–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –≤ —Ü–µ–Ω—Ç—Ä–µ (—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å)
                            draw.rectangle(((x1, y1), (x2, y2)), fill=0)
                            
                            logger.info(f"[–§—É–Ω–∫—Ü–∏—è 7] –°–æ–∑–¥–∞–Ω–∞ –º–∞—Å–∫–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã —Ñ–æ–Ω–∞. –û–±—ä–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ —Ü–µ–Ω—Ç—Ä–µ ({x1},{y1})-({x2},{y2})")
                        elif is_object_change:
                            # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É —Å –±–µ–ª—ã–º —Ü–µ–Ω—Ç—Ä–æ–º –∏ —á–µ—Ä–Ω—ã–º–∏ –∫—Ä–∞—è–º–∏ (–¥–ª—è –∑–∞–º–µ–Ω—ã –æ–±—ä–µ–∫—Ç–∞)
                            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
                            center_width = int(width * 0.6)  # 60% –æ—Ç —à–∏—Ä–∏–Ω—ã
                            center_height = int(height * 0.6)  # 60% –æ—Ç –≤—ã—Å–æ—Ç—ã
                            
                            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞
                            x1 = (width - center_width) // 2
                            y1 = (height - center_height) // 2
                            x2 = x1 + center_width
                            y2 = y1 + center_height
                            
                            # –†–∏—Å—É–µ–º –±–µ–ª—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –≤ —Ü–µ–Ω—Ç—Ä–µ (–∑–∞–º–µ–Ω–∏—Ç—å –æ–±—ä–µ–∫—Ç)
                            draw.rectangle(((x1, y1), (x2, y2)), fill=255)
                            
                            logger.info(f"[–§—É–Ω–∫—Ü–∏—è 7] –°–æ–∑–¥–∞–Ω–∞ –º–∞—Å–∫–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã –æ–±—ä–µ–∫—Ç–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ ({x1},{y1})-({x2},{y2})")
                        else:
                            # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è, —Å–æ–∑–¥–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –º–∞—Å–∫—É
                            # —Å –º–µ–Ω—å—à–µ–π –æ–±–ª–∞—Å—Ç—å—é –≤ —Ü–µ–Ω—Ç—Ä–µ –¥–ª—è –∑–∞–º–µ–Ω—ã
                            center_width = int(width * 0.4)  # 40% –æ—Ç —à–∏—Ä–∏–Ω—ã
                            center_height = int(height * 0.4)  # 40% –æ—Ç –≤—ã—Å–æ—Ç—ã
                            
                            x1 = (width - center_width) // 2
                            y1 = (height - center_height) // 2
                            x2 = x1 + center_width
                            y2 = y1 + center_height
                            
                            # –†–∏—Å—É–µ–º –±–µ–ª—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –≤ —Ü–µ–Ω—Ç—Ä–µ (–∑–∞–º–µ–Ω–∏—Ç—å)
                            draw.rectangle(((x1, y1), (x2, y2)), fill=255)
                            
                            logger.info(f"[–§—É–Ω–∫—Ü–∏—è 7] –°–æ–∑–¥–∞–Ω–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –º–∞—Å–∫–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã –æ–±–ª–∞—Å—Ç–∏ –≤ —Ü–µ–Ω—Ç—Ä–µ ({x1},{y1})-({x2},{y2})")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Å–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        mask_debug_path = f"mask_debug_{chat_id}.jpg"
                        mask.save(mask_debug_path)
                        logger.info(f"[–§—É–Ω–∫—Ü–∏—è 7] –ú–∞—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏: {mask_debug_path}")
                        
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å–∫—É –≤ –±–∞–π—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                        mask_buffer = io.BytesIO()
                        mask.save(mask_buffer, format='JPEG')
                        mask_buffer.seek(0)
                        mask_data = mask_buffer.read()
                        
                        logger.info(f"[–§—É–Ω–∫—Ü–∏—è 7] –°–æ–∑–¥–∞–Ω–∞ –º–∞—Å–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–º {len(mask_data)} –±–∞–π—Ç")
                        
                        # –ó–∞–ø—Ä–æ—Å –∫ API —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–µ—Ä–µ–≤–æ–¥–æ–º –∏ –º–∞—Å–∫–æ–π
                        logger.info(f"[–§—É–Ω–∫—Ü–∏—è 7] –í—ã–∑—ã–≤–∞–µ–º LightX API Replace —Å –º–∞—Å–∫–æ–π. –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {len(downloaded)} –±–∞–π—Ç")
                        result_image = self.lightx_client.ai_replace(
                            downloaded, 
                            text_prompt=english_prompt,
                            mask_data=mask_data
                        )
                        
                except Exception as mask_error:
                    logger.error(f"[–§—É–Ω–∫—Ü–∏—è 7] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Å–∫–∏: {mask_error}")
                    import traceback
                    logger.error(traceback.format_exc())
                    
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–∞—Å–∫—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –±–µ–∑ —è–≤–Ω–æ–π –º–∞—Å–∫–∏
                    logger.info(f"[–§—É–Ω–∫—Ü–∏—è 7] –í—ã–∑—ã–≤–∞–µ–º LightX API Replace –±–µ–∑ –º–∞—Å–∫–∏. –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {len(downloaded)} –±–∞–π—Ç")
                    result_image = self.lightx_client.ai_replace(downloaded, text_prompt=english_prompt)
                
                if result_image:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    result_debug_path = f"ai_replace_result_{chat_id}.jpg"
                    with open(result_debug_path, "wb") as f:
                        f.write(result_image)
                    logger.info(f"[–§—É–Ω–∫—Ü–∏—è 7] –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏: {result_debug_path}")
                    
                    # –°–æ–∑–¥–∞–µ–º BytesIO –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                    result_io = io.BytesIO(result_image)
                    result_io.name = 'replaced_elements.jpg'
                    
                    logger.info(f"[–§—É–Ω–∫—Ü–∏—è 7] –ü–æ–ª—É—á–µ–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–º {len(result_image)} –±–∞–π—Ç")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
                    self.bot.send_photo(
                        chat_id,
                        result_io,
                        caption=f"‚ú® –í–∞—à–µ —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –∑–∞–º–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤! –ù–µ–π—Ä–æ—Å–µ—Ç—å –∑–∞–º–µ–Ω–∏–ª–∞ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –∑–∞–ø—Ä–æ—Å—É: '{text_prompt}'."
                    )
                    logger.info("[–§—É–Ω–∫—Ü–∏—è 7] –ó–∞–º–µ–Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                else:
                    logger.error("[–§—É–Ω–∫—Ü–∏—è 7] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–º–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ—Ç LightX API")
                    self.bot.send_message(chat_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º–µ–Ω–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
            except Exception as api_error:
                logger.error(f"[–§—É–Ω–∫—Ü–∏—è 7] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ LightX API: {api_error}")
                self.bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API –¥–ª—è –∑–∞–º–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        except Exception as e:
            logger.error(f"Error in AI Replace: {e}")
            self.bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    def try_hairstyle_command(self, message):
        """Handle the /try command to try on hairstyles"""
        chat_id = message.chat.id
        
        # Check if user has submitted a photo before
        if chat_id not in self.user_data or 'face_shape' not in self.user_data[chat_id]:
            self.bot.send_message(chat_id, BOT_MESSAGES["no_photo_yet"])
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        credits = get_user_credits(chat_id)
        # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏–º–µ—Ä–∫–∏ –ø—Ä–∏—á–µ—Å–∫–∏ - 2 –∫—Ä–µ–¥–∏—Ç–∞ (–±–µ—Ä–µ–º –∏–∑ —Å–ª–æ–≤–∞—Ä—è –≤ database.py)
        cost = 2
        if credits < cost:
            # –ï—Å–ª–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏—è—Ö
            self.bot.send_message(
                chat_id,
                PREMIUM_MESSAGES["not_enough_credits"].format(credits=credits, cost=cost),
                parse_mode="Markdown"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–µ –∫—Ä–µ–¥–∏—Ç–æ–≤
            self.bot.send_message(
                chat_id, 
                PREMIUM_MESSAGES["premium_features"],
                parse_mode="Markdown"
            )
            return
            
        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥–∏
        self.bot.send_message(
            chat_id,
            f"üí° –ü—Ä–∏–º–µ—Ä–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –ø—Ä–∏—á–µ—Å–∫–∏ —Å—Ç–æ–∏—Ç {cost} –∫—Ä–µ–¥–∏—Ç–∞. –£ –≤–∞—Å –Ω–∞ —Å—á–µ—Ç—É: {credits} –∫—Ä–µ–¥–∏—Ç–æ–≤.",
            parse_mode="Markdown"
        )
        
        # Get face shape
        face_shape = self.user_data[chat_id]['face_shape']
        
        # Set initial state for gender selection first
        self.user_data[chat_id]['waiting_for_hairstyle_selection'] = True
        self.user_data[chat_id]['customization_state'] = 'selecting_gender'
        self.user_data[chat_id]['face_shape'] = face_shape
        
        # Ask user to select gender for hairstyles
        self.bot.send_message(chat_id, BOT_MESSAGES['try_hairstyle'])
        
    def list_hairstyles_command(self, message):
        """Handle the /hairstyles command to list available hairstyles"""
        chat_id = message.chat.id
        
        # Check if user has submitted a photo before
        if chat_id not in self.user_data or 'face_shape' not in self.user_data[chat_id]:
            self.bot.send_message(chat_id, BOT_MESSAGES["no_photo_yet"])
            return
            
        # Get available hairstyles for the user's face shape
        face_shape = self.user_data[chat_id]['face_shape']
        face_shape_description = FACE_SHAPE_CRITERIA[face_shape]["description"]
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏—á–µ—Å–∫–∏ (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø–æ–ª—É)
        all_hairstyles = self.face_analyzer.get_hairstyle_names(face_shape)
        
        if not all_hairstyles:
            self.bot.send_message(chat_id, BOT_MESSAGES["no_hairstyles"])
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –º—É–∂—Å–∫–∏–µ –ø—Ä–∏—á–µ—Å–∫–∏
        male_hairstyles = self.face_analyzer.get_hairstyle_names(face_shape, "male")
        # –ü–æ–ª—É—á–∞–µ–º –∂–µ–Ω—Å–∫–∏–µ –ø—Ä–∏—á–µ—Å–∫–∏
        female_hairstyles = self.face_analyzer.get_hairstyle_names(face_shape, "female")
        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø—Ä–∏—á–µ—Å–∫–∏ (–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏–º–µ—é—Ç —è–≤–Ω–æ–π –º–µ—Ç–∫–∏ –ø–æ–ª–∞)
        universal_hairstyles = [h for h in all_hairstyles if not h.endswith("(M)") and not h.endswith("(–ñ)")]
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏ –ø—Ä–∏—á–µ—Å–æ–∫
        male_hairstyles_text = [f"  ‚Ä¢ {name}" for name in male_hairstyles]
        female_hairstyles_text = [f"  ‚Ä¢ {name}" for name in female_hairstyles]
        universal_hairstyles_text = [f"  ‚Ä¢ {name}" for name in universal_hairstyles]
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ –ø—Ä–∏—á–µ—Å–∫–∞–º–∏
        message_text = [
            f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏—á–µ—Å–∫–∏ –¥–ª—è {face_shape_description}:",
            "",
            f"ü§ñ –í—Å–µ —Å—Ç–∏–ª–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é LightX AI",
            ""
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º—É–∂—Å–∫–∏–µ –ø—Ä–∏—á–µ—Å–∫–∏
        if male_hairstyles:
            message_text.append("üë® –ú—É–∂—Å–∫–∏–µ –ø—Ä–∏—á–µ—Å–∫–∏:")
            message_text.extend(male_hairstyles_text)
            message_text.append("")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∂–µ–Ω—Å–∫–∏–µ –ø—Ä–∏—á–µ—Å–∫–∏
        if female_hairstyles:
            message_text.append("üë© –ñ–µ–Ω—Å–∫–∏–µ –ø—Ä–∏—á–µ—Å–∫–∏:")
            message_text.extend(female_hairstyles_text)
            message_text.append("")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø—Ä–∏—á–µ—Å–∫–∏
        if universal_hairstyles:
            message_text.append("üîÑ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø—Ä–∏—á–µ—Å–∫–∏:")
            message_text.extend(universal_hairstyles_text)
            message_text.append("")
        
        message_text.append("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /try –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –ø—Ä–∏–º–µ—Ä–∫–∏ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏—á–µ—Å–æ–∫
        self.bot.send_message(chat_id, "\n".join(message_text))
        
    def apply_selected_hairstyle(self, message):
        """Handle the hairstyle customization flow"""
        chat_id = message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        if chat_id not in self.user_data:
            self.user_data[chat_id] = {}
            
        try:
            # Get current customization state
            customization_state = self.user_data[chat_id].get('customization_state', 'selecting_gender')
            
            if customization_state == 'selecting_gender':
                # User is selecting gender for hairstyles
                try:
                    # Parse the gender selection
                    selection = int(message.text.strip())
                    
                    # Check if selection is valid
                    if selection < 1 or selection > 2:
                        self.bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1 –¥–ª—è –º—É–∂—Å–∫–∏—Ö –∏–ª–∏ 2 –¥–ª—è –∂–µ–Ω—Å–∫–∏—Ö –ø—Ä–∏—á–µ—Å–æ–∫.")
                        return
                    
                    # Set gender
                    gender = "male" if selection == 1 else "female"
                    self.user_data[chat_id]['selected_gender'] = gender
                    
                    # Get face shape
                    face_shape = self.user_data[chat_id]['face_shape']
                    
                    # Get hairstyle objects based on gender
                    # –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±–æ—Ä–∫—É –ø—Ä–∏—á–µ—Å–æ–∫ –ø–æ –ø–æ–ª—É
                    gender = self.user_data[chat_id]['selected_gender']
                    hairstyle_objects = self.face_analyzer.get_available_hairstyles(face_shape, gender)
                    
                    # Get hairstyle names
                    available_hairstyles = [h.get("name", f"–°—Ç–∏–ª—å {i+1}") for i, h in enumerate(hairstyle_objects)]
                    
                    if not available_hairstyles:
                        self.bot.send_message(chat_id, BOT_MESSAGES["no_hairstyles"])
                        return
                    
                    # Store hairstyles information
                    self.user_data[chat_id]['available_hairstyles'] = available_hairstyles
                    self.user_data[chat_id]['hairstyle_objects'] = hairstyle_objects
                    
                    # Move to next state - selecting specific hairstyle
                    self.user_data[chat_id]['customization_state'] = 'selecting_style'
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞
                    face_shape = self.user_data[chat_id]['face_shape']
                    face_shape_description = FACE_SHAPE_CRITERIA[face_shape]["description"]
                    
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏—á–µ—Å–∫–∏ –¥–ª—è —ç—Ç–æ–π —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞ –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª–∞
                    hairstyle_objects = self.user_data[chat_id]['hairstyle_objects']
                    available_hairstyles = self.user_data[chat_id]['available_hairstyles']
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –ø—Ä–∏—á–µ—Å–æ–∫
                    gender_text = "–º—É–∂—Å–∫–∏—Ö" if gender == "male" else "–∂–µ–Ω—Å–∫–∏—Ö"
                    
                    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏—á–µ—Å–æ–∫ —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
                    hairstyles_text = []
                    for i, name in enumerate(available_hairstyles):
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç, –¥–æ–±–∞–≤–ª—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–≤–µ—Ç–∞—Ö –∏ –¥–ª–∏–Ω–µ
                        hairstyle_obj = hairstyle_objects[i]
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏—á–µ—Å–∫–µ
                        hairstyle_info = f"{i+1}. {name}"
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ü–≤–µ—Ç–∞ –∏ –¥–ª–∏–Ω—ã –≤ –æ–±—ä–µ–∫—Ç–µ –ø—Ä–∏—á–µ—Å–∫–∏
                        if "colors" in hairstyle_obj and hairstyle_obj["colors"]:
                            color_names = [c.get("name", "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π") for c in hairstyle_obj["colors"][:3]]
                            hairstyle_info += f" (—Ü–≤–µ—Ç–∞: {', '.join(color_names)[:30]}...)"
                        
                        hairstyles_text.append(hairstyle_info)
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–∏—á–µ—Å–æ–∫
                    message_text = [
                        f"üíá –î–æ—Å—Ç—É–ø–Ω—ã–µ {gender_text} –ø—Ä–∏—á–µ—Å–∫–∏ –¥–ª—è {face_shape_description}:",
                        "",
                        "\n".join(hairstyles_text),
                        "",
                        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∏—á–µ—Å–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–∏—Ç—å:"
                    ]
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏—á–µ—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    self.bot.send_message(chat_id, "\n".join(message_text))
                        
                except ValueError:
                    self.bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1 –¥–ª—è –º—É–∂—Å–∫–∏—Ö –∏–ª–∏ 2 –¥–ª—è –∂–µ–Ω—Å–∫–∏—Ö –ø—Ä–∏—á–µ—Å–æ–∫.")
            
            elif customization_state == 'selecting_style':
                # User is selecting which hairstyle to try
                try:
                    # Parse the hairstyle selection number
                    selection = int(message.text.strip())
                    available_hairstyles = self.user_data[chat_id]['available_hairstyles']
                    
                    # Check if selection is valid
                    if selection < 1 or selection > len(available_hairstyles):
                        self.bot.send_message(chat_id, BOT_MESSAGES["invalid_hairstyle"])
                        return
                    
                    # Get the selected hairstyle index (0-based)
                    hairstyle_index = selection - 1
                    hairstyle_name = available_hairstyles[hairstyle_index]
                    
                    # Store selected hairstyle
                    self.user_data[chat_id]['selected_hairstyle_index'] = hairstyle_index
                    self.user_data[chat_id]['selected_hairstyle_name'] = hairstyle_name
                    
                    # Get hairstyle object with customization options
                    selected_hairstyle = self.user_data[chat_id]['hairstyle_objects'][hairstyle_index]
                    
                    # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ —Ü–≤–µ—Ç –∏ –¥–ª–∏–Ω—É –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ
                    self.user_data[chat_id]['customization_state'] = 'input_color_length'
                    self.bot.send_message(chat_id, BOT_MESSAGES['input_color_length'])
                except ValueError:
                    # Not a number
                    self.bot.send_message(chat_id, BOT_MESSAGES["invalid_hairstyle"])
            
            elif customization_state == 'input_color_length':
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ü–≤–µ—Ç –∏ –¥–ª–∏–Ω—É –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ
                text_input = message.text.strip()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.user_data[chat_id]['user_color_length_input'] = text_input
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–≤–æ–¥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –≤–æ–ª–æ—Å –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Å –ø–æ–º–æ—â—å—é DeepL API
                color_name = text_input
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ—Ä–∞–∑—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞, –¥–æ–±–∞–≤–ª—è—è "–≤–æ–ª–æ—Å—ã —Ü–≤–µ—Ç–∞" –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                translation_phrase = f"–≤–æ–ª–æ—Å—ã —Ü–≤–µ—Ç–∞ {text_input}"
                logger.info(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Ü–≤–µ—Ç–∞ –≤–æ–ª–æ—Å —á–µ—Ä–µ–∑ DeepL: '{translation_phrase}'")
                
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å –ø–æ–º–æ—â—å—é DeepL API
                translated_color_phrase = self._translate_with_deepl(translation_phrase)
                
                if translated_color_phrase:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–≤–µ—Ç –∏–∑ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–π —Ñ—Ä–∞–∑—ã
                    # –¢–∏–ø–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç "hair color [color]" –∏–ª–∏ "[color] hair"
                    translated_color_phrase = translated_color_phrase.lower()
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω –ø–µ—Ä–µ–≤–æ–¥: '{translated_color_phrase}'")
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–≤–µ—Ç –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Ñ—Ä–∞–∑—ã
                    import re
                    
                    # –£–¥–∞–ª—è–µ–º "hair color" –∏–ª–∏ "hair of color" –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–≤–µ—Ç
                    color_value = translated_color_phrase
                    color_value = re.sub(r'hair\s+colou?r\s+(of\s+)?', '', color_value)
                    color_value = re.sub(r'colou?r\s+(of\s+)?hair', '', color_value)
                    color_value = re.sub(r'\s+hair$', '', color_value)
                    
                    # –ï—Å–ª–∏ —Ü–≤–µ—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ
                    if color_value == translated_color_phrase:
                        words = translated_color_phrase.split()
                        if len(words) > 0:
                            color_value = words[-1]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ –∫–∞–∫ —Ü–≤–µ—Ç
                    
                    logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ü–≤–µ—Ç: '{color_value}'")
                else:
                    # –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ü–≤–µ—Ç —á–µ—Ä–µ–∑ DeepL, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å")
                    color_map = {
                        '—á–µ—Ä–Ω—ã–µ': 'black',
                        '—á–µ—Ä–Ω—ã–π': 'black',
                        '—á–µ—Ä–Ω': 'black',
                        '—Ç–µ–º–Ω—ã–µ': 'dark',
                        '—Ç–µ–º–Ω—ã–π': 'dark',
                        '—Ç–µ–º–Ω–æ': 'dark',
                        '–∫–æ—Ä–∏—á–Ω–µ–≤': 'brown',
                        '–∫–∞—à—Ç–∞–Ω–æ–≤': 'chestnut brown',
                        '—Ä—É—Å—ã–µ': 'blonde',
                        '—Ä—É—Å—ã–π': 'blonde',
                        '–±–ª–æ–Ω–¥': 'blonde',
                        '—Å–≤–µ—Ç–ª—ã–µ': 'light blonde',
                        '—Å–≤–µ—Ç–ª—ã–π': 'light blonde',
                        '—Ä—ã–∂–∏–µ': 'red',
                        '—Ä—ã–∂–∏–π': 'red',
                        '–∫—Ä–∞—Å–Ω—ã–µ': 'red',
                        '–∫—Ä–∞—Å–Ω—ã–π': 'red',
                        '–∫—Ä–∞—Å–Ω': 'red',
                        '—Å–µ–¥—ã–µ': 'gray',
                        '—Å–µ–¥–æ–π': 'gray'
                    }
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∏–∑ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    color_value = 'black'  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∫–ª—é—á –∏–∑ —Å–ª–æ–≤–∞—Ä—è –≤ —Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    for russian_color, english_color in color_map.items():
                        if russian_color.lower() in text_input.lower():
                            color_value = english_color
                            break
                
                # –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Ü–≤–µ—Ç–∞
                custom_color = {'name': color_name, 'value': color_value}
                self.user_data[chat_id]['selected_color'] = custom_color
                
                # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                self.bot.send_message(chat_id, BOT_MESSAGES["color_length_received"])
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏—á–µ—Å–∫—É
                self.generate_hairstyle(chat_id)
            
            elif customization_state == 'selecting_length':
                # User is selecting hair length
                try:
                    # Parse length selection
                    length_index = int(message.text.strip()) - 1
                    hairstyle_index = self.user_data[chat_id]['selected_hairstyle_index']
                    hairstyle = self.user_data[chat_id]['hairstyle_objects'][hairstyle_index]
                    
                    # Check if selection is valid
                    if length_index < 0 or length_index >= len(hairstyle['lengths']):
                        self.bot.send_message(chat_id, BOT_MESSAGES["invalid_length"])
                        return
                    
                    # Store selected length
                    selected_length = hairstyle['lengths'][length_index]
                    self.user_data[chat_id]['selected_length'] = selected_length
                    
                    # Move to texture selection if available
                    if 'textures' in hairstyle and hairstyle['textures']:
                        self.user_data[chat_id]['customization_state'] = 'selecting_texture'
                        self.show_texture_options(chat_id)
                    else:
                        self.generate_hairstyle(chat_id)
                except ValueError:
                    self.bot.send_message(chat_id, BOT_MESSAGES["invalid_length"])
            
            elif customization_state == 'selecting_texture':
                # User is selecting hair texture
                try:
                    # Parse texture selection
                    texture_index = int(message.text.strip()) - 1
                    hairstyle_index = self.user_data[chat_id]['selected_hairstyle_index']
                    hairstyle = self.user_data[chat_id]['hairstyle_objects'][hairstyle_index]
                    
                    # Check if selection is valid
                    if texture_index < 0 or texture_index >= len(hairstyle['textures']):
                        self.bot.send_message(chat_id, BOT_MESSAGES["invalid_texture"])
                        return
                    
                    # Store selected texture
                    selected_texture = hairstyle['textures'][texture_index]
                    self.user_data[chat_id]['selected_texture'] = selected_texture
                    
                    # Generate final hairstyle
                    self.generate_hairstyle(chat_id)
                except ValueError:
                    self.bot.send_message(chat_id, BOT_MESSAGES["invalid_texture"])
        
        except Exception as e:
            logger.error(f"Error in hairstyle customization: {e}")
            self.bot.send_message(chat_id, BOT_MESSAGES["error"])
            # Reset customization state
            self.user_data[chat_id]['waiting_for_hairstyle_selection'] = False
            self.user_data[chat_id]['customization_state'] = 'selecting_style'
    
    def show_texture_options(self, chat_id):
        """Show available texture options for selected hairstyle"""
        hairstyle_index = self.user_data[chat_id]['selected_hairstyle_index']
        hairstyle = self.user_data[chat_id]['hairstyle_objects'][hairstyle_index]
        
        # Format texture options
        texture_options = hairstyle['textures']
        texture_text = [f"{i+1}. {texture['name']}" for i, texture in enumerate(texture_options)]
        
        # Send texture selection message
        self.bot.send_message(
            chat_id,
            f"{BOT_MESSAGES['select_texture']}\n\n" + 
            "\n".join(texture_text)
        )
    
    def generate_hairstyle(self, chat_id):
        """Generate the final hairstyle with all selected parameters"""
        # Reset waiting state
        self.user_data[chat_id]['waiting_for_hairstyle_selection'] = False
        self.user_data[chat_id]['customization_state'] = 'selecting_style'
        
        # Get all selections
        hairstyle_index = self.user_data[chat_id]['selected_hairstyle_index']
        hairstyle_name = self.user_data[chat_id]['selected_hairstyle_name']
        hairstyle = self.user_data[chat_id]['hairstyle_objects'][hairstyle_index]
        
        # Get selected customizations
        selected_color = self.user_data[chat_id].get('selected_color', None)
        selected_length = self.user_data[chat_id].get('selected_length', None)
        selected_texture = self.user_data[chat_id].get('selected_texture', None)
        
        # Build enhanced prompt with customizations
        enhanced_prompt = hairstyle.get('style', '')
        
        # Add instructions to focus only on hair first (–≤–∞–∂–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
        if "keep same face" not in enhanced_prompt:
            enhanced_prompt += ", keep same face, focus on hair only"
            
        # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∂–µ–ª–∞–µ–º–æ–π –ø—Ä–∏—á–µ—Å–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        # –ë—É–¥–µ–º –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≤–µ—Å—å –∑–∞–ø—Ä–æ—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        russian_prompt = ""
        if selected_color and selected_color['name']:
            russian_prompt += f"{selected_color['name']} "
        
        if selected_length and selected_length['name']:
            russian_prompt += f"{selected_length['name']} "
        
        if selected_texture and selected_texture['name']:
            russian_prompt += f"{selected_texture['name']} "
            
        russian_prompt += "–≤–æ–ª–æ—Å—ã"
        
        logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ä—É—Å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç: '{russian_prompt}'")
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤–µ—Å—å –∑–∞–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é DeepL API
        translated_prompt = self._translate_with_deepl(russian_prompt)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç DeepL: '{translated_prompt}'")
        
        if translated_prompt:
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω—ã–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
            # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
            import re
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            translated_prompt = translated_prompt.lower().strip()
            
            # –ó–∞–º–µ–Ω—è–µ–º —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏—è —Ç–∏–ø–∞ "hair color", "hair of color" –ø—Ä–æ—Å—Ç–æ –Ω–∞ "hair"
            translated_prompt = re.sub(r'hair\s+colou?r(\s+of)?', 'hair', translated_prompt)
            translated_prompt = re.sub(r'colou?r(\s+of)?\s+hair', 'hair', translated_prompt)
            
            logger.info(f"–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: '{translated_prompt}'")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –ø—Ä–æ–º–ø—Ç —É–∂–µ —Å–ª–æ–≤–æ 'hair'
            if 'hair' in enhanced_prompt:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∂–Ω—ã–µ —á–∞—Å—Ç–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
                focus_hair_match = re.search(r',?\s*keep same face,?\s*focus on hair only', enhanced_prompt)
                focus_hair_part = focus_hair_match.group(0) if focus_hair_match else ", keep same face, focus on hair only"
                
                # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–æ–ª–æ—Å–∞—Ö –Ω–∞ –Ω–∞—à –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
                enhanced_prompt = re.sub(r'hair.*?(,|$)', f"{translated_prompt}\\1", enhanced_prompt)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤–∞–∂–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–∏—Ü–∞
                if "keep same face" not in enhanced_prompt:
                    enhanced_prompt += focus_hair_part
            else:
                # –ï—Å–ª–∏ —Å–ª–æ–≤–∞ 'hair' –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –∫–æ–Ω–µ—Ü
                enhanced_prompt += f", {translated_prompt}, keep same face, focus on hair only"
                
            logger.info(f"–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å DeepL –ø–µ—Ä–µ–≤–æ–¥–æ–º: '{enhanced_prompt}'")
        else:
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç —á–µ—Ä–µ–∑ DeepL, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ª–æ–≥–∏–∫—É")
            
            # –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç –≤–æ–ª–æ—Å (–≤ –∫–æ–Ω—Ü–µ –ø—Ä–æ–º–ø—Ç–∞, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            if selected_color:
                color_value = selected_color['value']
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –ø—Ä–æ–º–ø—Ç —É–∂–µ —Å–ª–æ–≤–æ 'hair'
                if 'hair' in enhanced_prompt:
                    # –ó–∞–º–µ–Ω—è–µ–º —Å–ª–æ–≤–æ 'hair' –Ω–∞ '{color} hair'
                    enhanced_prompt = enhanced_prompt.replace('hair', f"{color_value} hair")
                else:
                    # –ï—Å–ª–∏ —Å–ª–æ–≤–∞ 'hair' –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç –≤ –∫–æ–Ω–µ—Ü
                    enhanced_prompt += f", {color_value} hair color"
            
            if selected_length:
                enhanced_prompt += f", {selected_length['value']}"
            
            if selected_texture:
                enhanced_prompt += f", {selected_texture['value']}"
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é
        customization_text = []
        if selected_color:
            customization_text.append(f"üé® –¶–≤–µ—Ç: {selected_color['name']}")
        if selected_length:
            customization_text.append(f"üìè –î–ª–∏–Ω–∞: {selected_length['name']}")
        if selected_texture:
            customization_text.append(f"üíÅ‚Äç‚ôÄÔ∏è –¢–µ–∫—Å—Ç—É—Ä–∞: {selected_texture['name']}")
            
        customization_info = "\n".join(customization_text) if customization_text else ""
        
        self.bot.send_message(
            chat_id, 
            f"{BOT_MESSAGES['hairstyle_generating']}\n"
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å: {hairstyle_name}\n"
            f"{customization_info}\n\n"
            f"–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 15 —Å–µ–∫—É–Ω–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
        )
        
        # Apply the hairstyle to the user's photo
        image_data = self.user_data[chat_id]['image_data']
        face_shape = self.user_data[chat_id]['face_shape']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä—ã –ª–∏—Ü–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –ï—Å–ª–∏ –Ω–µ—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ª–∏—Ü–∞ –∑–∞–Ω–æ–≤–æ –¥–ª—è –∏—Ö –ø–æ–ª—É—á–µ–Ω–∏—è
        if 'landmarks' not in self.user_data[chat_id] or not self.user_data[chat_id]['landmarks']:
            logger.info(f"Landmarks not found for user {chat_id}, analyzing face again")
            try:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–∏—Ü–æ –∑–∞–Ω–æ–≤–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è landmarks
                temp_face_shape, _, temp_measurements = self.face_analyzer.analyze_face_shape(image_data)
                # –ï—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º landmarks
                if hasattr(self.face_analyzer, 'landmarks') and self.face_analyzer.landmarks:
                    self.user_data[chat_id]['landmarks'] = self.face_analyzer.landmarks
                    logger.info(f"Successfully obtained landmarks for user {chat_id}")
                else:
                    logger.warning(f"Failed to obtain landmarks for user {chat_id}")
                    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ landmarks, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏
                    self.user_data[chat_id]['landmarks'] = None
            except Exception as e:
                logger.error(f"Error analyzing face to obtain landmarks: {e}")
                self.user_data[chat_id]['landmarks'] = None
                
        # –ü–æ–ª—É—á–∞–µ–º landmarks –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–≥—É—Ç –±—ã—Ç—å None)
        landmarks = self.user_data[chat_id].get('landmarks')
        
        logger.info(f"Applying hairstyle {hairstyle_name} for user {chat_id}")
        logger.info(f"Enhanced prompt: {enhanced_prompt}")
        
        # Process the hairstyle overlay with custom prompt if available
        try:
            # Create a custom hairstyle object with the enhanced prompt
            custom_style = {'prompt': enhanced_prompt, 'style': enhanced_prompt}
            
            # Get all hairstyles for this face shape
            # –ü–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä gender, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            gender = self.user_data[chat_id].get('selected_gender')
            all_hairstyles = self.face_analyzer.get_available_hairstyles(face_shape, gender)
            
            # Store original function for restoration later
            original_get_prompts = None
            if hasattr(self.face_analyzer, 'lightx_client') and self.face_analyzer.lightx_client:
                original_get_prompts = self.face_analyzer.lightx_client.get_hairstyle_prompts_by_face_shape
            
            try:
                # Replace the selected hairstyle with our custom one
                if hairstyle_index < len(all_hairstyles):
                    temp_hairstyles = all_hairstyles.copy()
                    temp_hairstyles[hairstyle_index] = custom_style
                    
                    # Temporarily modify the hairstyles in LightX client if needed
                    if original_get_prompts:
                        # Create a temporary override
                        def temp_get_prompts(face_shape_param, gender_param=None):
                            if face_shape_param == face_shape:
                                return temp_hairstyles
                            return original_get_prompts(face_shape_param, gender_param)
                        
                        # Apply the temporary override
                        self.face_analyzer.lightx_client.get_hairstyle_prompts_by_face_shape = temp_get_prompts
                
                # Process the hairstyle overlay
                result_image_bytes = self.face_analyzer.apply_hairstyle(
                    image_data, landmarks, face_shape, hairstyle_index
                )
                
            finally:
                # Restore original method if it was overridden (in finally to ensure it runs)
                if original_get_prompts and hasattr(self.face_analyzer, 'lightx_client') and self.face_analyzer.lightx_client:
                    self.face_analyzer.lightx_client.get_hairstyle_prompts_by_face_shape = original_get_prompts
            
            if not result_image_bytes:
                logger.error(f"Failed to generate hairstyle for user {chat_id}")
                self.bot.send_message(chat_id, BOT_MESSAGES["error"])
                return
            
            # –°–ø–∏—Å—ã–≤–∞–µ–º –∫—Ä–µ–¥–∏—Ç—ã –∑–∞ —É—Å–ø–µ—à–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–∏—á–µ—Å–∫–∏ (2 –∫—Ä–µ–¥–∏—Ç–∞)
            use_credit(chat_id, "virtual_hairstyle", 2)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤
            credits = get_user_credits(chat_id)
            
            # Send the result image
            result_image_io = io.BytesIO(result_image_bytes)
            result_image_io.name = 'hairstyle_preview.jpg'
            
            # Format caption with customizations
            caption_text = [
                f"‚ú® {BOT_MESSAGES['hairstyle_applied']}",
                f"üîÆ –ü—Ä–∏—á–µ—Å–∫–∞: {hairstyle_name}",
                f"üí≥ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ 2 –∫—Ä–µ–¥–∏—Ç–∞. –û—Å—Ç–∞–ª–æ—Å—å: {credits} –∫—Ä–µ–¥–∏—Ç–æ–≤"
            ]
            
            if customization_text:
                caption_text.append("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏:")
                caption_text.extend(customization_text)
                
            caption_text.append(f"ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é LightX AI")
            
            # Send the visualization image with applied hairstyle
            self.bot.send_photo(
                chat_id,
                result_image_io,
                caption="\n".join(caption_text)
            )
            
        except Exception as e:
            logger.error(f"Error generating hairstyle: {e}")
            self.bot.send_message(chat_id, BOT_MESSAGES["error"])
    
    # –§—É–Ω–∫—Ü–∏—è retouch_photo_command —É–¥–∞–ª–µ–Ω–∞
    
    def change_background_command(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞ (—Ñ—É–Ω–∫—Ü–∏—è 5)"""
        chat_id = message.chat.id
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        logger.info(f"–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è change_background_command –¥–ª—è chat_id {chat_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞
        is_color_selection = False
        if hasattr(message, 'text'):
            color_choice = message.text.strip().lower()
            if color_choice in ["–±–µ–ª—ã–π", "—á–µ—Ä–Ω—ã–π", "–∑–µ–ª–µ–Ω—ã–π", "white", "black", "green"]:
                is_color_selection = True
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞: {color_choice} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")

        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ü–≤–µ—Ç –∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞
        if is_color_selection and chat_id in self.user_data and 'image_data' in self.user_data[chat_id]:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π HEX-–∫–æ–¥ –¥–ª—è —Ü–≤–µ—Ç–∞
            color_mapping = {
                "–±–µ–ª—ã–π": "#FFFFFF",
                "—á–µ—Ä–Ω—ã–π": "#000000",
                "–∑–µ–ª–µ–Ω—ã–π": "#00FF00", 
                "white": "#FFFFFF",
                "black": "#000000",
                "green": "#00FF00",
            }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –ø–æ —Ç–µ–∫—Å—Ç—É
            if color_choice in color_mapping:
                color_hex = color_mapping[color_choice]
                color_name = color_choice
            else:
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–ª—ã–π
                color_hex = "#FFFFFF" 
                color_name = "–±–µ–ª—ã–π"
                
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_message = self.bot.send_message(chat_id, f"ü§ñ –ó–∞–ø—É—Å–∫–∞—é –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞ –∏ –∑–∞–º–µ–Ω—ã –Ω–∞ {color_name} —Ü–≤–µ—Ç... –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
            
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º HEX-–∫–æ–¥ —Ü–≤–µ—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
                english_prompt = color_hex
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                image_data = self.user_data[chat_id]['image_data']
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–º–µ–Ω—É —Ñ–æ–Ω–∞ —Å –ø–æ–º–æ—â—å—é LightX API
                logger.info(f"–ü—Ä–∏–º–µ–Ω—è—é –Ω–æ–≤—ã–π —Ñ–æ–Ω —Å —Ü–≤–µ—Ç–æ–º: '{english_prompt}'")
                
                # –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è —Å–º–µ–Ω—ã —Ñ–æ–Ω–∞
                background_changed_image = self.lightx_client.change_background(
                    image_data, 
                    english_prompt,
                    style_image_data=None
                )
                
                if background_changed_image:
                    # –°–æ–∑–¥–∞–µ–º BytesIO –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                    result_io = io.BytesIO(background_changed_image)
                    result_io.name = 'background_changed.jpg'
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞
                    caption = f"‚ú® –í–∞—à–µ —Ñ–æ—Ç–æ —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º —Ñ–æ–Ω–æ–º, –∑–∞–º–µ–Ω–µ–Ω–Ω—ã–º –Ω–∞ {color_name} —Ü–≤–µ—Ç!"
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –Ω–æ–≤—ã–º —Ñ–æ–Ω–æ–º
                    self.bot.send_photo(
                        chat_id,
                        result_io,
                        caption=caption
                    )
                    # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    self._reset_all_waiting_states(chat_id)
                    return
                else:
                    self.bot.send_message(chat_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    return
            
            except Exception as e:
                logger.error(f"Error in background change: {e}")
                self.bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if chat_id not in self.user_data:
            self.user_data[chat_id] = {}
            
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LightX, –µ—Å–ª–∏ –æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        if not hasattr(self, 'lightx_available') or not self.lightx_available:
            logger.info("LightX –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è —Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å...")
            try:
                # –ü—Ä–æ–±—É–µ–º –∑–∞–Ω–æ–≤–æ —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç LightX
                if not hasattr(self, 'lightx_client') or self.lightx_client is None:
                    self.lightx_client = LightXClient()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á
                test_result = self.lightx_client.key_manager.test_current_key()
                if test_result:
                    self.lightx_available = True
                    logger.info("LightX API —É—Å–ø–µ—à–Ω–æ —Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
                else:
                    self.lightx_available = False
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å LightX API - —Ç–µ—Å—Ç –∫–ª—é—á–∞ –Ω–µ –ø—Ä–æ—à–µ–ª")
            except Exception as e:
                self.lightx_available = False
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LightX API: {e}")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LightX API
        logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ LightX API: lightx_available={self.lightx_available}")
        if not self.lightx_available:
            self.bot.send_message(chat_id, "–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            logger.warning(f"–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: lightx_available=False")
            return
            
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫–∞–∫ —Å–º–µ–Ω–∞ —Ñ–æ–Ω–∞ (–¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ)
        self.user_data[chat_id]['current_feature'] = "5"
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞
        if not is_color_selection:
            self._reset_all_waiting_states(chat_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if 'image_data' not in self.user_data[chat_id]:
            # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ
            feature_info = [
                "üé® **–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞**",
                "",
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.",
                "",
                "üì∏ **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ç–æ:**",
                "‚Ä¢ –ß–µ—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
                "‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ",
                "‚Ä¢ –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ –æ–¥–Ω–æ—Ä–æ–¥–Ω—ã–π —Ñ–æ–Ω",
                "",
                "–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ —è –ø–æ–º–æ–≥—É –≤–∞–º —É–¥–∞–ª–∏—Ç—å —Ñ–æ–Ω –∏ –∑–∞–º–µ–Ω–∏—Ç—å –µ–≥–æ –Ω–∞ –¥—Ä—É–≥–æ–π —Ü–≤–µ—Ç –∏–ª–∏ —Ñ–æ–Ω."
            ]
            
            self.bot.send_message(chat_id, "\n".join(feature_info))
            return
        
        # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∏–ª—è –∏ —ç—Ç–æ —Ñ–æ—Ç–æ (—ç—Ç–æ—Ç –±–ª–æ–∫ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        if self.user_data[chat_id].get('waiting_for_style_image') and hasattr(message, 'photo') and message.photo:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Å—Ç–∏–ª—è
            photos = message.photo
            photo = photos[-1]  # –°–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ —Å—Ç–∏–ª—è
            try:
                file_info = self.bot.get_file(photo.file_id)
                style_image_data = self.bot.download_file(file_info.file_path)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∏–ª—è
                self.user_data[chat_id]['style_image_data'] = style_image_data
                self.user_data[chat_id]['waiting_for_style_image'] = False
                self.user_data[chat_id]['use_style_image'] = True
                self.user_data[chat_id]['waiting_for_background_prompt'] = True
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                self.bot.send_message(chat_id, "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∏–ª—è –ø–æ–ª—É—á–µ–Ω–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Ñ–æ–Ω.")
                
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ–Ω–∞
                self._request_background_prompt(chat_id)
                
            except Exception as e:
                logger.error(f"Error downloading style image: {e}")
                self.bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
            
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        elif self.user_data[chat_id].get('waiting_for_background_prompt'):
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è, –±–µ–∑ "—Ñ–æ–Ω"
            color_text = message.text.strip()
            color_choice = color_text.lower()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ü–≤–µ—Ç: '{color_text}'")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ü–≤–µ—Ç–æ–≤
            if 'color_mapping' not in self.user_data[chat_id]:
                self.bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ü–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è —Ü–≤–µ—Ç–æ–≤
            color_mapping = self.user_data[chat_id]['color_mapping']
            
            # –ü—Ä—è–º–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–≤–µ—Ç–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ
            if color_choice in color_mapping:
                # –¶–≤–µ—Ç –Ω–∞–π–¥–µ–Ω –Ω–∞–ø—Ä—è–º—É—é - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ HEX –∫–æ–¥
                color_hex = color_mapping[color_choice]
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞: '{color_choice}', –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞–ø—Ä—è–º—É—é")
            else:
                # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ—Ö–æ–∂–∏–µ
                found = False
                for key in ["–±–µ–ª—ã–π", "—á–µ—Ä–Ω—ã–π", "–∑–µ–ª–µ–Ω—ã–π", "–±–µ–ª—ã–π —Ñ–æ–Ω", "—á–µ—Ä–Ω—ã–π —Ñ–æ–Ω", "–∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω"]:
                    if key in color_choice or color_choice in key:
                        color_choice = key
                        found = True
                        break
                
                if found:
                    color_hex = color_mapping[color_choice]
                    logger.info(f"–ù–∞—à–ª–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è '{message.text.strip()}' -> '{color_choice}'")
                else:
                    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    color_choice = "–±–µ–ª—ã–π —Ñ–æ–Ω"
                    color_hex = color_mapping[color_choice]
                    logger.info(f"–ù–µ –Ω–∞—à–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è '{message.text.strip()}', –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                    self.bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
                    
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if "–±–µ–ª—ã–π" in color_choice:
                color_name = "–±–µ–ª—ã–π"
            elif "—á–µ—Ä–Ω—ã–π" in color_choice:
                color_name = "—á–µ—Ä–Ω—ã–π"
            elif "–∑–µ–ª–µ–Ω—ã–π" in color_choice:
                color_name = "–∑–µ–ª–µ–Ω—ã–π"
            else:
                color_name = "–≤—ã–±—Ä–∞–Ω–Ω—ã–π"
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
            self.user_data[chat_id]['waiting_for_background_prompt'] = False
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_message = self.bot.send_message(chat_id, f"ü§ñ –ó–∞–ø—É—Å–∫–∞—é –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞ –∏ –∑–∞–º–µ–Ω—ã –Ω–∞ {color_name} —Ü–≤–µ—Ç... –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
            
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º HEX-–∫–æ–¥ —Ü–≤–µ—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞
                background_prompt = color_hex
                english_prompt = background_prompt
                
                logger.info(f"–í—ã–±—Ä–∞–Ω —Ü–≤–µ—Ç —Ñ–æ–Ω–∞: {color_name} ({background_prompt})")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ü–≤–µ—Ç–µ
                translation_info = f"‚úì –í—ã–±—Ä–∞–Ω {color_name} —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ ({background_prompt})"
                self.bot.send_message(chat_id, translation_info)
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                image_data = self.user_data[chat_id]['image_data']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–∏ –º—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∏–ª—è
                use_style_image = self.user_data[chat_id].get('use_style_image', False)
                style_image_data = self.user_data[chat_id].get('style_image_data', None) if use_style_image else None
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–º–µ–Ω—É —Ñ–æ–Ω–∞ —Å –ø–æ–º–æ—â—å—é LightX API
                logger.info(f"–ü—Ä–∏–º–µ–Ω—è—é –Ω–æ–≤—ã–π —Ñ–æ–Ω —Å –ø—Ä–æ–º–ø—Ç–æ–º: '{english_prompt}', –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–∏–ª—è: {use_style_image}")
                
                # –í—ã–∑—ã–≤–∞–µ–º API —Å —É—á–µ—Ç–æ–º –Ω–∞–ª–∏—á–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∏–ª—è
                logger.info(f"–í—ã–∑—ã–≤–∞–µ–º LightX API –º–µ—Ç–æ–¥ change_background —Å –ø—Ä–æ–º–ø—Ç–æ–º: '{english_prompt}'")
                background_changed_image = self.lightx_client.change_background(
                    image_data, 
                    english_prompt,
                    style_image_data
                )
                logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–∑–æ–≤–∞ change_background: {'–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' if background_changed_image else '–û—à–∏–±–∫–∞, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ'}")
                
                if background_changed_image:
                    # –°–æ–∑–¥–∞–µ–º BytesIO –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                    result_io = io.BytesIO(background_changed_image)
                    result_io.name = 'background_changed.jpg'
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å —Å —É—á–µ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ç–∏–ª—è
                    style_text = " –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω —Å—Ç–∏–ª—å –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" if use_style_image else ""
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ background_prompt - —ç—Ç–æ HEX-–∫–æ–¥
                    if background_prompt.startswith('#'):
                        # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞
                        color_found = False
                        color_name = "–≤—ã–±—Ä–∞–Ω–Ω—ã–π"
                        for choice, hex_code in self.user_data[chat_id]['color_mapping'].items():
                            if hex_code == background_prompt:
                                color_names = {
                                    "1": "–±–µ–ª—ã–π",
                                    "2": "—á–µ—Ä–Ω—ã–π",
                                    "3": "–∑–µ–ª–µ–Ω—ã–π",
                                    "4": "—Å–∏–Ω–∏–π",
                                    "5": "–∫—Ä–∞—Å–Ω—ã–π",
                                    "6": "–∂–µ–ª—Ç—ã–π"
                                }
                                color_name = color_names.get(choice, "–≤—ã–±—Ä–∞–Ω–Ω—ã–π")
                                color_found = True
                                break
                        
                        if color_found:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞ –≤–º–µ—Å—Ç–æ HEX-–∫–æ–¥–∞
                            caption = f"‚ú® –í–∞—à–µ —Ñ–æ—Ç–æ —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º —Ñ–æ–Ω–æ–º, –∑–∞–º–µ–Ω–µ–Ω–Ω—ã–º –Ω–∞ {color_name} —Ü–≤–µ—Ç{style_text}!"
                        else:
                            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º HEX-–∫–æ–¥
                            caption = f"‚ú® –í–∞—à–µ —Ñ–æ—Ç–æ —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º —Ñ–æ–Ω–æ–º, –∑–∞–º–µ–Ω–µ–Ω–Ω—ã–º –Ω–∞ '{background_prompt}'{style_text}!"
                    else:
                        # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–ø–∏—Å–∞–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                        caption = f"‚ú® –í–∞—à–µ —Ñ–æ—Ç–æ —Å —É–¥–∞–ª–µ–Ω–Ω—ã–º —Ñ–æ–Ω–æ–º, –∑–∞–º–µ–Ω–µ–Ω–Ω—ã–º –Ω–∞ '{background_prompt}'{style_text}!"
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –Ω–æ–≤—ã–º —Ñ–æ–Ω–æ–º
                    self.bot.send_photo(
                        chat_id,
                        result_io,
                        caption=caption
                    )
                else:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ API –∫–ª—é—á LightX
                    if not self.lightx_client.api_key:
                        error_message = [
                            "‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω API –∫–ª—é—á LightX!",
                            "",
                            "–î–ª—è —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–µ–π—Å—Ç–≤—É—é—â–∏–π API –∫–ª—é—á LightX.",
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–∞."
                        ]
                        self.bot.send_message(chat_id, "\n".join(error_message))
                    else:
                        self.bot.send_message(chat_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ–Ω–∞ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
            
            except Exception as e:
                logger.error(f"Error in background change: {e}")
                self.bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            # –í–º–µ—Å—Ç–æ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞
            self.user_data[chat_id]['waiting_for_background_prompt'] = True
            self.user_data[chat_id]['use_style_image'] = False
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞
            self._request_background_prompt(chat_id)
    
    def _request_background_prompt(self, chat_id):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞"""
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç—Ä–µ–º—è –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É)
        keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        keyboard.row("–ë–µ–ª—ã–π", "–ß–µ—Ä–Ω—ã–π")
        keyboard.row("–ó–µ–ª–µ–Ω—ã–π")
        
        prompt_message = "üé® –í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ:"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Ü–≤–µ—Ç–∞–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if chat_id not in self.user_data:
            self.user_data[chat_id] = {}
            
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ–º–µ—Ä–æ–≤ –∏ –Ω–∞–∑–≤–∞–Ω–∏–π HEX-–∫–æ–¥–∞–º
        color_mapping = {
            "1": "#FFFFFF",  # –ë–µ–ª—ã–π
            "2": "#000000",  # –ß–µ—Ä–Ω—ã–π
            "3": "#00FF00",  # –ó–µ–ª–µ–Ω—ã–π
            "–±–µ–ª—ã–π": "#FFFFFF",
            "—á–µ—Ä–Ω—ã–π": "#000000",
            "–∑–µ–ª–µ–Ω—ã–π": "#00FF00", 
            "–±–µ–ª—ã–π —Ñ–æ–Ω": "#FFFFFF",
            "—á–µ—Ä–Ω—ã–π —Ñ–æ–Ω": "#000000",
            "–∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω": "#00FF00",
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
            "–ë–µ–ª—ã–π": "#FFFFFF",
            "–ß–µ—Ä–Ω—ã–π": "#000000",
            "–ó–µ–ª–µ–Ω—ã–π": "#00FF00",
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞
        self.user_data[chat_id]['color_mapping'] = color_mapping
        
        self.bot.send_message(chat_id, prompt_message, reply_markup=keyboard)
    
    # –§—É–Ω–∫—Ü–∏—è generate_portrait_command —É–¥–∞–ª–µ–Ω–∞
    
    def ai_replace_command(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∑–∞–º–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é AI Replace (—Ñ—É–Ω–∫—Ü–∏—è 6)"""
        chat_id = message.chat.id
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        logger.info(f"–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è ai_replace_command –¥–ª—è chat_id {chat_id}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if chat_id not in self.user_data:
            self.user_data[chat_id] = {}
        
        # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LightX, –µ—Å–ª–∏ –æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        if not hasattr(self, 'lightx_available') or not self.lightx_available:
            logger.info("LightX –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è —Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å...")
            try:
                # –ü—Ä–æ–±—É–µ–º –∑–∞–Ω–æ–≤–æ —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç LightX
                if not hasattr(self, 'lightx_client') or self.lightx_client is None:
                    self.lightx_client = LightXClient()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á
                test_result = self.lightx_client.key_manager.test_current_key()
                if test_result:
                    self.lightx_available = True
                    logger.info("LightX API —É—Å–ø–µ—à–Ω–æ —Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
                else:
                    self.lightx_available = False
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å LightX API - —Ç–µ—Å—Ç –∫–ª—é—á–∞ –Ω–µ –ø—Ä–æ—à–µ–ª")
            except Exception as e:
                self.lightx_available = False
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LightX API: {e}")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LightX API
        logger.info(f"–ó–∞–º–µ–Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ LightX API: lightx_available={self.lightx_available}")
        if not self.lightx_available:
            self.bot.send_message(chat_id, "–§—É–Ω–∫—Ü–∏—è –∑–∞–º–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            logger.warning(f"–§—É–Ω–∫—Ü–∏—è –∑–∞–º–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: lightx_available=False")
            return
            
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫–∞–∫ –∑–∞–º–µ–Ω—É —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ)
        self.user_data[chat_id]['current_feature'] = "6"
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
        self._reset_all_waiting_states(chat_id)
        
        # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if 'image_data' in self.user_data[chat_id]:
            logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} —É–∂–µ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è –∑–∞–º–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ñ–æ—Ç–æ
            self.user_data[chat_id]['waiting_for_object_removal'] = True
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ
            self.bot.send_message(
                chat_id, 
                "‚úì –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–º–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤.\n\n"
                "ü§ñ –ó–∞–ø—É—Å–∫–∞—é –Ω–µ–π—Ä–æ—Å–µ—Ç—å AI Replace –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è... –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
            )
            
            # –¢–µ–ø–µ—Ä—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∑–∞–º–µ–Ω—ã —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
            replace_instructions = [
                "‚úèÔ∏è **–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏:**",
                "",
                "**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –Ω–∞–∏–ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:**",
                "‚Ä¢ –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã: —É–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω–æ, —á—Ç–æ –∑–∞–º–µ–Ω–∏—Ç—å –∏ –Ω–∞ —á—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–ó–∞–º–µ–Ω–∏—Ç–µ –∫—Ä–∞—Å–Ω—É—é –º–∞—à–∏–Ω—É –Ω–∞ —Å–∏–Ω–∏–π –º–æ—Ç–æ—Ü–∏–∫–ª¬ª)",
                "‚Ä¢ –î–ª—è –∑–∞–º–µ–Ω—ã —Ñ–æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–æ–≤–æ ¬´—Ñ–æ–Ω¬ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–ó–∞–º–µ–Ω–∏—Ç–µ —Ñ–æ–Ω –Ω–∞ –º–æ—Ä—Å–∫–æ–π –ø–µ–π–∑–∞–∂¬ª)",
                "‚Ä¢ –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –æ–±—ä–µ–∫—Ç, —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–ó–∞–º–µ–Ω–∏—Ç–µ –æ–±—ä–µ–∫—Ç –≤ —Ü–µ–Ω—Ç—Ä–µ –Ω–∞ –≤–∞–∑—É —Å —Ü–≤–µ—Ç–∞–º–∏¬ª)",
                "‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ –¥–µ—Ç–∞–ª–∏: —Ü–≤–µ—Ç, —Å—Ç–∏–ª—å, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´...–Ω–∞ —è—Ä–∫—É—é, —Å–æ–ª–Ω–µ—á–Ω—É—é –ø–ª—è–∂–Ω—É—é —Å—Ü–µ–Ω—É¬ª)",
                "",
                "–ë–æ—Ç —Å–∞–º —Å–æ–∑–¥–∞—Å—Ç –º–∞—Å–∫—É –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ª—É—á—à–∏—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."
            ]
            
            self.bot.send_message(
                chat_id,
                "\n".join(replace_instructions)
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            self.user_data[chat_id]['waiting_for_replace_prompt'] = True
            return
            
        # –ò–Ω–∞—á–µ –ø—Ä–æ—Å–∏–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ LightX API
        feature_info = [
            "ü™Ñ **–ó–∞–º–µ–Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏**",
            "",
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç LightX Replace API –¥–ª—è –∑–∞–º–µ–Ω—ã –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –∏ —Ñ–æ–Ω–∞ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.",
            "",
            "üì∏ **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ç–æ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:**",
            "‚Ä¢ –í—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–µ –º–µ–Ω–µ–µ 1080p)",
            "‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á—ë—Ç–∫–∏–º, –Ω–µ —Ä–∞–∑–º—ã—Ç—ã–º",
            "‚Ä¢ –•–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤",
            "‚Ä¢ –û–±—ä–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å, –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω—ã",
            "",
            "‚úèÔ∏è **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –∑–∞–ø—Ä–æ—Å–∞:**",
            "‚Ä¢ –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –∏ –¥–µ—Ç–∞–ª—å–Ω—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ (–ø—Ä–∏–º–µ—Ä: ¬´–ó–∞–º–µ–Ω–∏—Ç–µ –±—É—Ç—ã–ª–∫—É –Ω–∞ —Å—Ç–æ–ª–µ –Ω–∞ –±–µ–ª—É—é —á–∞—à–∫—É¬ª)",
            "‚Ä¢ –î–ª—è –∑–∞–º–µ–Ω—ã —Ñ–æ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–æ–≤–æ ¬´—Ñ–æ–Ω¬ª –≤ –∑–∞–ø—Ä–æ—Å–µ (–ø—Ä–∏–º–µ—Ä: ¬´–ó–∞–º–µ–Ω–∏—Ç–µ —Ñ–æ–Ω –Ω–∞ –ø–ª—è–∂ —Å –≥–æ–ª—É–±—ã–º –æ–∫–µ–∞–Ω–æ–º¬ª)",
            "‚Ä¢ –î–ª—è –∑–∞–º–µ–Ω—ã –æ–±—ä–µ–∫—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–ø—Ä–∏–º–µ—Ä: ¬´–ó–∞–º–µ–Ω–∏—Ç–µ –æ–±—ä–µ–∫—Ç –≤ —Ü–µ–Ω—Ç—Ä–µ –Ω–∞ –∫—Ä–∞—Å–Ω—É—é —Ä–æ–∑—É¬ª)",
            "‚Ä¢ –ü–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ",
            "",
            "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç –º–∞—Å–∫—É –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∞–∏–ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞."
        ]
        
        self.bot.send_message(chat_id, "\n".join(feature_info))
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–º–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.user_data[chat_id]['waiting_for_replace_prompt'] = False  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω, –≤–∫–ª—é—á–∏—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
        self.user_data[chat_id]['current_feature'] = "6"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
    
    # –§—É–Ω–∫—Ü–∏—è change_emotions_command —É–¥–∞–ª–µ–Ω–∞
    
    def generate_from_text_command(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É (—Ñ—É–Ω–∫—Ü–∏—è 7)"""
        chat_id = message.chat.id
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏
        logger.info(f"–í—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è generate_from_text_command –¥–ª—è chat_id {chat_id}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if chat_id not in self.user_data:
            self.user_data[chat_id] = {}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º —É–∂–µ –Ω–∞—á–∞—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        is_text_prompt = False
        if 'waiting_for_text_prompt' in self.user_data[chat_id] and self.user_data[chat_id]['waiting_for_text_prompt']:
            # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–º (–∞ –Ω–µ –∫–æ–º–∞–Ω–¥–æ–π –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º)
            if hasattr(message, 'text') and not message.text.startswith('/') and not message.text.isdigit():
                is_text_prompt = True
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: '{message.text}'")
        
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å
        if not is_text_prompt:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫–∞–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É
            self.user_data[chat_id]['current_feature'] = "7"
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
            self._reset_all_waiting_states(chat_id)
            
            # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LightX, –µ—Å–ª–∏ –æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            if not hasattr(self, 'lightx_available') or not self.lightx_available:
                logger.info("LightX –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è —Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å...")
                try:
                    # –ü—Ä–æ–±—É–µ–º –∑–∞–Ω–æ–≤–æ —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç LightX
                    if not hasattr(self, 'lightx_client') or self.lightx_client is None:
                        self.lightx_client = LightXClient()
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á
                    test_result = self.lightx_client.key_manager.test_current_key()
                    if test_result:
                        self.lightx_available = True
                        logger.info("LightX API —É—Å–ø–µ—à–Ω–æ —Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
                    else:
                        self.lightx_available = False
                        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å LightX API - —Ç–µ—Å—Ç –∫–ª—é—á–∞ –Ω–µ –ø—Ä–æ—à–µ–ª")
                except Exception as e:
                    self.lightx_available = False
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LightX API: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å LightX API
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ LightX API: lightx_available={self.lightx_available}")
            if not self.lightx_available:
                self.bot.send_message(chat_id, "–§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                logger.warning(f"–§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: lightx_available=False")
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        if is_text_prompt:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            text_prompt = message.text.strip()
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
            self.user_data[chat_id]['waiting_for_text_prompt'] = False
            
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç: '{text_prompt}'")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_message = self.bot.send_message(chat_id, f"ü§ñ –ó–∞–ø—É—Å–∫–∞—é –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É '{text_prompt}'... –≠—Ç–æ –∑–∞–π–º–µ—Ç 10-20 —Å–µ–∫—É–Ω–¥.")
            
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –æ–ø–æ—Ä–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                reference_image = None
                if 'image_data' in self.user_data[chat_id]:
                    reference_image = self.user_data[chat_id]['image_data']
                
                logger.info(f"–ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ–≤–æ–¥ —Ä—É—Å—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: '{text_prompt}'")
                
                # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è LightX API —á–µ—Ä–µ–∑ DeepL
                english_prompt = self._translate_prompt_to_english(text_prompt)
                
                logger.info(f"–ü–µ—Ä–µ–≤–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω! –†—É—Å—Å–∫–∏–π: '{text_prompt}' -> –ê–Ω–≥–ª–∏–π—Å–∫–∏–π: '{english_prompt}'")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–≤–æ–¥–µ
                translation_info = f"‚úì –ó–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π: \"{english_prompt}\""
                self.bot.send_message(chat_id, translation_info)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é LightX API
                logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–æ–º–ø—Ç–æ–º: '{english_prompt}'")
                
                try:
                    # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—ã–∑–æ–≤ API –≤ try-except –¥–ª—è –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
                    result_image = self.lightx_client.generate_from_text(english_prompt, reference_image)
                    
                    if result_image:
                        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º io –∑–¥–µ—Å—å –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –æ—à–∏–±–æ–∫
                        import io
                        # –°–æ–∑–¥–∞–µ–º BytesIO –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                        result_io = io.BytesIO(result_image)
                        result_io.name = 'generated_image.jpg'
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        self.bot.send_photo(
                            chat_id,
                            result_io,
                            caption=f"‚ú® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É: '{text_prompt}'"
                        )
                        
                        # –û–ø—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –µ—â–µ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        self.bot.send_message(chat_id, "üîÑ –•–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ? –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é 7 —Å–Ω–æ–≤–∞.")
                    else:
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è API –∫—Ä–µ–¥–∏—Ç–æ–≤
                        self.bot.send_message(chat_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –∏—Å—á–µ—Ä–ø–∞–Ω—ã –∫—Ä–µ–¥–∏—Ç—ã API –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è chat_id {chat_id}. API –≤–µ—Ä–Ω—É–ª None.")
                except Exception as api_error:
                    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤ API
                    error_message = str(api_error)
                    logger.error(f"API –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {error_message}")
                    
                    if "API_CREDITS_CONSUMED" in error_message or "credits" in error_message.lower():
                        self.bot.send_message(chat_id, "‚ö†Ô∏è –ò—Å—á–µ—Ä–ø–∞–Ω—ã –∫—Ä–µ–¥–∏—Ç—ã API LightX. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                    else:
                        self.bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {error_message}")
                    
                    # –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ API
            
            except Exception as e:
                logger.error(f"Error in text-to-image generation: {e}")
                self.bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        else:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            self.user_data[chat_id]['waiting_for_text_prompt'] = True
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
            has_reference = 'image_data' in self.user_data[chat_id]
            
            prompt_message = [
                "üé® **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É**",
                ""
            ]
            
            if has_reference:
                prompt_message.extend([
                    "–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ! –û–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∫–∞–∫ —Å—Ç–∏–ª–µ–≤–∞—è —Ä–µ—Ñ–µ—Ä–µ–Ω—Å.",
                    "–í–∞—à —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ —Å—Ç–∏–ª—é –∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.",
                    ""
                ])
            
            prompt_message.extend([
                "–û–ø–∏—à–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Å–æ–∑–¥–∞—Ç—å:",
                "",
                "–ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:",
                "‚Ä¢ –§–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–µ–π–∑–∞–∂ —Å –≤–æ–¥–æ–ø–∞–¥–∞–º–∏ –∏ –ø–∞—Ä—è—â–∏–º–∏ –æ—Å—Ç—Ä–æ–≤–∞–º–∏",
                "‚Ä¢ –°–æ–ª–Ω–µ—á–Ω–æ–µ —É—Ç—Ä–æ –≤ —è–ø–æ–Ω—Å–∫–æ–º —Å–∞–¥—É —Å —Ü–≤–µ—Ç—É—â–µ–π —Å–∞–∫—É—Ä–æ–π",
                "‚Ä¢ –§—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –≥–æ—Ä–æ–¥ —Å –ª–µ—Ç–∞—é—â–∏–º–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏ –≤ –Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è",
                "‚Ä¢ –ü–æ—Ä—Ç—Ä–µ—Ç –¥–µ–≤—É—à–∫–∏ –≤ —Å—Ç–∏–ª–µ –∞–Ω–∏–º–µ —Å –≥–æ–ª—É–±—ã–º–∏ –≤–æ–ª–æ—Å–∞–º–∏",
                "",
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:"
            ])
            
            self.bot.send_message(chat_id, "\n".join(prompt_message))
            
    def beauty_command(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ª–∏—Ü–∞"""
        chat_id = message.chat.id
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫–∞–∫ –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (4)
        if chat_id not in self.user_data:
            self.user_data[chat_id] = {}
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏
        if 'image_data' in self.user_data[chat_id]:
            logger.info(f"–°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id} –ø—Ä–∏ –≤—ã–∑–æ–≤–µ beauty_command")
            self.user_data[chat_id].pop('image_data', None)

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
        self._reset_all_waiting_states(chat_id)
            
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ç–µ–∫—É—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.user_data[chat_id]['current_feature'] = "4"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        beauty_info = [
            "‚ú® **–ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ª–∏—Ü–∞**",
            "",
            "–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞—à–µ–≥–æ –ª–∏—Ü–∞:",
            "‚Ä¢ –°–∏–º–º–µ—Ç—Ä–∏—é –ª–µ–≤–æ–π –∏ –ø—Ä–∞–≤–æ–π —Å—Ç–æ—Ä–æ–Ω",
            "‚Ä¢ –ü—Ä–æ–ø–æ—Ä—Ü–∏–∏ –ø–æ –∑–æ–ª–æ—Ç–æ–º—É —Å–µ—á–µ–Ω–∏—é",
            "‚Ä¢ –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —á–µ—Ä—Ç –ª–∏—Ü–∞",
            "",
            "üì∏ **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ç–æ:**",
            "‚Ä¢ –ß—ë—Ç–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ–≥–æ –ª–∏—Ü–∞",
            "‚Ä¢ –ü—Ä—è–º–æ–π —Ä–∞–∫—É—Ä—Å –±–µ–∑ –Ω–∞–∫–ª–æ–Ω–∞ –≥–æ–ª–æ–≤—ã",
            "‚Ä¢ –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –ª–∏—Ü–∞",
            "‚Ä¢ –•–æ—Ä–æ—à–µ–µ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ",
            "",
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
        ]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        self.bot.send_message(chat_id, "\n".join(beauty_info))
            
    def video_command(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ —Å –ª–∏—Ü–æ–º"""
        chat_id = message.chat.id
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if chat_id not in self.user_data:
            self.user_data[chat_id] = {}
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫–∞–∫ –∞–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ —Å –ª–∏—Ü–æ–º
        self.user_data[chat_id]['current_feature'] = "video"
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è
        self._reset_all_waiting_states(chat_id)
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if 'video_analysis_results' in self.user_data[chat_id]:
            del self.user_data[chat_id]['video_analysis_results']
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        instructions = [
            "üìπ **–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª–∏—Ü–∞ –ø–æ –≤–∏–¥–µ–æ**",
            "",
            "–≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ª–∏—Ü–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∏–¥–µ–æ–∑–∞–ø–∏—Å–∏:",
            "‚Ä¢ üìä –ù–∞–ª–æ–∂–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –ª–∏—Ü–µ–≤–æ–π —Å–µ—Ç–∫–∏",
            "‚Ä¢ üß© –¢–æ—á–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –∫–∞–¥—Ä–æ–≤",
            "‚Ä¢ üëÅ –ê–Ω–∞–ª–∏–∑ —Å–∏–º–º–µ—Ç—Ä–∏–∏ –∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π –ª–∏—Ü–∞",
            "‚Ä¢ üìè –û—Ü–µ–Ω–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π –ª–∏—Ü–µ–≤—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π",
            "‚Ä¢ üë®‚Äç‚öïÔ∏è –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç—É—Ä—ã –∫–æ–∂–∏ –∏ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π",
            "‚Ä¢ üì± –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç–∞",
            "",
            "üìπ **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –≤–∏–¥–µ–æ:**",
            "‚Ä¢ ‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ –±–æ–ª–µ–µ 8 —Å–µ–∫—É–Ω–¥ (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ 3-5 —Å–µ–∫)",
            "‚Ä¢ üë§ –õ–∏—Ü–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–µ—Ç–∫–æ –≤–∏–¥–Ω–æ –≤ –∫–∞–¥—Ä–µ",
            "‚Ä¢ üìè –î–µ—Ä–∂–∏—Ç–µ –∫–∞–º–µ—Ä—É –ø—Ä—è–º–æ –ø–µ—Ä–µ–¥ –ª–∏—Ü–æ–º –Ω–∞ —É—Ä–æ–≤–Ω–µ –≥–ª–∞–∑",
            "‚Ä¢ üí° –û–±–µ—Å–ø–µ—á—å—Ç–µ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ –±–µ–∑ —Ä–µ–∑–∫–∏—Ö —Ç–µ–Ω–µ–π",
            "‚Ä¢ üö´ –ò–∑–±–µ–≥–∞–π—Ç–µ –≥–æ–ª–æ–≤–Ω—ã—Ö —É–±–æ—Ä–æ–≤, –æ—á–∫–æ–≤ –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö –ª–∏—Ü–æ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤",
            "",
            "‚è± **–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:**",
            "‚Ä¢ üîç –ö–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ (1-2 —Å–µ–∫): –≥–æ—Ç–æ–≤–æ –∑–∞ 2-3 —Å–µ–∫—É–Ω–¥—ã",
            "‚Ä¢ üîé –°—Ä–µ–¥–Ω–µ–µ –≤–∏–¥–µ–æ (3-5 —Å–µ–∫): –≥–æ—Ç–æ–≤–æ –∑–∞ 10-20 —Å–µ–∫—É–Ω–¥",
            "‚Ä¢ üî¨ –î–ª–∏–Ω–Ω–æ–µ –≤–∏–¥–µ–æ (6-8 —Å–µ–∫): –≥–æ—Ç–æ–≤–æ –∑–∞ 30-60 —Å–µ–∫—É–Ω–¥",
            "",
            "üìã **–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:**",
            "‚Ä¢ üé¨ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –≤–∏–¥–µ–æ —Å –∞–Ω–∞–ª–∏–∑–æ–º",
            "‚Ä¢ üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–ø–æ—Ä—Ü–∏—è—Ö –ª–∏—Ü–∞",
            "‚Ä¢ üë• –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–¥—Ö–æ–¥—è—â–∏–º –ø—Ä–∏—á–µ—Å–∫–∞–º –∏ —Å—Ç–∏–ª—é",
            "‚Ä¢ üìà –ê–Ω–∞–ª–∏–∑ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π",
            "‚Ä¢ üíá‚Äç‚ôÄÔ∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ä–∞–∑—É –ø—Ä–∏–º–µ—Ä–∏—Ç—å –ø—Ä–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞",
            "",
            "–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∫–∏ –ø—Ä–∏—á–µ—Å–æ–∫, –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–ª—è –≤–∞—à–µ–π —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞.",
            "",
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ —Å–≤–æ–µ–≥–æ –ª–∏—Ü–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
        ]
        self.bot.send_message(chat_id, "\n".join(instructions), parse_mode="Markdown")
    
    def process_video(self, message):
        """Process the user video, add facial grid, and return processed video with detailed analysis."""
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–æ: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        chat_id = message.chat.id
        
        try:
            # –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            import time
            self.user_data.setdefault(chat_id, {})['video_processing_start_time'] = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ (–Ω–µ –±–æ–ª–µ–µ 8 —Å–µ–∫—É–Ω–¥)
            duration = message.video.duration if hasattr(message.video, 'duration') else 5
            if duration > 8:
                self.bot.send_message(chat_id, "‚ö†Ô∏è –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –Ω–µ –±–æ–ª–µ–µ 8 —Å–µ–∫—É–Ω–¥.")
                return
            
            # –û—Ü–µ–Ω–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–º–µ—Ä–∞ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ
            estimated_time = "1-3 —Å–µ–∫—É–Ω–¥—ã" if duration <= 2 else "10-20 —Å–µ–∫—É–Ω–¥" if duration <= 5 else "30-60 —Å–µ–∫—É–Ω–¥"
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏ –∏ –¥–µ—Ç–∞–ª—è–º–∏
            analysis_stages = [
                "üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ–∑–∞–ø–∏—Å–∏...",
                "üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞...",
                "üëÅÔ∏è –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ª–∏—Ü–µ–≤—ã—Ö –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤...",
                "üìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π –ª–∏—Ü–∞...",
                "üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–æ–≤ –≤–∏–¥–µ–æ...",
                "üìê –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ª–∏—Ü–µ–≤–æ–π —Å–µ—Ç–∫–∏...",
                "üé≠ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞...",
                "üë• –†–∞—Å—á–µ—Ç —Å–∏–º–º–µ—Ç—Ä–∏–∏ –ª–∏—Ü–∞...",
                "‚ú® –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç—É—Ä—ã –∫–æ–∂–∏...",
                "üìº –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ..."
            ]
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —ç—Ç–∞–ø–∞—Ö
            processing_msg = self.bot.send_message(
                chat_id, 
                f"üìπ *–ù–∞—á–∏–Ω–∞—é –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ*\n\n"
                f"‚è± –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {estimated_time}\n"
                f"üìä –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ: {duration} —Å–µ–∫.\n\n"
                f"*–≠—Ç–∞–ø—ã –∞–Ω–∞–ª–∏–∑–∞:*\n"
                f"‚òëÔ∏è {analysis_stages[0]}\n"
                f"‚¨ú {analysis_stages[1]}\n"
                f"‚¨ú {analysis_stages[2]}\n"
                f"‚¨ú {analysis_stages[3]}\n"
                f"‚¨ú {analysis_stages[4]}",
                parse_mode="Markdown"
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–µ
            file_info = self.bot.get_file(message.video.file_id)
            file_content = self.bot.download_file(file_info.file_path)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ª–∏–º–∏—Ç—ã
            if len(file_content) > 20 * 1024 * 1024:  # 20 –ú–ë
                self.bot.send_message(
                    chat_id, 
                    "‚ö†Ô∏è *–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ*\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ —Ä–∞–∑–º–µ—Ä–æ–º –Ω–µ –±–æ–ª–µ–µ 20 –ú–ë.\n"
                    "üí° –°–æ–≤–µ—Ç: –í—ã –º–æ–∂–µ—Ç–µ —Å–∂–∞—Ç—å –≤–∏–¥–µ–æ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∏–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç (3-5 —Å–µ–∫—É–Ω–¥).",
                    parse_mode="Markdown"
                )
                self.bot.delete_message(chat_id, processing_msg.message_id)
                return
                
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
            self.bot.edit_message_text(
                f"üìπ *–ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ*\n\n"
                f"‚òëÔ∏è {analysis_stages[0]}\n"
                f"‚òëÔ∏è {analysis_stages[1]}\n"
                f"‚¨ú {analysis_stages[2]}\n"
                f"‚¨ú {analysis_stages[3]}\n"
                f"‚¨ú {analysis_stages[4]}",
                chat_id=chat_id,
                message_id=processing_msg.message_id,
                parse_mode="Markdown"
            )
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            def update_progress(percent, stage, remaining_time=None):
                try:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è, –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è —ç—Ç–∞–ø–∞
                    current_stage_index = 1  # –ù–∞—á–∞–ª–æ —Å 1, —Ç.–∫. –ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω
                    
                    if "–∫–∞–¥—Ä" in stage.lower():
                        current_stage_index = 4
                    elif "—Å–µ—Ç–∫" in stage.lower():
                        current_stage_index = 5
                    elif "—Ñ–æ—Ä–º" in stage.lower():
                        current_stage_index = 6
                    elif "—Å–∏–º–º–µ—Ç—Ä" in stage.lower():
                        current_stage_index = 7
                    elif "—Ç–µ–∫—Å—Ç—É—Ä" in stage.lower() or "–∫–æ–∂" in stage.lower():
                        current_stage_index = 8
                    elif "–∏—Ç–æ–≥" in stage.lower() or "—Ñ–∏–Ω–∞–ª" in stage.lower() or "–≤—ã—Ö–æ–¥" in stage.lower():
                        current_stage_index = 9
                    elif "–æ—Ä–∏–µ–Ω—Ç–∏—Ä" in stage.lower() or "—Ç–æ—á–∫" in stage.lower():
                        current_stage_index = 2
                    elif "–ø—Ä–æ–ø–æ—Ä—Ü" in stage.lower() or "–∞–Ω–∞–ª–∏–∑" in stage.lower():
                        current_stage_index = 3
                        
                    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —ç—Ç–∞–ø–æ–≤
                    status_lines = []
                    for i, stage_text in enumerate(analysis_stages):
                        if i < current_stage_index:
                            status_lines.append(f"‚òëÔ∏è {stage_text}")
                        elif i == current_stage_index:
                            # –≠—Ñ—Ñ–µ–∫—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞
                            loading_chars = ["‚£æ", "‚£Ω", "‚£ª", "‚¢ø", "‚°ø", "‚£ü", "‚£Ø", "‚£∑"]
                            loading_idx = int(time.time() * 4) % len(loading_chars)
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–π–º–µ—Ä –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤
                            # –û—Ü–µ–Ω–∏–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                            # –ü–æ–ª–Ω–æ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ 60 —Å–µ–∫—É–Ω–¥
                            progress_bar = "".join(["‚ñì" if j < percent // 10 else "‚ñë" for j in range(10)])
                            
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω–æ–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è, –µ—Å–ª–∏ –æ–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ
                            if remaining_time is not None and remaining_time > 0:
                                remaining_seconds = remaining_time
                                time_prefix = "‚è±Ô∏è"  # –ò–∫–æ–Ω–∫–∞ —Ç–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                            else:
                                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
                                est_total_seconds = 60  # –ü—Ä–∏–º–µ—Ä–Ω–æ 60 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–æ–ª–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                                remaining_seconds = int(est_total_seconds * (100 - percent) / 100)
                                time_prefix = "~"  # –¢–∏–ª—å–¥–∞ –¥–ª—è –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                            
                            # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ 5 —Å–µ–∫—É–Ω–¥ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–æ–ª–µ–µ 90%, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ"
                            if percent > 90 and remaining_seconds < 5:
                                time_display = "‚åõ –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ"
                            else:
                                minutes = remaining_seconds // 60
                                seconds = remaining_seconds % 60
                                time_display = f"{time_prefix} {minutes}:{seconds:02d}"
                            
                            status_lines.append(f"{loading_chars[loading_idx]} {stage_text} {progress_bar} {time_display}")
                        else:
                            status_lines.append(f"‚¨ú {stage_text}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
                    progress_message = f"üìπ *–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ*\n\n"
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–µ–¥—É—é—â–∏—Ö/–ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —ç—Ç–∞–ø–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
                    visible_range = range(max(0, current_stage_index-2), min(len(status_lines), current_stage_index+3))
                    progress_message += "\n".join([status_lines[i] for i in visible_range])
                    
                    self.bot.edit_message_text(
                        progress_message,
                        chat_id=chat_id,
                        message_id=processing_msg.message_id,
                        parse_mode="Markdown"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: {str(e)}")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ —Å –Ω–∞–Ω–µ—Å–µ–Ω–∏–µ–º —Å–µ—Ç–∫–∏ –∏ –ø–µ—Ä–µ–¥–∞—á–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–µ–π API
            from process_video_adapter import process_video_with_grid_adapter
            processed_video, analysis_results = process_video_with_grid_adapter(
                file_content, 
                progress_callback=update_progress,
                return_analysis=True
            )
            
            if processed_video is None:
                self.bot.send_message(
                    chat_id, 
                    "‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ*\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
                    "‚Ä¢ –í–∞—à–µ –ª–∏—Ü–æ —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω–æ –≤ –∫–∞–¥—Ä–µ\n"
                    "‚Ä¢ –û—Å–≤–µ—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ\n"
                    "‚Ä¢ –ù–∞ –≤–∏–¥–µ–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –ª–∏—Ü–æ\n"
                    "‚Ä¢ –õ–∏—Ü–æ –Ω–µ –∑–∞–∫—Ä—ã—Ç–æ –≤–æ–ª–æ—Å–∞–º–∏, –æ—á–∫–∞–º–∏ –∏–ª–∏ –¥—Ä—É–≥–∏–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω—è—Ç—å –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞.",
                    parse_mode="Markdown"
                )
                self.bot.delete_message(chat_id, processing_msg.message_id)
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if analysis_results:
                self.user_data[chat_id]['video_analysis_results'] = analysis_results
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–π—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ
            video_bytes = io.BytesIO(processed_video)
            video_bytes.name = 'face_analysis_video.avi'
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞
            self.bot.edit_message_text(
                f"üìπ *–ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ –∑–∞–≤–µ—Ä—à–µ–Ω!*\n\n"
                f"‚òëÔ∏è –í—Å–µ —ç—Ç–∞–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã\n"
                f"‚òëÔ∏è –ò—Ç–æ–≥–æ–≤–æ–µ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ\n"
                f"‚òëÔ∏è –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...",
                chat_id=chat_id,
                message_id=processing_msg.message_id,
                parse_mode="Markdown"
            )
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω—è–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞
            processing_time = round(time.time() - self.user_data[chat_id]['video_processing_start_time'], 1)
            
            # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∞–Ω–∞–ª–∏–∑–∞
            report = self._create_video_analysis_report(analysis_results, processing_time)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ —Å –æ—Ç—á–µ—Ç–æ–º
            self.bot.send_video(
                chat_id,
                video_bytes,
                caption=report,
                parse_mode="Markdown",
                supports_streaming=True,
                width=message.video.width if hasattr(message.video, 'width') else None,
                height=message.video.height if hasattr(message.video, 'height') else None,
                duration=message.video.duration if hasattr(message.video, 'duration') else None
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è–º–∏
            if analysis_results and 'face_shape' in analysis_results:
                face_shape = analysis_results['face_shape']
                self._send_face_shape_recommendations(chat_id, face_shape)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            self.bot.delete_message(chat_id, processing_msg.message_id)
            
        except Exception as e:
            import traceback
            error_details = traceback.format_exc()
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {str(e)}")
            logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {error_details}")
            try:
                self.bot.send_message(
                    chat_id,
                    "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ*\n\n"
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏.\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                    "‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ —Å–Ω–æ–≤–∞\n"
                    "‚Ä¢ –ó–∞–ø–∏—Å–∞—Ç—å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–∏–¥–µ–æ (2-3 —Å–µ–∫—É–Ω–¥—ã)\n"
                    "‚Ä¢ –û–±–µ—Å–ø–µ—á–∏—Ç—å –ª—É—á—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ\n"
                    "‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ª–∏—Ü–æ —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω–æ –≤ –∫–∞–¥—Ä–µ",
                    parse_mode="Markdown"
                )
                # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                try:
                    self.bot.delete_message(chat_id, processing_msg.message_id)
                except:
                    pass
            except:
                pass
                
    def _create_video_analysis_report(self, analysis_results, processing_time):
        """–°–æ–∑–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–¥–µ–æ"""
        if not analysis_results:
            return f"‚úÖ *–ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ –∑–∞–≤–µ—Ä—à–µ–Ω!*\n\n‚è± –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time} —Å–µ–∫."
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        face_shape = analysis_results.get('face_shape', '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')
        
        # –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–æ—Ä–º –ª–∏—Ü–∞
        face_shape_names_ru = {
            "OVAL": "–æ–≤–∞–ª—å–Ω–∞—è",
            "ROUND": "–∫—Ä—É–≥–ª–∞—è",
            "SQUARE": "–∫–≤–∞–¥—Ä–∞—Ç–Ω–∞—è",
            "HEART": "—Å–µ—Ä–¥—Ü–µ–≤–∏–¥–Ω–∞—è",
            "OBLONG": "–ø—Ä–æ–¥–æ–ª–≥–æ–≤–∞—Ç–∞—è",
            "DIAMOND": "—Ä–æ–º–±–æ–≤–∏–¥–Ω–∞—è"
        }
        
        face_shape_ru = face_shape_names_ru.get(face_shape.upper(), face_shape.lower())
        
        # –ü—Ä–æ–ø–æ—Ä—Ü–∏–∏ –ª–∏—Ü–∞
        width_ratio = analysis_results.get('width_ratio', 0)
        forehead_ratio = analysis_results.get('forehead_ratio', 0)
        cheekbone_ratio = analysis_results.get('cheekbone_ratio', 0)
        
        # –î–∞–Ω–Ω—ã–µ –æ —Å–∏–º–º–µ—Ç—Ä–∏–∏
        vert_asymmetry = analysis_results.get('vertical_asymmetry', 0) * 100
        horiz_asymmetry = analysis_results.get('horizontal_asymmetry', 0) * 100
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ —É—Ä–æ–≤–Ω–µ–π
        def get_level_emoji(value, thresholds=(0.2, 0.4, 0.6, 0.8)):
            emojis = ["üü¢", "üü°", "üü†", "üî¥", "‚ö´"]
            for i, threshold in enumerate(thresholds):
                if value < threshold:
                    return emojis[i]
            return emojis[-1]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        report = [
            f"‚úÖ *–ê–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ –∑–∞–≤–µ—Ä—à–µ–Ω!*",
            f"",
            f"‚è± –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processing_time} —Å–µ–∫.",
            f"",
            f"üß© *–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ñ–æ—Ä–º–∞ –ª–∏—Ü–∞:* {face_shape_ru.upper()}",
            f"",
            f"üëÅ *–°–∏–º–º–µ—Ç—Ä–∏—è –ª–∏—Ü–∞:*",
            f"{get_level_emoji(vert_asymmetry/100)} –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è: {vert_asymmetry:.1f}%",
            f"{get_level_emoji(horiz_asymmetry/100)} –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è: {horiz_asymmetry:.1f}%",
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
        report.append("")
        report.append("üíá‚Äç‚ôÄÔ∏è *–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:*")
        report.append(f"‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, —á—Ç–æ–±—ã –ø—Ä–∏–º–µ—Ä–∏—Ç—å –ø—Ä–∏—á–µ—Å–∫–∏ –¥–ª—è {face_shape_ru.upper()} —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞")
        report.append("‚Ä¢ –ù–∞–∂–º–∏—Ç–µ /hairstyles —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—Ä–∏—á–µ—Å–æ–∫")
        report.append("‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /try –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –ø—Ä–∏–º–µ—Ä–∫–∏ –ø—Ä–∏—á–µ—Å–æ–∫")
        report.append("")
        report.append("üîç *–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* –¢–µ–ø–µ—Ä—å –º—ã –∑–Ω–∞–µ–º –≤–∞—à—É —Ñ–æ—Ä–º—É –ª–∏—Ü–∞, –∏ –º–æ–∂–µ–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—É—é –ø—Ä–∏—á–µ—Å–∫—É! –ü—Ä–∏—à–ª–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –∞–Ω—Ñ–∞—Å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
        
        return "\n".join(report)
        
    def _send_face_shape_recommendations(self, chat_id, face_shape):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞"""
        # –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ –ø—Ä–∏—á–µ—Å–∫–∞–º –∏ —Å—Ç–∏–ª—é –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º –ª–∏—Ü–∞
        recommendations = {
            "OVAL": {
                "description": "–û–≤–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∏–¥–µ–∞–ª—å–Ω–æ–π –∏ –Ω–∞–∏–±–æ–ª–µ–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π. –ì–∞—Ä–º–æ–Ω–∏—á–Ω—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏.",
                "proportions": "–î–ª–∏–Ω–∞ –ª–∏—Ü–∞ –ø—Ä–∏–º–µ—Ä–Ω–æ –≤ 1.5 —Ä–∞–∑–∞ –±–æ–ª—å—à–µ —à–∏—Ä–∏–Ω—ã, –ø–ª–∞–≤–Ω—ã–µ –∫–æ–Ω—Ç—É—Ä—ã –±–µ–∑ –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã—Ö —É–≥–ª–æ–≤.",
                "features": "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –ª–±–∞, —Å–∫—É–ª –∏ –ø–æ–¥–±–æ—Ä–æ–¥–∫–∞; –º—è–≥–∫–∏–µ, –ø–ª–∞–≤–Ω—ã–µ –ª–∏–Ω–∏–∏.",
                "advantages": ["–°—á–∏—Ç–∞–µ—Ç—Å—è –Ω–∞–∏–±–æ–ª–µ–µ –≥–∞—Ä–º–æ–Ω–∏—á–Ω–æ–π —Ñ–æ—Ä–º–æ–π", "–ü–æ–¥—Ö–æ–¥–∏—Ç –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –ø—Ä–∏—á–µ—Å–æ–∫", "–•–æ—Ä–æ—à–æ —Å–º–æ—Ç—Ä–∏—Ç—Å—è —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞–º–∏", "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å –≤ –≤—ã–±–æ—Ä–µ –º–∞–∫–∏—è–∂–∞"],
                "hairstyles": ["–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ª—é–±—ã–µ –ø—Ä–∏—á–µ—Å–∫–∏", "–£–¥–ª–∏–Ω–µ–Ω–Ω–æ–µ –∫–∞—Ä–µ", "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –±–æ–±", "–î–ª–∏–Ω–Ω—ã–µ —Å–ª–æ–∏—Å—Ç—ã–µ —Å—Ç—Ä–∏–∂–∫–∏"],
                "avoid": ["–û–±—ä–µ–º–Ω—ã–µ –ø—Ä–∏—á–µ—Å–∫–∏, —Å–∫—Ä—ã–≤–∞—é—â–∏–µ –ª–∏—Ü–æ", "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —á–µ–ª–∫–∏"],
                "accessories": ["–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –æ—á–∫–æ–≤ –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤ –±—É–¥—É—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≥–∞—Ä–º–æ–Ω–∏—á–Ω–æ"],
                "makeup": ["–ê–∫—Ü–µ–Ω—Ç –Ω–∞ –≥–ª–∞–∑–∞ –∏–ª–∏ –≥—É–±—ã", "–ú—è–≥–∫–æ–µ –∫–æ–Ω—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã"]
            },
            "ROUND": {
                "description": "–ö—Ä—É–≥–ª–∞—è —Ñ–æ—Ä–º–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è –º—è–≥–∫–∏–º–∏ –ª–∏–Ω–∏—è–º–∏ –±–µ–∑ –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã—Ö —É–≥–ª–æ–≤ –∏ –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω–æ–π —à–∏—Ä–∏–Ω–æ–π –∏ –¥–ª–∏–Ω–æ–π –ª–∏—Ü–∞.",
                "proportions": "–®–∏—Ä–∏–Ω–∞ –∏ –¥–ª–∏–Ω–∞ –ª–∏—Ü–∞ –ø–æ—á—Ç–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã, —Å–∫—É–ª—ã —è–≤–ª—è—é—Ç—Å—è —Å–∞–º–æ–π —à–∏—Ä–æ–∫–æ–π —á–∞—Å—Ç—å—é –ª–∏—Ü–∞.",
                "features": "–ú—è–≥–∫–∏–µ —á–µ—Ä—Ç—ã, –ø–æ–ª–Ω—ã–µ —â–µ–∫–∏, –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω–∞—è –ª–∏–Ω–∏—è –ø–æ–¥–±–æ—Ä–æ–¥–∫–∞, –Ω–∏–∑–∫–∞—è –ª–∏–Ω–∏—è —Ä–æ—Å—Ç–∞ –≤–æ–ª–æ—Å.",
                "advantages": ["–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –≤—ã–≥–ª—è–¥–∏—Ç –º—è–≥–∫–æ –∏ –º–æ–ª–æ–¥–æ", "–•–æ—Ä–æ—à–æ –ø–æ–¥–¥–∞–µ—Ç—Å—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏", "–û—Ç–ª–∏—á–Ω–æ —Å–º–æ—Ç—Ä–∏—Ç—Å—è —Å —É–≥–ª–æ–≤–∞—Ç—ã–º–∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞–º–∏", "–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–ª–æ–≤–∏–¥–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞"],
                "hairstyles": ["–£–¥–ª–∏–Ω–µ–Ω–Ω—ã–π –±–æ–±", "–ê—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–µ —Å—Ç—Ä–∏–∂–∫–∏", "–ü—Ä–∏—á–µ—Å–∫–∏ —Å –æ–±—ä–µ–º–æ–º –Ω–∞ –º–∞–∫—É—à–∫–µ", "–°–ª–æ–∏—Å—Ç—ã–µ —Å—Ç—Ä–∏–∂–∫–∏ —Å—Ä–µ–¥–Ω–µ–π –¥–ª–∏–Ω—ã"],
                "avoid": ["–ö–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–∏–∂–∫–∏ —Å –¥–ª–∏–Ω–Ω–æ–π —á–µ–ª–∫–æ–π", "–û–±—ä–µ–º–Ω—ã–µ –ø—Ä–∏—á–µ—Å–∫–∏ –ø–æ –±–æ–∫–∞–º", "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ–±–æ—Ä"],
                "accessories": ["–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–µ –∏–ª–∏ —É–≥–ª–æ–≤–∞—Ç—ã–µ –æ—á–∫–∏", "–î–ª–∏–Ω–Ω—ã–µ —Å–µ—Ä—å–≥–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —É–¥–ª–∏–Ω–µ–Ω–∏—è –ª–∏—Ü–∞"],
                "makeup": ["–ö–æ–Ω—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–Ω–µ–π –ø–æ –±–æ–∫–∞–º –ª–∏—Ü–∞", "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∞–∫—Ü–µ–Ω—Ç—ã –≤ –º–∞–∫–∏—è–∂–µ"]
            },
            "SQUARE": {
                "description": "–ö–≤–∞–¥—Ä–∞—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –≤—ã—Ä–∞–∂–µ–Ω–Ω–æ–π –ª–∏–Ω–∏–µ–π —á–µ–ª—é—Å—Ç–∏ –∏ —à–∏—Ä–æ–∫–∏–º –ª–±–æ–º. –°–æ–∑–¥–∞–µ—Ç –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ —Å–∏–ª—ã –∏ —Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.",
                "proportions": "–®–∏—Ä–∏–Ω–∞ –ª–±–∞, —Å–∫—É–ª –∏ —á–µ–ª—é—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã, —Å –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏ —É —á–µ–ª—é—Å—Ç–∏.",
                "features": "–®–∏—Ä–æ–∫–∞—è –ª–∏–Ω–∏—è —á–µ–ª—é—Å—Ç–∏ —Å –æ—Ç—á–µ—Ç–ª–∏–≤—ã–º–∏ —É–≥–ª–∞–º–∏, –ø—Ä—è–º–∞—è –ª–∏–Ω–∏—è —Ä–æ—Å—Ç–∞ –≤–æ–ª–æ—Å, —É–≥–ª–æ–≤–∞—Ç—ã–µ —á–µ—Ä—Ç—ã –ª–∏—Ü–∞.",
                "advantages": ["–í—ã–≥–ª—è–¥–∏—Ç —Ä–µ—à–∏—Ç–µ–ª—å–Ω–æ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ", "–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ —Å–º–æ—Ç—Ä–∏—Ç—Å—è —Å –º—è–≥–∫–∏–º–∏, –∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø—Ä–∏—á–µ—Å–∫–∞–º–∏", "–°–æ–∑–¥–∞–µ—Ç —Å–∏–ª—å–Ω—ã–π, –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–π—Å—è –æ–±—Ä–∞–∑", "–û—Ç–ª–∏—á–Ω–æ –≤—ã–≥–ª—è–¥–∏—Ç –≤ –∫–∞–º–µ—Ä–µ"],
                "hairstyles": ["–ú—è–≥–∫–∏–µ –≤–æ–ª–Ω—ã", "–°—Ç—Ä–∏–∂–∫–∏ —Å —Ç–µ–∫—Å—Ç—É—Ä–æ–π –∏ –ª–µ–≥–∫–æ—Å—Ç—å—é", "–î–ª–∏–Ω–Ω—ã–µ —Å–ª–æ–∏—Å—Ç—ã–µ –ø—Ä–∏—á–µ—Å–∫–∏", "–ê—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–µ —Å—Ç—Ä–∏–∂–∫–∏ —Å –±–æ–∫–æ–≤—ã–º –ø—Ä–æ–±–æ—Ä–æ–º"],
                "avoid": ["–ü—Ä—è–º—ã–µ –≤–æ–ª–æ—Å—ã –¥–æ –ª–∏–Ω–∏–∏ —á–µ–ª—é—Å—Ç–∏", "–¢—è–∂–µ–ª—ã–µ –ø—Ä—è–º—ã–µ —á–µ–ª–∫–∏", "–ü—Ä–∏—á—ë—Å–∫–∏ —Å —á—ë—Ç–∫–∏–º–∏ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–º–∏ –ª–∏–Ω–∏—è–º–∏"],
                "accessories": ["–ö—Ä—É–≥–ª—ã–µ –∏–ª–∏ –æ–≤–∞–ª—å–Ω—ã–µ –æ—á–∫–∏ –¥–ª—è —Å–º—è–≥—á–µ–Ω–∏—è —á–µ—Ä—Ç", "–ú—è–≥–∫–∏–µ, –æ–∫—Ä—É–≥–ª—ã–µ —É–∫—Ä–∞—à–µ–Ω–∏—è", "–°–µ—Ä—å–≥–∏ –æ–∫—Ä—É–≥–ª–æ–π —Ñ–æ—Ä–º—ã"],
                "makeup": ["–°–º—è–≥—á–µ–Ω–∏–µ —É–≥–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é —Ö–∞–π–ª–∞–π—Ç–µ—Ä–∞", "–ê–∫—Ü–µ–Ω—Ç –Ω–∞ –≥–ª–∞–∑–∞ –∏ –≥—É–±—ã –¥–ª—è –æ—Ç–≤–ª–µ—á–µ–Ω–∏—è –æ—Ç —É–≥–ª–æ–≤–∞—Ç–æ—Å—Ç–∏"]
            },
            "HEART": {
                "description": "–°–µ—Ä–¥—Ü–µ–≤–∏–¥–Ω–∞—è —Ñ–æ—Ä–º–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è —à–∏—Ä–æ–∫–∏–º –ª–±–æ–º –∏ –∑–∞–æ—Å—Ç—Ä–µ–Ω–Ω—ã–º –ø–æ–¥–±–æ—Ä–æ–¥–∫–æ–º, —Å–æ–∑–¥–∞–≤–∞—è —Ä–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π –∏ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–∑.",
                "proportions": "–®–∏—Ä–æ–∫–∏–π –ª–æ–± –∏ –ª–∏–Ω–∏—è —Ä–æ—Å—Ç–∞ –≤–æ–ª–æ—Å, —Å—É–∂–∞—é—â–∞—è—Å—è –∫ –æ—Å—Ç—Ä–æ–º—É –ø–æ–¥–±–æ—Ä–æ–¥–∫—É, —Å –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã–º–∏ —Å–∫—É–ª–∞–º–∏.",
                "features": "–í—ã—Å–æ–∫–∏–π –∏–ª–∏ —à–∏—Ä–æ–∫–∏–π –ª–æ–±, –∑–∞–æ—Å—Ç—Ä–µ–Ω–Ω—ã–π –ø–æ–¥–±–æ—Ä–æ–¥–æ–∫, –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∫—É–ª—ã, –∏–Ω–æ–≥–¥–∞ –≤–¥–æ–≤–∏–π –ø–∏–∫ –≤ –ª–∏–Ω–∏–∏ —Ä–æ—Å—Ç–∞ –≤–æ–ª–æ—Å.",
                "advantages": ["–í—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–µ –≥–ª–∞–∑–∞ –∏ —Å–∫—É–ª—ã", "–ñ–µ–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è, —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–∞—è —Ñ–æ—Ä–º–∞", "–•–æ—Ä–æ—à–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –º–Ω–æ–≥–∏—Ö –ø—Ä–∏—á–µ—Å–æ–∫", "–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ñ–æ–∫—É—Å –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ –ª–∏—Ü–∞"],
                "hairstyles": ["–ü—Ä–∏—á–µ—Å–∫–∏ —Å –æ–±—ä–µ–º–æ–º –≤–Ω–∏–∑—É", "–ë–æ–± —Å—Ä–µ–¥–Ω–µ–π –¥–ª–∏–Ω—ã", "–°—Ç—Ä–∏–∂–∫–∏ —Å –¥–ª–∏–Ω–æ–π –¥–æ –ø–ª–µ—á –∏–ª–∏ –Ω–∏–∂–µ", "–î–ª–∏–Ω–Ω–∞—è –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω–∞—è —á–µ–ª–∫–∞ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —à–∏—Ä–æ–∫–æ–≥–æ –ª–±–∞"],
                "avoid": ["–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–∏–∂–∫–∏", "–û–±—ä–µ–º–Ω—ã–µ –ø—Ä–∏—á–µ—Å–∫–∏ –Ω–∞ –º–∞–∫—É—à–∫–µ", "–°—Ç—Ä–∏–∂–∫–∏, –∞–∫—Ü–µ–Ω—Ç–∏—Ä—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ª–±—É"],
                "accessories": ["–û—á–∫–∏ —Å –Ω–∏–∂–Ω–µ–π –æ–ø—Ä–∞–≤–æ–π –∏–ª–∏ –±–µ–∑ –æ–ø—Ä–∞–≤—ã", "–°–µ—Ä—å–≥–∏, —Ä–∞—Å—à–∏—Ä—è—é—â–∏–µ—Å—è –∫ –Ω–∏–∑—É", "–ê–∫—Ü–µ–Ω—Ç–∏—Ä—É—é—â–∏–µ –Ω–∏–∂–Ω—é—é —á–∞—Å—Ç—å –ª–∏—Ü–∞ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã"],
                "makeup": ["–ö–æ–Ω—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—É–∂–µ–Ω–∏—è –ª–±–∞", "–ü–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ —Å–∫—É–ª –∏ –ø–æ–¥–±–æ—Ä–æ–¥–∫–∞ —Ö–∞–π–ª–∞–π—Ç–µ—Ä–æ–º"]
            },
            "OBLONG": {
                "description": "–ü—Ä–æ–¥–æ–ª–≥–æ–≤–∞—Ç–∞—è —Ñ–æ—Ä–º–∞ –∏–º–µ–µ—Ç –≤—ã—Ç—è–Ω—É—Ç—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ —Å –≤—ã—Å–æ–∫–∏–º –ª–±–æ–º –∏ —É–¥–ª–∏–Ω–µ–Ω–Ω—ã–º –ø–æ–¥–±–æ—Ä–æ–¥–∫–æ–º, –ø—Ä–∏–¥–∞–≤–∞—è –ª–∏—Ü—É –∞—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç–∏—á–Ω—ã–µ —á–µ—Ä—Ç—ã.",
                "proportions": "–î–ª–∏–Ω–∞ –ª–∏—Ü–∞ –∑–∞–º–µ—Ç–Ω–æ –±–æ–ª—å—à–µ —à–∏—Ä–∏–Ω—ã, —Å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π —à–∏—Ä–∏–Ω–æ–π –ª–±–∞, —Å–∫—É–ª –∏ —á–µ–ª—é—Å—Ç–∏.",
                "features": "–í—ã—Ç—è–Ω—É—Ç–æ–µ –ª–∏—Ü–æ, –≤—ã—Å–æ–∫–∏–π –ª–æ–±, –¥–ª–∏–Ω–Ω–∞—è –ª–∏–Ω–∏—è –ø–æ–¥–±–æ—Ä–æ–¥–∫–∞, –ø—Ä—è–º—ã–µ –∏–ª–∏ —Å–ª–µ–≥–∫–∞ –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç—É—Ä—ã.",
                "advantages": ["–ê—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç–∏—á–Ω—ã–π, —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π –≤–∏–¥", "–•–æ—Ä–æ—à–∞—è –æ—Å–Ω–æ–≤–∞ –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–∏—á–µ—Å–æ–∫", "–í—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è", "–ò–∑—è—â–Ω—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ–±—Ä–∞–º–ª–µ–Ω–∏–∏"],
                "hairstyles": ["–ë–æ–± –¥–æ –ø–æ–¥–±–æ—Ä–æ–¥–∫–∞", "–°—Ç—Ä–∏–∂–∫–∏ —Å –æ–±—ä–µ–º–æ–º –ø–æ –±–æ–∫–∞–º", "–ú–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–µ —Å—Ç—Ä–∏–∂–∫–∏ —Å—Ä–µ–¥–Ω–µ–π –¥–ª–∏–Ω—ã", "–î–ª–∏–Ω–Ω–∞—è –ø—Ä—è–º–∞—è –∏–ª–∏ –±–æ–∫–æ–≤–∞—è —á–µ–ª–∫–∞"],
                "avoid": ["–î–ª–∏–Ω–Ω—ã–µ –ø—Ä—è–º—ã–µ –≤–æ–ª–æ—Å—ã –±–µ–∑ –æ–±—ä–µ–º–∞", "–í—ã—Å–æ–∫–∏–µ –ø—Ä–∏—á–µ—Å–∫–∏, –¥–æ–±–∞–≤–ª—è—é—â–∏–µ –≤—ã—Å–æ—Ç—É", "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ–±–æ—Ä –±–µ–∑ –æ–±—ä–µ–º–∞"],
                "accessories": ["–®–∏—Ä–æ–∫–∏–µ –æ—á–∫–∏", "–ö–æ—Ä–æ—Ç–∫–∏–µ –æ–∂–µ—Ä–µ–ª—å—è", "–û–±—ä–µ–º–Ω—ã–µ —Å–µ—Ä—å–≥–∏, –≤–∏–∑—É–∞–ª—å–Ω–æ —Ä–∞—Å—à–∏—Ä—è—é—â–∏–µ –ª–∏—Ü–æ"],
                "makeup": ["–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –∞–∫—Ü–µ–Ω—Ç—ã –≤ –º–∞–∫–∏—è–∂–µ", "–†—É–º—è–Ω–∞, –Ω–∞–Ω–æ—Å–∏–º—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ", "–ö–æ–Ω—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –¥–ª–∏–Ω—ã"]
            },
            "DIAMOND": {
                "description": "–†–æ–º–±–æ–≤–∏–¥–Ω–∞—è —Ñ–æ—Ä–º–∞ –∏–º–µ–µ—Ç –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã–µ —Å–∫—É–ª—ã –∏ —Å—É–∂–∞—é—â–∏–π—Å—è –ª–æ–± –∏ –ø–æ–¥–±–æ—Ä–æ–¥–æ–∫, —Å–æ–∑–¥–∞–≤–∞—è –∏–∑—ã—Å–∫–∞–Ω–Ω—ã–π –∏ —É—Ç–æ–Ω—á–µ–Ω–Ω—ã–π –æ–±—Ä–∞–∑.",
                "proportions": "–£–∑–∫–∏–π –ª–æ–± –∏ –ø–æ–¥–±–æ—Ä–æ–¥–æ–∫, —Å –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã–º–∏, —à–∏—Ä–æ–∫–∏–º–∏ —Å–∫—É–ª–∞–º–∏, —è–≤–ª—è—é—â–∏–º–∏—Å—è —Å–∞–º–æ–π —à–∏—Ä–æ–∫–æ–π —á–∞—Å—Ç—å—é –ª–∏—Ü–∞.",
                "features": "–í—ã—Å–æ–∫–∏–µ, –≤—ã—Å—Ç—É–ø–∞—é—â–∏–µ —Å–∫—É–ª—ã, —É–∑–∫–∏–π –ª–æ–± –∏ –∑–∞–æ—Å—Ç—Ä–µ–Ω–Ω—ã–π –ø–æ–¥–±–æ—Ä–æ–¥–æ–∫, –¥—Ä–∞–º–∞—Ç–∏—á–Ω–∞—è –∏–≥—Ä–∞ —Å–≤–µ—Ç–∞ –∏ —Ç–µ–Ω–∏ –Ω–∞ –ª–∏—Ü–µ.",
                "advantages": ["–í—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–µ, –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–µ—Å—è —á–µ—Ä—Ç—ã", "–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–∫—É–ª—å–ø—Ç—É—Ä–Ω–æ—Å—Ç—å –ª–∏—Ü–∞", "–û—Ç–ª–∏—á–Ω–æ –≤—ã–≥–ª—è–¥–∏—Ç –≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö", "–í—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∫—É–ª—ã –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–∞–∫–∏—è–∂–∞"],
                "hairstyles": ["–ü—Ä–∏—á–µ—Å–∫–∏ —Å –æ–±—ä–µ–º–æ–º —É –ª–∏–Ω–∏–∏ –ø–æ–¥–±–æ—Ä–æ–¥–∫–∞ –∏ —É –ª–±–∞", "–°—Ä–µ–¥–Ω–∏–µ –∏ –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–∏–∂–∫–∏ —Å –º—è–≥–∫–∏–º–∏ —Å–ª–æ—è–º–∏", "–ë–æ–∫–æ–≤–∞—è —á–µ–ª–∫–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –ª–∏–Ω–∏–∏ –ª–±–∞"],
                "avoid": ["–ü—Ä–∏—á–µ—Å–∫–∏ —Å –æ–±—ä–µ–º–æ–º –Ω–∞ —Å–∫—É–ª–∞—Ö", "–û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–∏–∂–∫–∏", "–ì–ª–∞–¥–∫–∏–µ –ø—Ä–∏–ª–µ–≥–∞—é—â–∏–µ –ø—Ä–∏—á–µ—Å–∫–∏ –±–µ–∑ –æ–±—ä–µ–º–∞ —É –ª–±–∞ –∏ –ø–æ–¥–±–æ—Ä–æ–¥–∫–∞"],
                "accessories": ["–û—á–∫–∏ –æ–≤–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—ã", "–ö—Ä—É–ø–Ω—ã–µ —Å–µ—Ä—å–≥–∏ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–π", "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã, –∞–∫—Ü–µ–Ω—Ç–∏—Ä—É—é—â–∏–µ –Ω–∏–∂–Ω—é—é –∏ –≤–µ—Ä—Ö–Ω—é—é —á–∞—Å—Ç–∏ –ª–∏—Ü–∞"],
                "makeup": ["–í—ã—Å–≤–µ—Ç–ª–µ–Ω–∏–µ –ª–±–∞ –∏ –ø–æ–¥–±–æ—Ä–æ–¥–∫–∞", "–ú—è–≥–∫–∏–π –∫–æ–Ω—Ç—É—Ä–∏–Ω–≥ —Å–∫—É–ª", "–ê–∫—Ü–µ–Ω—Ç –Ω–∞ –≥–ª–∞–∑–∞ –∏–ª–∏ –≥—É–±—ã –¥–ª—è –±–∞–ª–∞–Ω—Å–∞"]
            }
        }
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞
        shape_upper = face_shape.upper()
        if shape_upper in recommendations:
            rec = recommendations[shape_upper]
            
            # –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–æ—Ä–º –ª–∏—Ü–∞
            face_shape_names_ru = {
                "OVAL": "–æ–≤–∞–ª—å–Ω–∞—è",
                "ROUND": "–∫—Ä—É–≥–ª–∞—è",
                "SQUARE": "–∫–≤–∞–¥—Ä–∞—Ç–Ω–∞—è",
                "HEART": "—Å–µ—Ä–¥—Ü–µ–≤–∏–¥–Ω–∞—è",
                "OBLONG": "–ø—Ä–æ–¥–æ–ª–≥–æ–≤–∞—Ç–∞—è",
                "DIAMOND": "—Ä–æ–º–±–æ–≤–∏–¥–Ω–∞—è"
            }
            
            face_shape_ru = face_shape_names_ru.get(shape_upper, shape_upper.lower())
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            message1 = [
                f"üë©‚Äçüíº *–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ {face_shape_ru.upper()} —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞*",
                f"",
                f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {rec['description']}",
                f"",
                f"üìê *–ü—Ä–æ–ø–æ—Ä—Ü–∏–∏:* {rec['proportions']}",
                f"",
                f"üîç *–•–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —á–µ—Ä—Ç—ã:*",
                f"{rec['features']}",
                f"",
                f"‚ú® *–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –≤–∞—à–µ–π —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞:*"
            ]
            
            for adv in rec["advantages"]:
                message1.append(f"‚Ä¢ {adv}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            self.bot.send_message(chat_id, "\n".join(message1), parse_mode="Markdown")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ —Å—Ç–∏–ª—é
            message2 = [
                f"üé® *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç–∏–ª—é –¥–ª—è {face_shape_ru.upper()} —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞*",
                f"",
                f"üíá‚Äç‚ôÄÔ∏è *–ü–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–∏—á–µ—Å–∫–∏:*"
            ]
            
            for style in rec["hairstyles"]:
                message2.append(f"‚úì {style}")
                
            message2.append("")
            message2.append("‚õî *–õ—É—á—à–µ –∏–∑–±–µ–≥–∞—Ç—å:*")
            
            for avoid in rec["avoid"]:
                message2.append(f"‚úó {avoid}")
                
            message2.append("")
            message2.append("üëì *–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –∏ –æ–ø—Ä–∞–≤—ã:*")
            
            for acc in rec["accessories"]:
                message2.append(f"‚Ä¢ {acc}")
            
            message2.append("")
            message2.append("üíÑ *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–∞–∫–∏—è–∂—É:*")
            
            for makeup in rec["makeup"]:
                message2.append(f"‚Ä¢ {makeup}")
                
            message2.append("")
            message2.append("üí° *–ß—Ç–æ –¥–∞–ª—å—à–µ?*")
            message2.append("‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /try —á—Ç–æ–±—ã –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ –ø—Ä–∏–º–µ—Ä–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–∏—á–µ—Å–∫–∏")
            message2.append("‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /hairstyles –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –ø—Ä–∏—á–µ—Å–æ–∫")
            message2.append("‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∫—É—Ä—Å–∞—Ö")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ —Å—Ç–∏–ª—é
            self.bot.send_message(chat_id, "\n".join(message2), parse_mode="Markdown")
    
    def analyze_attractiveness(self, chat_id):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ª–∏—Ü–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ
        if chat_id not in self.user_data or 'image_data' not in self.user_data[chat_id]:
            self.bot.send_message(chat_id, BOT_MESSAGES["no_photo_yet"])
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        self.bot.send_message(chat_id, "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ª–∏—Ü–∞ –ø–æ –ø—Ä–æ–ø–æ—Ä—Ü–∏—è–º... –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_data = self.user_data[chat_id]['image_data']
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            score, comment, visualization = self.face_attractiveness_analyzer.analyze_attractiveness(image_data)
            
            if score is None:
                # –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ
                self.bot.send_message(chat_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {comment}")
                return
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.user_data[chat_id]['beauty_score'] = score
            self.user_data[chat_id]['beauty_comment'] = comment
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
            result_message = [
                f"‚ú® **–ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ª–∏—Ü–∞**",
                f"",
                f"üìä –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {score}/10",
                f"",
                f"üí¨ {comment}",
                f"",
                f"–ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–ø–æ—Ä—Ü–∏—è—Ö: —Å–∏–º–º–µ—Ç—Ä–∏–∏ –ª–∏—Ü–∞, –∑–æ–ª–æ—Ç–æ–º —Å–µ—á–µ–Ω–∏–∏ –∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —á–µ—Ä—Ç"
            ]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
            _, buffer = cv2.imencode('.jpg', visualization)
            photo = io.BytesIO(buffer.tobytes())
            self.bot.send_photo(chat_id, photo, caption="\n".join(result_message))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            self.bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
            
    def show_all_hairstyles_for_face_shape(self, chat_id, face_shape):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏—á–µ—Å–æ–∫ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞
        
        Args:
            chat_id (int): ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            face_shape (str): –§–æ—Ä–º–∞ –ª–∏—Ü–∞
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏—á–µ—Å–æ–∫ –¥–ª—è —ç—Ç–æ–π —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞
            hairstyles_male = self.face_analyzer.get_hairstyle_names(face_shape, "male")
            hairstyles_female = self.face_analyzer.get_hairstyle_names(face_shape, "female")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –≤—ã–≤–æ–¥–∞
            message_parts = [
                "üíá –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏—á–µ—Å–æ–∫ –¥–ª—è –≤–∞—à–µ–π —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞:",
                "",
            ]
            
            # –ú—É–∂—Å–∫–∏–µ –ø—Ä–∏—á–µ—Å–∫–∏
            if hairstyles_male:
                message_parts.append("üë® **–ú—É–∂—Å–∫–∏–µ –ø—Ä–∏—á–µ—Å–∫–∏:**")
                for idx, name in enumerate(hairstyles_male, 1):
                    message_parts.append(f"{idx}. {name}")
                message_parts.append("")
            
            # –ñ–µ–Ω—Å–∫–∏–µ –ø—Ä–∏—á–µ—Å–∫–∏
            if hairstyles_female:
                message_parts.append("üë© **–ñ–µ–Ω—Å–∫–∏–µ –ø—Ä–∏—á–µ—Å–∫–∏:**")
                for idx, name in enumerate(hairstyles_female, 1):
                    message_parts.append(f"{idx}. {name}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –ø—Ä–∏—á–µ—Å–æ–∫
            self.bot.send_message(chat_id, "\n".join(message_parts))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏—á–µ—Å–æ–∫: {e}")
            self.bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏—á–µ—Å–æ–∫.")
    
    def _reset_all_waiting_states(self, chat_id):
        """
        –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            chat_id (int): ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if chat_id not in self.user_data:
            self.user_data[chat_id] = {}
            return
            
        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞
        waiting_flags = [
            'waiting_for_text_prompt',
            'waiting_for_replace_prompt',
            'waiting_for_background_prompt',
            'waiting_for_style_choice',
            'waiting_for_style_image',
            'waiting_for_payment_method',
            'waiting_for_package_selection',
            'waiting_for_hairstyle_selection'
        ]
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–ª–∞–≥
        for flag in waiting_flags:
            if flag in self.user_data[chat_id]:
                self.user_data[chat_id][flag] = False
        
        # –°–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        # –≠—Ç–æ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É, –∫–æ–≥–¥–∞ —Ñ—É–Ω–∫—Ü–∏–∏ 5 –∏ 6 –æ—Å—Ç–∞—é—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –≤ –º–µ–Ω—é
        if 'current_feature' in self.user_data[chat_id]:
            logger.info(f"–°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
            self.user_data[chat_id]['current_feature'] = None
                
        logger.info(f"–°–±—Ä–æ—à–µ–Ω—ã –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
    
    def reset_command(self, message):
        """Reset user data and start fresh"""
        chat_id = message.chat.id
        
        # Clear user data for this chat
        if chat_id in self.user_data:
            self.user_data.pop(chat_id)
            logger.info(f"Reset user data for chat_id {chat_id}")
            
        # Send confirmation message
        reset_message = [
            "‚úÖ –î–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã!",
            "",
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º—ã –ª–∏—Ü–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø—Ä–∏—á–µ—Å–∫–∞–º."
        ]
        
        self.bot.send_message(chat_id, "\n".join(reset_message))
        
    def _translate_with_deepl(self, text, source_lang="RU", target_lang="EN"):
        """
        –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é DeepL API
        
        Args:
            text (str): –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
            source_lang (str): –Ø–∑—ã–∫ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "RU" - —Ä—É—Å—Å–∫–∏–π)
            target_lang (str): –Ø–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "EN" - –∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
            
        Returns:
            str: –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–≤–∞—Ä—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        # –°–ª–æ–≤–∞—Ä—å —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–ª–æ–≤ (–æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è —Ü–≤–µ—Ç–æ–≤)
        backup_translations = {
            # –¶–≤–µ—Ç–∞ –≤–æ–ª–æ—Å
            '—á–µ—Ä–Ω—ã–π': 'black hair',
            '—á–µ—Ä–Ω': 'black hair',
            '—á–µ—Ä–Ω—ã–µ –≤–æ–ª–æ—Å—ã': 'black hair',
            '—á–µ—Ä–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞': 'black color',
            '—Ç–µ–º–Ω—ã–π': 'dark',
            '–∫–∞—à—Ç–∞–Ω–æ–≤—ã–π': 'chestnut brown',
            '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π': 'brown',
            '—Ä—É—Å—ã–π': 'blonde',
            '–±–ª–æ–Ω–¥': 'blonde',
            '—Å–≤–µ—Ç–ª—ã–π': 'light blonde',
            '—Ä—ã–∂–∏–π': 'red',
            '–∫—Ä–∞—Å–Ω—ã–π': 'red',
            '—Å–µ–¥–æ–π': 'gray',
            # –ë–∞–∑–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –ø—Ä–∏—á–µ—Å–æ–∫
            '–≤–æ–ª–æ—Å—ã': 'hair',
            '–ø—Ä–∏—á–µ—Å–∫–∞': 'hairstyle',
            '—Å—Ç—Ä–∏–∂–∫–∞': 'haircut',
            '–¥–ª–∏–Ω–Ω—ã–µ': 'long',
            '–∫–æ—Ä–æ—Ç–∫–∏–µ': 'short',
            '—Å—Ä–µ–¥–Ω–µ–π –¥–ª–∏–Ω—ã': 'medium length',
            '–∫—É–¥—Ä—è–≤—ã–µ': 'curly',
            '–ø—Ä—è–º—ã–µ': 'straight',
            '–≤–æ–ª–Ω–∏—Å—Ç—ã–µ': 'wavy'
        }
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –Ω–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        text_lower = text.lower().strip()
        if text_lower in backup_translations:
            translated = backup_translations[text_lower]
            logger.info(f"Found exact match in backup dictionary: '{text}' -> '{translated}'")
            return translated
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –æ —Ü–≤–µ—Ç–µ –≤–æ–ª–æ—Å
        for key_word in ['—á–µ—Ä–Ω—ã–π', '—á–µ—Ä–Ω—ã–µ', '—á–µ—Ä–Ω']:
            if key_word in text_lower and ('–≤–æ–ª–æ—Å—ã' in text_lower or '—Ü–≤–µ—Ç' in text_lower):
                logger.info(f"Found 'black' keyword in text: '{text}'")
                result = text_lower.replace(key_word, 'black')
                result = result.replace('–≤–æ–ª–æ—Å—ã', 'hair')
                result = result.replace('—Ü–≤–µ—Ç', 'color')
                logger.info(f"Basic translation: '{text}' -> '{result}'")
                return result
        
        try:
            # –ö–ª—é—á API DeepL - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–æ–π –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª—é—á
            api_key = "7fe9dd7a-990a-4bf1-86af-a216b1b993a1:fx"
            
            # URL DeepL API
            url = "https://api-free.deepl.com/v2/translate"
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            data = {
                "text": [text],
                "source_lang": source_lang,
                "target_lang": target_lang
            }
            
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å –∫–ª—é—á–æ–º API
            headers = {
                "Authorization": f"DeepL-Auth-Key {api_key}",
                "Content-Type": "application/json"
            }
            
            logger.info(f"Sending translation request to DeepL API for text: '{text}'")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = requests.post(url, json=data, headers=headers)
            
            # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info(f"DeepL API response status: {response.status_code}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
            if response.status_code == 200:
                result = response.json()
                logger.info(f"DeepL API response: {result}")
                
                if "translations" in result and len(result["translations"]) > 0:
                    translated_text = result["translations"][0]["text"]
                    logger.info(f"DeepL translation successful: '{text}' -> '{translated_text}'")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —á—ë—Ä–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
                    if ('—á–µ—Ä–Ω—ã–π' in text_lower or '—á–µ—Ä–Ω—ã–µ' in text_lower or '—á–µ—Ä–Ω–æ–≥–æ' in text_lower) and 'black' not in translated_text.lower():
                        logger.warning(f"DeepL did not translate '—á–µ—Ä–Ω—ã–π' to 'black'. Original: '{text}', Translation: '{translated_text}'")
                        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º 'black' –≤ –ø–µ—Ä–µ–≤–æ–¥
                        if 'hair' in translated_text.lower():
                            translated_text = translated_text.lower().replace('hair', 'black hair')
                        else:
                            translated_text = f"black {translated_text}"
                        logger.info(f"Corrected translation for black color: '{translated_text}'")
                    
                    return translated_text
                else:
                    logger.warning(f"DeepL API returned 200 but no translations found in response: {result}")
            
            # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ—É—Å–ø–µ—à–µ–Ω –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–µ—Ä–µ–≤–æ–¥–∞,
            # –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
            logger.warning(f"DeepL API error: {response.status_code} - {response.text}")
        except Exception as e:
            logger.error(f"Error in DeepL API: {e}")
        
        # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –º–µ—Å—Ç–∞, –∑–Ω–∞—á–∏—Ç –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ API –Ω–µ —É–¥–∞–ª—Å—è,
        # –ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –∑–∞–º–µ–Ω—ã –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤
        logger.info(f"Using backup dictionary translation for: '{text}'")
        
        result = text_lower
        for rus_word, eng_word in backup_translations.items():
            if rus_word in result:
                result = result.replace(rus_word, eng_word)
        
        if result != text_lower:
            logger.info(f"Backup translation: '{text}' -> '{result}'")
            return result
            
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        logger.warning(f"No translation available for: '{text}', returning original")
        return text
    
    def _translate_prompt_to_english(self, prompt):
        """
        –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –∑–∞–ø—Ä–æ—Å —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LightX API
        
        Args:
            prompt (str): –ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º
            
        Returns:
            str: –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
        """
        # –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"Starting translation for prompt: '{prompt}'")
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ AI Replace –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ LightX API
        def improve_ai_replace_prompt(translated_prompt):
            """–£–ª—É—á—à–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ AI Replace, –¥–æ–±–∞–≤–ª—è—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"""
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            improved = translated_prompt
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ (–∑–∞–º–µ–Ω–∞ —Ñ–æ–Ω–∞ –∏–ª–∏ –æ–±—ä–µ–∫—Ç–∞)
            is_background = "background" in improved.lower() or "—Ñ–æ–Ω" in prompt.lower()
            is_object = "object" in improved.lower() or "–æ–±—ä–µ–∫—Ç" in prompt.lower() or "–ø—Ä–µ–¥–º–µ—Ç" in prompt.lower()
            
            # –ë–∞–∑–æ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            quality_keywords = "photorealistic, high-resolution, clear details, proper lighting"
            
            # –£–ª—É—á—à–µ–Ω–∏—è –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Å—Ü–µ–Ω–∞—Ä–∏—è–º
            if is_background:
                # –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–º–µ–Ω—É —Ñ–æ–Ω–∞
                if "beach" in improved.lower() or "–ø–ª—è–∂" in prompt.lower():
                    improved = f"Replace the background with a sunny beach scene, blue ocean, white sand, clear sky, {quality_keywords}"
                elif "office" in improved.lower() or "–æ—Ñ–∏—Å" in prompt.lower():
                    improved = f"Replace the background with a professional office environment, clean desk, natural lighting, {quality_keywords}"
                elif "nature" in improved.lower() or "–ø—Ä–∏—Ä–æ–¥–∞" in prompt.lower() or "natural" in improved.lower():
                    improved = f"Replace the background with a natural landscape, lush forest, mountains, bright blue sky, {quality_keywords}"
                elif "city" in improved.lower() or "–≥–æ—Ä–æ–¥" in prompt.lower():
                    improved = f"Replace the background with a modern city skyline, urban environment, buildings, {quality_keywords}"
                elif "blue" in improved.lower() or "—Å–∏–Ω–∏–π" in prompt.lower() or "–≥–æ–ª—É–±–æ–π" in prompt.lower():
                    improved = f"Replace the background with a solid professional blue color, clean and smooth texture, {quality_keywords}"
                elif "white" in improved.lower() or "–±–µ–ª—ã–π" in prompt.lower():
                    improved = f"Replace the background with a clean white studio background, professional look, {quality_keywords}"
                elif "red" in improved.lower() or "–∫—Ä–∞—Å–Ω—ã–π" in prompt.lower():
                    improved = f"Replace the background with a vibrant red background, smooth texture, {quality_keywords}"
                else:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª–∏ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
                    improved += f", seamlessly integrated background, maintain subject lighting, {quality_keywords}"
            elif is_object:
                # –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–º–µ–Ω—É –æ–±—ä–µ–∫—Ç–∞ - –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
                object_quality = "perfect integration with scene, matching perspective, consistent lighting, same style as surrounding elements"
                if not ("replace" in improved.lower() or "–∑–∞–º–µ–Ω–∏" in prompt.lower() or "–∑–∞–º–µ–Ω–∏—Ç—å" in prompt.lower()):
                    improved = f"Replace the object with {improved}, {object_quality}, {quality_keywords}"
                else:
                    improved += f", {object_quality}, {quality_keywords}"
            else:
                # –û–±—â–∏–π —Å–ª—É—á–∞–π
                improved += f", seamless integration, maintain original lighting and perspective, {quality_keywords}"
            
            return improved
            
        # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º DeepL –¥–ª—è AI Replace, –¥–∞–∂–µ –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ—Ö–æ–∂ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        try:
            # –í—ã–∑—ã–≤–∞–µ–º DeepL API –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
            logger.info("Using DeepL API for AI Replace prompt translation...")
            deepl_result = self._translate_with_deepl(prompt)
            
            # –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–ª–∏ —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é API
            if deepl_result:
                logger.info(f"DeepL translation successful: '{prompt}' -> '{deepl_result}'")
                
                # –£–ª—É—á—à–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ AI Replace
                improved_prompt = improve_ai_replace_prompt(deepl_result)
                
                logger.info(f"Final improved prompt for AI Replace: '{improved_prompt}'")
                return improved_prompt
        except Exception as e:
            logger.error(f"Error while using DeepL API: {e}")
            # –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
            import traceback
            logger.error(f"DeepL API error details: {traceback.format_exc()}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–º–ø—Ç —É–∂–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
        import re
        if re.match(r'^[a-zA-Z0-9\s,.!?;:\-_\'\"]+$', prompt):
            logger.info(f"Prompt seems to be already in English, improving for AI Replace...")
            
            # –£–ª—É—á—à–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
            improved_prompt = improve_ai_replace_prompt(prompt)
            
            logger.info(f"Improved English prompt for AI Replace: '{improved_prompt}'")
            return improved_prompt
            
        # –ï—Å–ª–∏ API –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –∏ –ø—Ä–æ–º–ø—Ç –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π,
        # –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à —Å–ª–æ–≤–∞—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º —É–ª—É—á—à–µ–Ω–∏–µ–º
        logger.warning("DeepL API failed and prompt is not in English, using dictionary translation")
        logger.info("Using built-in dictionary for translation")
        
        # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –¥–ª—è –Ω–∞–∏–±–æ–ª–µ–µ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∏ —Ñ—Ä–∞–∑
        translations = {
            # –û–±—â–∏–µ —Å–ª–æ–≤–∞
            "—Ñ–æ—Ç–æ": "photo",
            "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ": "image",
            "–∫–∞—Ä—Ç–∏–Ω–∫–∞": "picture",
            "–ø–æ—Ä—Ç—Ä–µ—Ç": "portrait",
            "–ø–µ–π–∑–∞–∂": "landscape",
            "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–∏–π": "fantasy",
            "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞": "fantasy",
            "—Å—Ç–∏–ª—å": "style",
            "—Ñ–æ–Ω": "background",
            "—Ü–≤–µ—Ç": "color",
            "–±–µ–ª–∞—è": "white",
            "–±–µ–ª–æ–µ": "white",
            "–±–µ–ª—ã–π": "white",
            "—á–µ—Ä–Ω–∞—è": "black",
            "—á–µ—Ä–Ω–æ–µ": "black",
            "—á–µ—Ä–Ω—ã–π": "black",
            "–º–∞—à–∏–Ω–∞": "car",
            "–º–∞—à–∏–Ω—ã": "cars",
            "–∞–≤—Ç–æ–º–æ–±–∏–ª—å": "car",
            "—Å–∞–º–æ–ª–µ—Ç": "airplane",
            "—Å–∞–º–æ–ª—ë—Ç": "airplane",
            "–±—É–º–∞–≥–∞": "paper",
            "–∏–∑ –±—É–º–∞–≥–∏": "made of paper",
            "–±—É–º–∞–∂–Ω—ã–π": "paper",
            "–±—É–º–∞–∂–Ω–∞—è": "paper",
            "–Ω–µ–±–æ": "sky",
            "–Ω–µ–±–µ": "sky",
            "–Ω–µ–±–µ—Å–∞": "skies",
            "–Ω–µ–±–µ—Å–∞—Ö": "skies",
            "—Å—Ç–æ–∏—Ç": "stands",
            "–∞—ç—Ä–æ–ø–æ—Ä—Ç": "airport",
            "–∞—ç—Ä–æ–ø–æ—Ä—Ç—É": "airport",
            # –õ—é–¥–∏ –∏ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–Ω–µ—à–Ω–æ—Å—Ç–∏
            "—á–µ–ª–æ–≤–µ–∫": "person",
            "–º—É–∂—á–∏–Ω–∞": "man",
            "–º—É–∂—Å–∫–æ–π": "male",
            "–∂–µ–Ω—â–∏–Ω–∞": "woman",
            "–∂–µ–Ω—Å–∫–∏–π": "female",
            "–¥–µ–≤—É—à–∫–∞": "girl",
            "–ø–∞—Ä–µ–Ω—å": "young man",
            "–ø–∞—Ä–Ω—è": "young man",
            "–º–∞–ª—å—á–∏–∫": "boy",
            "–ª–∏—Ü–æ": "face",
            "–≥–ª–∞–∑–∞": "eyes",
            "–≤–æ–ª–æ—Å—ã": "hair",
            "–≤–æ–ª–æ—Å–∞–º–∏": "hair",
            "–ø—Ä–∏—á–µ—Å–∫–∞": "hairstyle",
            "–∫–æ—Ä–æ—Ç–∫–∏–µ": "short",
            "–¥–ª–∏–Ω–Ω—ã–µ": "long",
            "–∫—É–¥—Ä—è–≤—ã–µ": "curly",
            "–ø—Ä—è–º—ã–µ": "straight",
            "–≥–æ–ª—É–±–æ–π": "blue",
            "–≥–æ–ª—É–±—ã–º–∏": "blue",
            "—Å–∏–Ω–∏–π": "blue",
            "—Å–∏–Ω–∏–º–∏": "blue",
            "–∫—Ä–∞—Å–Ω—ã–π": "red",
            "–∫—Ä–∞—Å–Ω—ã–º–∏": "red",
            "–∑–µ–ª–µ–Ω—ã–π": "green",
            "–∑–µ–ª–µ–Ω—ã–º–∏": "green",
            "–∂–µ–ª—Ç—ã–π": "yellow",
            "–∂–µ–ª—Ç—ã–º–∏": "yellow",
            "—á–µ—Ä–Ω—ã–π": "black",
            "—á–µ—Ä–Ω–æ–≥–æ": "black",
            "—á–µ—Ä–Ω–æ–º": "black",
            "—á–µ—Ä–Ω—ã–º–∏": "black",
            "–±–µ–ª—ã–π": "white",
            "–±–µ–ª–æ–≥–æ": "white",
            "–±–µ–ª—ã–º–∏": "white",
            "–∫–æ—Å—Ç—é–º": "suit",
            "–∫–æ—Å—Ç—é–º–µ": "suit",
            "–ø–ª–∞—Ç—å–µ": "dress",
            # –û–∫—Ä—É–∂–µ–Ω–∏–µ
            "–≥–æ—Ä–æ–¥": "city",
            "–≥–æ—Ä–æ–¥—Å–∫–æ–π": "urban",
            "–ø—Ä–∏—Ä–æ–¥–∞": "nature", 
            "–ø—Ä–∏—Ä–æ–¥–Ω—ã–π": "natural",
            "–≥–æ—Ä—ã": "mountains",
            "–≥–æ—Ä–Ω—ã–π": "mountain",
            "–º–æ—Ä–µ": "sea",
            "–º–æ—Ä—Å–∫–æ–π": "sea",
            "–æ–∫–µ–∞–Ω": "ocean",
            "–ø–ª—è–∂": "beach",
            "–ø–ª—è–∂–Ω—ã–π": "beach",
            "–ª–µ—Å": "forest",
            "–ª–µ—Å–Ω–æ–π": "forest",
            "–Ω–µ–±–æ": "sky",
            "–Ω–µ–±–µ—Å–Ω—ã–π": "sky",
            "–∫–æ—Å–º–æ—Å": "space",
            "–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π": "space",
            "–∑–≤–µ–∑–¥—ã": "stars",
            "–∑–≤–µ–∑–¥–Ω—ã–π": "starry",
            "—Å–æ–ª–Ω—Ü–µ": "sun",
            "—Å–æ–ª–Ω–µ—á–Ω—ã–π": "sunny",
            "–ª—É–Ω–∞": "moon",
            "–ª—É–Ω–Ω—ã–π": "lunar",
            "–∑–∞–∫–∞—Ç": "sunset",
            "—Ä–∞—Å—Å–≤–µ—Ç": "dawn",
            "—É—Ç—Ä–æ": "morning",
            "—É—Ç—Ä–µ–Ω–Ω–∏–π": "morning",
            "–¥–µ–Ω—å": "day",
            "–¥–Ω–µ–≤–Ω–æ–π": "day",
            "–Ω–æ—á—å": "night",
            "–Ω–æ—á–Ω–æ–π": "night",
            "—è–ø–æ–Ω—Å–∫–∏–π": "japanese",
            "—è–ø–æ–Ω—Å–∫–æ–≥–æ": "japanese",
            "—Å–∞–¥": "garden",
            "—Å–∞–¥–æ–≤—ã–π": "garden",
            "—Ü–≤–µ—Ç—É—â–∏–π": "blooming",
            "—Ü–≤–µ—Ç—É—â–∞—è": "blooming",
            "—Å–∞–∫—É—Ä–∞": "sakura",
            "–¥–µ—Ä–µ–≤–æ": "tree",
            "–¥–µ—Ä–µ–≤—å—è": "trees",
            "—Ü–≤–µ—Ç—ã": "flowers",
            "—Ü–≤–µ—Ç–æ—á–Ω—ã–π": "floral",
            "–æ—Å—Ç—Ä–æ–≤": "island",
            "–æ—Å—Ç—Ä–æ–≤–∞": "islands",
            "–ø–∞—Ä—è—â–∏–µ": "floating",
            "–≤–æ–¥–æ–ø–∞–¥": "waterfall",
            "–≤–æ–¥–æ–ø–∞–¥—ã": "waterfalls",
            # –§—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ
            "—Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π": "futuristic",
            "–±—É–¥—É—â–µ–µ": "future",
            "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": "technology",
            "—Ä–æ–±–æ—Ç": "robot",
            "—Ä–æ–±–æ—Ç—ã": "robots",
            "–ª–µ—Ç–∞—é—â–∏–π": "flying",
            "–ª–µ—Ç–∞—é—â–∏–µ": "flying",
            "–∞–≤—Ç–æ–º–æ–±–∏–ª—å": "car",
            "–∞–≤—Ç–æ–º–æ–±–∏–ª–∏": "cars",
            # –°—Ç–∏–ª–∏ –∏ —ç–ø–æ—Ö–∏
            "–∞–Ω–∏–º–µ": "anime",
            "–º—É–ª—å—Ç—Ñ–∏–ª—å–º": "cartoon",
            "—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π": "realistic",
            "—Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π": "photorealistic",
            "—Å–∫–µ—Ç—á": "sketch",
            "—Ä–∏—Å—É–Ω–æ–∫": "drawing",
            "–∫–∞—Ä—Ç–∏–Ω–∞": "painting",
            "–º–∞—Å–ª–æ": "oil painting",
            "–∞–∫–≤–∞—Ä–µ–ª—å": "watercolor",
            "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π": "modern",
            "—Å—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—ã–π": "medieval",
            "—Ä–µ—Ç—Ä–æ": "retro",
            "–≤–∏–Ω—Ç–∞–∂": "vintage",
            "90-—Ö": "90s",
            "80-—Ö": "80s",
            "–≤ —Å—Ç–∏–ª–µ": "in the style of",
            "—Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º": "with effect of",
            # –°–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
            "—Å": "with",
            "–∏": "and",
            "–≤": "in",
            "–Ω–∞": "on",
            "–±–µ–∑": "without",
            "–ø–æ–¥": "under",
            "–Ω–∞–¥": "above",
            "–≤–æ–∑–ª–µ": "near",
            "—Ä—è–¥–æ–º": "next to",
            "–∑–∞": "behind",
            "–ø–µ—Ä–µ–¥": "in front of",
            "–º–µ–∂–¥—É": "between",
            "–≤–Ω—É—Ç—Ä–∏": "inside",
            "—Å–Ω–∞—Ä—É–∂–∏": "outside",
            "—á–µ—Ä–µ–∑": "through",
            "—Å–∫–≤–æ–∑—å": "through",
            "–ø–æ": "along",
            "–≤–æ–∫—Ä—É–≥": "around",
            "–ø–æ—Å—Ä–µ–¥–∏": "among",
        }
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –∑–∞–ø—Ä–æ—Å
        # –ü—Ä–∏–≤–µ–¥–µ–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ —Ä–∞–∑–¥–µ–ª–∏–º –Ω–∞ —Å–ª–æ–≤–∞
        text = prompt.lower()
        
        # –ó–∞–º–µ–Ω–∞ —Ñ—Ä–∞–∑ (–≤–∞–∂–Ω–æ –¥–µ–ª–∞—Ç—å —ç—Ç–æ –¥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ —Å–ª–æ–≤–∞)
        phrases = {
            "–≤ —á–µ—Ä–Ω–æ–º –∫–æ—Å—Ç—é–º–µ": "in black suit",
            "—Å —Å–∏–Ω–∏–º–∏ –≤–æ–ª–æ—Å–∞–º–∏": "with blue hair",
            "—Å –≥–æ–ª—É–±—ã–º–∏ –≤–æ–ª–æ—Å–∞–º–∏": "with blue hair",
            "—Å –∫—Ä–∞—Å–Ω—ã–º–∏ –≤–æ–ª–æ—Å–∞–º–∏": "with red hair",
            "—Å –∑–µ–ª–µ–Ω—ã–º–∏ –≤–æ–ª–æ—Å–∞–º–∏": "with green hair",
            "–≤ —Å—Ç–∏–ª–µ –∞–Ω–∏–º–µ": "in anime style",
            "–≤ —è–ø–æ–Ω—Å–∫–æ–º —Å–∞–¥—É": "in japanese garden",
            "—Å —Ü–≤–µ—Ç—É—â–µ–π —Å–∞–∫—É—Ä–æ–π": "with blooming sakura",
            "—Å —Ü–≤–µ—Ç—É—â–∏–º–∏ –¥–µ—Ä–µ–≤—å—è–º–∏": "with blooming trees",
            "–Ω–∞ —Ñ–æ–Ω–µ –≥–æ—Ä–æ–¥–∞": "with city background",
            "–Ω–∞ —Ñ–æ–Ω–µ –º–æ—Ä—è": "with sea background",
            "–Ω–∞ —Ñ–æ–Ω–µ –≥–æ—Ä": "with mountain background",
            "–Ω–∞ —Ñ–æ–Ω–µ –∑–∞–∫–∞—Ç–∞": "with sunset background",
            "—Å –ø–∞—Ä—è—â–∏–º–∏ –æ—Å—Ç—Ä–æ–≤–∞–º–∏": "with floating islands",
            "–ª–µ—Ç–∞—é—â–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏": "flying cars",
            "–≤ —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–º –≥–æ—Ä–æ–¥–µ": "in futuristic city",
            "–±–µ–ª–∞—è –º–∞—à–∏–Ω–∞ –∏–∑ –±—É–º–∞–≥–∏": "white paper car",
            "–±–µ–ª–∞—è –º–∞—à–∏–Ω–∞": "white car",
            "—á–µ—Ä–Ω—ã–π —Å–∞–º–æ–ª–µ—Ç": "black airplane",
            "—á–µ—Ä–Ω—ã–π —Å–∞–º–æ–ª–µ—Ç –≤ –Ω–µ–±–µ": "black airplane in the sky",
            "—Å–∞–º–æ–ª–µ—Ç –≤ –Ω–µ–±–µ": "airplane in the sky",
            "–±–æ–ª—å—à–æ–π —á–µ—Ä–Ω—ã–π —Å–∞–º–æ–ª–µ—Ç": "large black airplane",
            "–≤ –∞—ç—Ä–æ–ø–æ—Ä—Ç—É": "at the airport"
        }
        
        for rus_phrase, eng_phrase in phrases.items():
            if rus_phrase in text:
                text = text.replace(rus_phrase, eng_phrase)
                
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ
        words = text.split()
        english_words = []
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –ø–µ—Ä–µ–≤–µ–ª–∏ –ª–∏ –º—ã —Å–ª–æ–≤–æ "–≤–æ–ª–æ—Å—ã" –∏–ª–∏ –µ–≥–æ —Ñ–æ—Ä–º—ã
        has_hair_color = False
        
        for word in words:
            clean_word = word.strip(",.!?:;()\"'")
            
            # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ (–±—ã–ª–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –Ω–∞ —ç—Ç–∞–ø–µ —Ñ—Ä–∞–∑)
            if clean_word in ["with", "in", "blue", "hair", "black", "suit", "anime", "style", 
                            "japanese", "garden", "blooming", "sakura", "city", "background"]:
                english_words.append(clean_word)
                
                # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —É–∂–µ –µ—Å—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ü–≤–µ—Ç–∞ –≤–æ–ª–æ—Å
                if clean_word in ["blue", "red", "green", "yellow", "black", "white"] and "hair" in english_words:
                    has_hair_color = True
                    
                continue
                
            # –ü–µ—Ä–µ–≤–æ–¥ —Ä—É—Å—Å–∫–∏—Ö —Å–ª–æ–≤
            if clean_word in translations:
                translated = translations[clean_word]
                english_words.append(translated)
                
                # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –Ω–∞—à–ª–∏ —Ü–≤–µ—Ç –≤–æ–ª–æ—Å
                if clean_word in ["—Å–∏–Ω–∏–º–∏", "–≥–æ–ª—É–±—ã–º–∏", "–∫—Ä–∞—Å–Ω—ã–º–∏", "–∑–µ–ª–µ–Ω—ã–º–∏", "–∂–µ–ª—Ç—ã–º–∏", "—á–µ—Ä–Ω—ã–º–∏", "–±–µ–ª—ã–º–∏"] and "hair" in english_words:
                    has_hair_color = True
            else:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–æ–≤–∞ –∫–æ—Ä–æ—á–µ 3 —Å–∏–º–≤–æ–ª–æ–≤, —ç—Ç–æ –æ–±—ã—á–Ω–æ –ø—Ä–µ–¥–ª–æ–≥–∏ –∏–ª–∏ —Å–æ—é–∑—ã
                # –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã —Ñ—Ä–∞–∑–∞–º–∏ –≤—ã—à–µ
                if len(clean_word) > 3:
                    # –ü—Ä–æ–≤–µ—Ä–∏–º, –º–æ–∂–µ—Ç —ç—Ç–æ —Ñ–æ—Ä–º–∞ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—É—é –º—ã –Ω–µ —É—á–ª–∏
                    was_translated = False
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã—Ö 
                    for stem in ["—Å–∏–Ω", "–≥–æ–ª—É–±", "–∫—Ä–∞—Å–Ω", "–∑–µ–ª–µ–Ω", "–∂–µ–ª—Ç", "—á–µ—Ä–Ω", "–±–µ–ª"]:
                        if clean_word.startswith(stem):
                            if stem == "—Å–∏–Ω" or stem == "–≥–æ–ª—É–±":
                                english_words.append("blue")
                                was_translated = True
                                if "hair" in english_words:
                                    has_hair_color = True
                            elif stem == "–∫—Ä–∞—Å–Ω":
                                english_words.append("red")
                                was_translated = True
                                if "hair" in english_words:
                                    has_hair_color = True
                            elif stem == "–∑–µ–ª–µ–Ω":
                                english_words.append("green")
                                was_translated = True
                                if "hair" in english_words:
                                    has_hair_color = True
                            elif stem == "–∂–µ–ª—Ç":
                                english_words.append("yellow")
                                was_translated = True
                                if "hair" in english_words:
                                    has_hair_color = True
                            elif stem == "—á–µ—Ä–Ω":
                                english_words.append("black")
                                was_translated = True
                                if "hair" in english_words:
                                    has_hair_color = True
                            elif stem == "–±–µ–ª":
                                english_words.append("white")
                                was_translated = True
                                if "hair" in english_words:
                                    has_hair_color = True
                            break
                                
                    if not was_translated:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –∏ –∏—Ö —Ñ–æ—Ä–º—ã
                        for stem, eng in [("–≤–æ–ª–æ—Å", "hair"), ("–∫–æ—Å—Ç—é–º", "suit"), ("–ø–ª–∞—Ç—å", "dress")]:
                            if clean_word.startswith(stem):
                                english_words.append(eng)
                                was_translated = True
                                break
                                
                    # –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ
                    if not was_translated and len(clean_word) > 4:
                        # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–º—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–ª–∏ —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ
                        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –Ω—É–∂–µ–Ω –±—ã –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫
                        # –ù–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º—ã –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–∏–º —Å–ª–æ–≤–æ –∫–∞–∫ –µ—Å—Ç—å
                        pass  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–ª–æ–≤–∞
        
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –∑–∞–º–µ–Ω –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, –≤–µ—Ä–Ω–µ–º –±–∞–∑–æ–≤—É—é —Ñ—Ä–∞–∑—É
        if not english_words:
            return "colorful portrait, professional photography, high resolution"
        
        # –°–æ–µ–¥–∏–Ω—è–µ–º —Å–ª–æ–≤–∞ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        english_prompt = " ".join(english_words)
        
        # –£–ª—É—á—à–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
        if "portrait" in english_prompt:
            if "anime" in english_prompt:
                if not has_hair_color and "hair" in english_prompt:
                    english_prompt += ", colorful hair"
                english_prompt += ", anime style portrait, highly detailed, beautiful art"
            else:
                if not has_hair_color and "hair" in english_prompt:
                    english_prompt += ", beautiful hair"
                english_prompt += ", professional portrait photography, high resolution, studio lighting"
                
        elif "landscape" in english_prompt:
            english_prompt += ", beautiful landscape, scenic view, high resolution, professional photography"
            
        elif "fantasy" in english_prompt:
            english_prompt += ", fantasy concept art, highly detailed, dramatic lighting, epic scene" 
            
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –∏–∑ –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–∏–º –æ–±—â–∏–µ —É–ª—É—á—à–µ–Ω–∏—è
        else:
            english_prompt += ", high quality, detailed image"
        
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ –æ—Å—Ç–∞–ª–∏—Å—å —Å–ª–æ–≤–∞ "–ø–∞—Ä–Ω—è", "—á–µ—Ä–Ω–æ–º", "—Å–∏–Ω–∏–º–∏",
        # –∑–∞–º–µ–Ω–∏–º –∏—Ö –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–∞–º–∏
        english_prompt = english_prompt.replace("–ø–∞—Ä–Ω—è", "young man")
        english_prompt = english_prompt.replace("—á–µ—Ä–Ω–æ–º", "black")
        english_prompt = english_prompt.replace("—Å–∏–Ω–∏–º–∏", "blue")
        
        return english_prompt
        
    def _create_payment(self, chat_id, payment_method):
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ —Å —É—á–µ—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –∏ –ø–∞–∫–µ—Ç–∞
        
        Args:
            chat_id (int): ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            payment_method (str): –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã ('crypto' –∏–ª–∏ 'card')
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        try:
            logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}, —Å–ø–æ—Å–æ–±: {payment_method}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç
            selected_package = self.user_data[chat_id].get('selected_package')
            if not selected_package:
                logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
                self.safe_send_message(
                    chat_id,
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤ —Å–Ω–æ–≤–∞."
                )
                return False
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞
            if payment_method == "crypto":
                # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Crypto Bot
                payment_info = self.payment_module.create_payment(
                    amount=selected_package["price"],
                    package_id=selected_package["id"],
                    telegram_id=chat_id
                )
                message_template = "payment_created"
                payment_id_key = "payment_id"
            else:
                # –ü–ª–∞—Ç–µ–∂ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π —á–µ—Ä–µ–∑ Stripe
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã Stripe (—Ç–µ—Å—Ç–æ–≤—ã–π –∏–ª–∏ –±–æ–µ–≤–æ–π)
                is_test_mode = self.stripe_payment.api_key and self.stripe_payment.api_key.startswith('sk_test_')
                logger.info(f"–°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ Stripe –≤ {'—Ç–µ—Å—Ç–æ–≤–æ–º' if is_test_mode else '–±–æ–µ–≤–æ–º'} —Ä–µ–∂–∏–º–µ")
                
                # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Stripe
                # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã Stripe
                if selected_package.get("id", "").startswith("basic_crypto") or selected_package.get("id", "").startswith("standard_crypto") or selected_package.get("id", "").startswith("premium_crypto"):
                    logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–∞–∫–µ—Ç –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –∫–∞—Ä—Ç–æ–π, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞–∫–µ—Ç Stripe")
                    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø–∞–∫–µ—Ç –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã, –Ω–æ –æ–ø–ª–∞—Ç–∞ –∏–¥–µ—Ç –∫–∞—Ä—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø–∞–∫–µ—Ç Stripe
                    if selected_package["id"] == "basic_crypto":
                        selected_package = self.stripe_payment.credit_packages[0]  # basic
                    elif selected_package["id"] == "standard_crypto":
                        selected_package = self.stripe_payment.credit_packages[1]  # standard
                    elif selected_package["id"] == "premium_crypto":
                        selected_package = self.stripe_payment.credit_packages[2]  # premium
                
                # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
                payment_info = self.stripe_payment.create_payment(
                    amount=selected_package["price"],
                    package_id=selected_package["id"],
                    telegram_id=chat_id,
                    title=f"–ü–æ–∫—É–ø–∫–∞ {selected_package['credits']} –∫—Ä–µ–¥–∏—Ç–æ–≤"
                )
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
                message_template = "payment_created_card"
                
                # –ï—Å–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞—Ä—Ç–∞—Ö
                if is_test_mode:
                    message_template = "payment_created_card_test"
                
                payment_id_key = "session_id"
            
            if payment_info:
                # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                transaction = create_transaction(
                    telegram_id=chat_id,
                    amount=selected_package["price"],
                    credits=selected_package["credits"],
                    payment_id=payment_info.get(payment_id_key)
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –æ–ø–ª–∞—Ç—É
                self.safe_send_message(
                    chat_id,
                    PREMIUM_MESSAGES[message_template].format(
                        credits=selected_package["credits"],
                        amount=selected_package["price"],
                        payment_url=payment_info.get("payment_url")
                    ),
                    parse_mode="Markdown"
                )
                logger.info(f"–°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}, –º–µ—Ç–æ–¥: {payment_method}, —Å—Å—ã–ª–∫–∞: {payment_info.get('payment_url')}")
                return True
            else:
                # –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
                self.safe_send_message(
                    chat_id,
                    PREMIUM_MESSAGES["payment_error"],
                    parse_mode="Markdown"
                )
                return False
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            self.safe_send_message(
                chat_id,
                PREMIUM_MESSAGES["payment_error"],
                parse_mode="Markdown"
            )
            return False
    
    def handle_stripe_payment(self, chat_id, session_id):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ Stripe PaymentLink (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        
        Args:
            chat_id (int): ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            session_id (str): ID —Å–µ—Å—Å–∏–∏ –∏–ª–∏ –ø–ª–∞—Ç–µ–∂–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ –∫—Ä–µ–¥–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω—ã, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥–µ–ª–∏
        from models import User, Transaction
        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ Stripe PaymentLink: {session_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å —Ç–∞–∫–∏–º payment_id
            session = Session()
            existing_transaction = session.query(Transaction).filter_by(payment_id=session_id).first()
            
            if existing_transaction and existing_transaction.status == 'completed':
                # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤
                credits = existing_transaction.credits
                current_credits = get_user_credits(chat_id)
                
                logger.info(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {session_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Ä–∞–Ω–µ–µ. –ö—Ä–µ–¥–∏—Ç–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {current_credits}")
                
                self.safe_send_message(
                    chat_id,
                    f"‚úÖ –≠—Ç–æ—Ç –ø–ª–∞—Ç–µ–∂ —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ!\n\n"
                    f"–í—Å–µ–≥–æ —É –≤–∞—Å {current_credits} –∫—Ä–µ–¥–∏—Ç–æ–≤.",
                    parse_mode="Markdown"
                )
                session.close()
                return True
            
            # –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å–ª—É—á–∞—è, –µ—Å–ª–∏ –Ω–µ —Å–º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            credits = 5  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞–∫–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ Stripe
            payment_data = self.stripe_payment.get_payment_data(session_id)
            if payment_data:
                logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞: {payment_data}")
                credits = payment_data.get('credits', credits)
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {session_id}, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
            try:
                if existing_transaction:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                    existing_transaction.status = 'completed'
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É
                    import datetime as dt
                    existing_transaction.updated_at = dt.datetime.utcnow()
                    session.commit()
                    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {session_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                    import datetime
                    from models import User, Transaction
                    # –ù–∞–π–¥–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    user = session.query(User).filter_by(telegram_id=chat_id).first()
                    if user:
                        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å
                        transaction = Transaction(
                            user_id=user.id,
                            amount=0.40,  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—É–º–º–∞ (–∏–∑–º–µ–Ω–µ–Ω–æ —Å 0.30 –Ω–∞ 0.40 –∏–∑-–∑–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π Stripe)
                            credits=credits,
                            status='completed',  # –°—Ä–∞–∑—É –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ completed
                            payment_id=session_id,
                            payment_method="card",
                            created_at=datetime.datetime.utcnow(),
                            completed_at=datetime.datetime.utcnow()
                        )
                        session.add(transaction)
                        session.commit()
                        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è {chat_id}: {session_id} (card)")
                    else:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {chat_id}")
                        session.close()
                        return False
                
                # –ó–∞—á–∏—Å–ª—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                current_credits = get_user_credits(chat_id)
                updated_credits = current_credits + credits
                update_user_credits(chat_id, updated_credits)
                
                session.close()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                self.safe_send_message(
                    chat_id,
                    f"‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n"
                    f"–î–æ–±–∞–≤–ª–µ–Ω–æ {credits} –∫—Ä–µ–¥–∏—Ç–æ–≤.\n"
                    f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å {updated_credits} –∫—Ä–µ–¥–∏—Ç–æ–≤.",
                    parse_mode="Markdown"
                )
                
                return True
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π: {e}")
                session.rollback()
                session.close()
                raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Stripe –ø–ª–∞—Ç–µ–∂–∞: {e}")
            self.safe_send_message(
                chat_id,
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                parse_mode="Markdown"
            )
            return False

    def handle_package_selection(self, message):
        """
        –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤.
        
        Args:
            message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–±–æ—Ä–æ–º –ø–∞–∫–µ—Ç–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤
        """
        chat_id = message.chat.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        if hasattr(message, 'text') and message.text and message.text.isdigit():
            package_index = int(message.text.strip()) - 1  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∏–Ω–¥–µ–∫—Å (–Ω–∞—á–∏–Ω–∞—è —Å 0)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤—ã–±–∏—Ä–∞–µ—Ç –ø–∞–∫–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤: {package_index + 1}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
            payment_method = self.user_data[chat_id].get('selected_payment_method')
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞–∫–µ—Ç—ã –∫—Ä–µ–¥–∏—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
            if payment_method == "crypto":
                # –î–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–∫–µ—Ç—ã –∫—Ä–µ–¥–∏—Ç–æ–≤ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã")
                credit_packages = self.payment_module.get_credit_packages()
            else:
                # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –∏–∑ Stripe
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –∫—Ä–µ–¥–∏—Ç–æ–≤ (–¥–ª—è –∫–∞—Ä—Ç)")
                credit_packages = self.stripe_payment.get_credit_packages()
            
            if 0 <= package_index < len(credit_packages):
                selected_package = credit_packages[package_index]
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                self.user_data[chat_id]['selected_package'] = selected_package
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞
                self.user_data[chat_id]['waiting_for_package_selection'] = False
                
                # –ï—Å–ª–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã —É–∂–µ –≤—ã–±—Ä–∞–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø–ª–∞—Ç–µ–∂–∞
                if payment_method:
                    logger.info(f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã —É–∂–µ –≤—ã–±—Ä–∞–Ω: {payment_method}")
                    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –Ω–∞–ø—Ä—è–º—É—é
                    self._create_payment(chat_id, payment_method)
                else:
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
                    self.user_data[chat_id]['waiting_for_payment_method'] = True
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
                    payment_methods_text = PREMIUM_MESSAGES["choose_payment_method"]
                
                    # –î–µ—Ç–∞–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Stripe –∏ –ª–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    has_api_key = self.stripe_payment.api_key is not None
                    active_flag = hasattr(self.stripe_payment, 'stripe_integration_active') and self.stripe_payment.stripe_integration_active
                    logger.info(f"–û–¢–õ–ê–î–ö–ê STRIPE: api_key —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {has_api_key}, —Ç–∏–ø: {type(self.stripe_payment.api_key)}, –∞–∫—Ç–∏–≤–Ω–∞: {active_flag}")
                    
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º Stripe –µ—Å–ª–∏ –∫–ª—é—á —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    if has_api_key and not active_flag:
                        logger.info(f"–û–¢–õ–ê–î–ö–ê STRIPE: –ö–ª—é—á API —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º.")
                        setattr(self.stripe_payment, 'stripe_integration_active', True)
                        active_flag = True
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Stripe —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ API –∫–ª—é—á—É –∏ —Ñ–ª–∞–≥—É
                    if not active_flag:
                        # –ï—Å–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Stripe –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∏
                        logger.info(f"–û–¢–õ–ê–î–ö–ê STRIPE: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
                        payment_methods_text = "üí≥ *–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã* üí≥\n\n" \
                                             "1Ô∏è‚É£ *–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞* - –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Crypto Bot (USDT/TON)\n\n" \
                                             "–î–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç—å—Ç–µ '1'"
                    else:
                        logger.info(f"–û–¢–õ–ê–î–ö–ê STRIPE: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}")
                        payment_methods_text = "üí≥ *–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã* üí≥\n\n" \
                                             "1Ô∏è‚É£ *–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞* - –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Crypto Bot (USDT/TON)\n" \
                                             "2Ô∏è‚É£ *–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞* - –æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π —á–µ—Ä–µ–∑ Stripe\n\n" \
                                             "–î–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç—å—Ç–µ '1' –∏–ª–∏ '2'"
                    
                    # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤—ã–≤–µ–¥–µ–º, –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
                    logger.info(f"–û–¢–õ–ê–î–ö–ê STRIPE: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {payment_methods_text[:50]}...")
                    
                    self.safe_send_message(
                        chat_id,
                        payment_methods_text,
                        parse_mode="Markdown"
                    )
            else:
                # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –ø–∞–∫–µ—Ç–∞
                self.safe_send_message(
                    chat_id,
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç, –æ—Ç–ø—Ä–∞–≤–∏–≤ –Ω–æ–º–µ—Ä (1, 2 –∏–ª–∏ 3)"
                )
        else:
            # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥
            self.safe_send_message(
                chat_id,
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç, –æ—Ç–ø—Ä–∞–≤–∏–≤ –Ω–æ–º–µ—Ä (1, 2 –∏–ª–∏ 3)"
            )
            
    def handle_payment_method_selection(self, message):
        """
        –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã.
        
        Args:
            message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
        """
        chat_id = message.chat.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        if hasattr(message, 'text') and message.text:
            payment_input = message.text
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {payment_input}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Stripe
            stripe_active = getattr(self.stripe_payment, 'stripe_integration_active', False)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞
            if (stripe_active and payment_input in ["1", "2"]) or (not stripe_active and payment_input == "1"): 
                # –í—ã–±–æ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
                payment_method = "crypto" if payment_input == "1" else "card"
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
                self.user_data[chat_id]['waiting_for_payment_method'] = False
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
                self.user_data[chat_id]['selected_payment_method'] = payment_method
                
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤—ã–±—Ä–∞–ª —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_method}")
                
                # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç—ã –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
                if payment_method == "crypto":
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤—ã–±—Ä–∞–ª –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã")
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞
                    self.user_data[chat_id]['waiting_for_package_selection'] = True
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
                    self.safe_send_message(
                        chat_id,
                        PREMIUM_MESSAGES["buy_credits_crypto"],
                        parse_mode="Markdown"
                    )
                else:
                    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞–∫–µ—Ç—ã
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –≤—ã–±—Ä–∞–ª –æ–ø–ª–∞—Ç—É –∫–∞—Ä—Ç–æ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞–∫–µ—Ç—ã")
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞
                    self.user_data[chat_id]['waiting_for_package_selection'] = True
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –∫–∞—Ä—Ç—ã
                    self.safe_send_message(
                        chat_id,
                        PREMIUM_MESSAGES["buy_credits"],
                        parse_mode="Markdown"
                    )
            else:
                # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
                if stripe_active:
                    self.safe_send_message(
                        chat_id,
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã, –æ—Ç–ø—Ä–∞–≤–∏–≤ –Ω–æ–º–µ—Ä (1 –∏–ª–∏ 2)"
                    )
                else:
                    self.safe_send_message(
                        chat_id,
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã, –æ—Ç–ø—Ä–∞–≤–∏–≤ –Ω–æ–º–µ—Ä 1"
                    )
        
    def run(self):
        """Run the bot."""
        logger.info("Starting bot...")
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º webhook, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        logger.info("–£–¥–∞–ª—è–µ–º webhook –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤...")
        try:
            result = self.bot.remove_webhook()
            logger.info(f"Webhook —É–¥–∞–ª–µ–Ω: {result}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {e}")
        
        if not self.use_webhook:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª–ª–∏–Ω–≥–∞
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            self.bot.polling(none_stop=True, interval=1)
